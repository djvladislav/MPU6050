
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a88  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003b40  08003b40  00004b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bec  08003bec  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003bec  08003bec  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bec  08003bec  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bec  08003bec  00004bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bf0  08003bf0  00004bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003bf4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000068  08003c5c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08003c5c  00005264  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076b8  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001905  00000000  00000000  0000c748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  0000e050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000648  00000000  00000000  0000e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014fe8  00000000  00000000  0000eee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000affa  00000000  00000000  00023ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e84d  00000000  00000000  0002eeca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad717  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000237c  00000000  00000000  000ad75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000afad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000068 	.word	0x20000068
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003b28 	.word	0x08003b28

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000006c 	.word	0x2000006c
 80000fc:	08003b28 	.word	0x08003b28

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <__aeabi_ddiv>:
 80003ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ee:	46de      	mov	lr, fp
 80003f0:	4645      	mov	r5, r8
 80003f2:	4657      	mov	r7, sl
 80003f4:	464e      	mov	r6, r9
 80003f6:	b5e0      	push	{r5, r6, r7, lr}
 80003f8:	b087      	sub	sp, #28
 80003fa:	9200      	str	r2, [sp, #0]
 80003fc:	9301      	str	r3, [sp, #4]
 80003fe:	030b      	lsls	r3, r1, #12
 8000400:	0b1b      	lsrs	r3, r3, #12
 8000402:	469b      	mov	fp, r3
 8000404:	0fca      	lsrs	r2, r1, #31
 8000406:	004b      	lsls	r3, r1, #1
 8000408:	0004      	movs	r4, r0
 800040a:	4680      	mov	r8, r0
 800040c:	0d5b      	lsrs	r3, r3, #21
 800040e:	9202      	str	r2, [sp, #8]
 8000410:	d100      	bne.n	8000414 <__aeabi_ddiv+0x28>
 8000412:	e16a      	b.n	80006ea <__aeabi_ddiv+0x2fe>
 8000414:	4ad4      	ldr	r2, [pc, #848]	@ (8000768 <__aeabi_ddiv+0x37c>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d100      	bne.n	800041c <__aeabi_ddiv+0x30>
 800041a:	e18c      	b.n	8000736 <__aeabi_ddiv+0x34a>
 800041c:	4659      	mov	r1, fp
 800041e:	0f42      	lsrs	r2, r0, #29
 8000420:	00c9      	lsls	r1, r1, #3
 8000422:	430a      	orrs	r2, r1
 8000424:	2180      	movs	r1, #128	@ 0x80
 8000426:	0409      	lsls	r1, r1, #16
 8000428:	4311      	orrs	r1, r2
 800042a:	00c2      	lsls	r2, r0, #3
 800042c:	4690      	mov	r8, r2
 800042e:	4acf      	ldr	r2, [pc, #828]	@ (800076c <__aeabi_ddiv+0x380>)
 8000430:	4689      	mov	r9, r1
 8000432:	4692      	mov	sl, r2
 8000434:	449a      	add	sl, r3
 8000436:	2300      	movs	r3, #0
 8000438:	2400      	movs	r4, #0
 800043a:	9303      	str	r3, [sp, #12]
 800043c:	9e00      	ldr	r6, [sp, #0]
 800043e:	9f01      	ldr	r7, [sp, #4]
 8000440:	033b      	lsls	r3, r7, #12
 8000442:	0b1b      	lsrs	r3, r3, #12
 8000444:	469b      	mov	fp, r3
 8000446:	007b      	lsls	r3, r7, #1
 8000448:	0030      	movs	r0, r6
 800044a:	0d5b      	lsrs	r3, r3, #21
 800044c:	0ffd      	lsrs	r5, r7, #31
 800044e:	2b00      	cmp	r3, #0
 8000450:	d100      	bne.n	8000454 <__aeabi_ddiv+0x68>
 8000452:	e128      	b.n	80006a6 <__aeabi_ddiv+0x2ba>
 8000454:	4ac4      	ldr	r2, [pc, #784]	@ (8000768 <__aeabi_ddiv+0x37c>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d100      	bne.n	800045c <__aeabi_ddiv+0x70>
 800045a:	e177      	b.n	800074c <__aeabi_ddiv+0x360>
 800045c:	4659      	mov	r1, fp
 800045e:	0f72      	lsrs	r2, r6, #29
 8000460:	00c9      	lsls	r1, r1, #3
 8000462:	430a      	orrs	r2, r1
 8000464:	2180      	movs	r1, #128	@ 0x80
 8000466:	0409      	lsls	r1, r1, #16
 8000468:	4311      	orrs	r1, r2
 800046a:	468b      	mov	fp, r1
 800046c:	49bf      	ldr	r1, [pc, #764]	@ (800076c <__aeabi_ddiv+0x380>)
 800046e:	00f2      	lsls	r2, r6, #3
 8000470:	468c      	mov	ip, r1
 8000472:	4651      	mov	r1, sl
 8000474:	4463      	add	r3, ip
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	469a      	mov	sl, r3
 800047a:	2300      	movs	r3, #0
 800047c:	9e02      	ldr	r6, [sp, #8]
 800047e:	406e      	eors	r6, r5
 8000480:	2c0f      	cmp	r4, #15
 8000482:	d827      	bhi.n	80004d4 <__aeabi_ddiv+0xe8>
 8000484:	49ba      	ldr	r1, [pc, #744]	@ (8000770 <__aeabi_ddiv+0x384>)
 8000486:	00a4      	lsls	r4, r4, #2
 8000488:	5909      	ldr	r1, [r1, r4]
 800048a:	468f      	mov	pc, r1
 800048c:	46cb      	mov	fp, r9
 800048e:	4642      	mov	r2, r8
 8000490:	9e02      	ldr	r6, [sp, #8]
 8000492:	9b03      	ldr	r3, [sp, #12]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d016      	beq.n	80004c6 <__aeabi_ddiv+0xda>
 8000498:	2b03      	cmp	r3, #3
 800049a:	d100      	bne.n	800049e <__aeabi_ddiv+0xb2>
 800049c:	e2a6      	b.n	80009ec <__aeabi_ddiv+0x600>
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d000      	beq.n	80004a4 <__aeabi_ddiv+0xb8>
 80004a2:	e0df      	b.n	8000664 <__aeabi_ddiv+0x278>
 80004a4:	2200      	movs	r2, #0
 80004a6:	2300      	movs	r3, #0
 80004a8:	2400      	movs	r4, #0
 80004aa:	4690      	mov	r8, r2
 80004ac:	051b      	lsls	r3, r3, #20
 80004ae:	4323      	orrs	r3, r4
 80004b0:	07f6      	lsls	r6, r6, #31
 80004b2:	4333      	orrs	r3, r6
 80004b4:	4640      	mov	r0, r8
 80004b6:	0019      	movs	r1, r3
 80004b8:	b007      	add	sp, #28
 80004ba:	bcf0      	pop	{r4, r5, r6, r7}
 80004bc:	46bb      	mov	fp, r7
 80004be:	46b2      	mov	sl, r6
 80004c0:	46a9      	mov	r9, r5
 80004c2:	46a0      	mov	r8, r4
 80004c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c6:	2200      	movs	r2, #0
 80004c8:	2400      	movs	r4, #0
 80004ca:	4690      	mov	r8, r2
 80004cc:	4ba6      	ldr	r3, [pc, #664]	@ (8000768 <__aeabi_ddiv+0x37c>)
 80004ce:	e7ed      	b.n	80004ac <__aeabi_ddiv+0xc0>
 80004d0:	002e      	movs	r6, r5
 80004d2:	e7df      	b.n	8000494 <__aeabi_ddiv+0xa8>
 80004d4:	45cb      	cmp	fp, r9
 80004d6:	d200      	bcs.n	80004da <__aeabi_ddiv+0xee>
 80004d8:	e1d4      	b.n	8000884 <__aeabi_ddiv+0x498>
 80004da:	d100      	bne.n	80004de <__aeabi_ddiv+0xf2>
 80004dc:	e1cf      	b.n	800087e <__aeabi_ddiv+0x492>
 80004de:	2301      	movs	r3, #1
 80004e0:	425b      	negs	r3, r3
 80004e2:	469c      	mov	ip, r3
 80004e4:	4644      	mov	r4, r8
 80004e6:	4648      	mov	r0, r9
 80004e8:	2700      	movs	r7, #0
 80004ea:	44e2      	add	sl, ip
 80004ec:	465b      	mov	r3, fp
 80004ee:	0e15      	lsrs	r5, r2, #24
 80004f0:	021b      	lsls	r3, r3, #8
 80004f2:	431d      	orrs	r5, r3
 80004f4:	0c19      	lsrs	r1, r3, #16
 80004f6:	042b      	lsls	r3, r5, #16
 80004f8:	0212      	lsls	r2, r2, #8
 80004fa:	9500      	str	r5, [sp, #0]
 80004fc:	0c1d      	lsrs	r5, r3, #16
 80004fe:	4691      	mov	r9, r2
 8000500:	9102      	str	r1, [sp, #8]
 8000502:	9503      	str	r5, [sp, #12]
 8000504:	f7ff fe82 	bl	800020c <__aeabi_uidivmod>
 8000508:	0002      	movs	r2, r0
 800050a:	436a      	muls	r2, r5
 800050c:	040b      	lsls	r3, r1, #16
 800050e:	0c21      	lsrs	r1, r4, #16
 8000510:	4680      	mov	r8, r0
 8000512:	4319      	orrs	r1, r3
 8000514:	428a      	cmp	r2, r1
 8000516:	d909      	bls.n	800052c <__aeabi_ddiv+0x140>
 8000518:	9d00      	ldr	r5, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	46ac      	mov	ip, r5
 800051e:	425b      	negs	r3, r3
 8000520:	4461      	add	r1, ip
 8000522:	469c      	mov	ip, r3
 8000524:	44e0      	add	r8, ip
 8000526:	428d      	cmp	r5, r1
 8000528:	d800      	bhi.n	800052c <__aeabi_ddiv+0x140>
 800052a:	e1fb      	b.n	8000924 <__aeabi_ddiv+0x538>
 800052c:	1a88      	subs	r0, r1, r2
 800052e:	9902      	ldr	r1, [sp, #8]
 8000530:	f7ff fe6c 	bl	800020c <__aeabi_uidivmod>
 8000534:	9a03      	ldr	r2, [sp, #12]
 8000536:	0424      	lsls	r4, r4, #16
 8000538:	4342      	muls	r2, r0
 800053a:	0409      	lsls	r1, r1, #16
 800053c:	0c24      	lsrs	r4, r4, #16
 800053e:	0003      	movs	r3, r0
 8000540:	430c      	orrs	r4, r1
 8000542:	42a2      	cmp	r2, r4
 8000544:	d906      	bls.n	8000554 <__aeabi_ddiv+0x168>
 8000546:	9900      	ldr	r1, [sp, #0]
 8000548:	3b01      	subs	r3, #1
 800054a:	468c      	mov	ip, r1
 800054c:	4464      	add	r4, ip
 800054e:	42a1      	cmp	r1, r4
 8000550:	d800      	bhi.n	8000554 <__aeabi_ddiv+0x168>
 8000552:	e1e1      	b.n	8000918 <__aeabi_ddiv+0x52c>
 8000554:	1aa0      	subs	r0, r4, r2
 8000556:	4642      	mov	r2, r8
 8000558:	0412      	lsls	r2, r2, #16
 800055a:	431a      	orrs	r2, r3
 800055c:	4693      	mov	fp, r2
 800055e:	464b      	mov	r3, r9
 8000560:	4659      	mov	r1, fp
 8000562:	0c1b      	lsrs	r3, r3, #16
 8000564:	001d      	movs	r5, r3
 8000566:	9304      	str	r3, [sp, #16]
 8000568:	040b      	lsls	r3, r1, #16
 800056a:	4649      	mov	r1, r9
 800056c:	0409      	lsls	r1, r1, #16
 800056e:	0c09      	lsrs	r1, r1, #16
 8000570:	000c      	movs	r4, r1
 8000572:	0c1b      	lsrs	r3, r3, #16
 8000574:	435c      	muls	r4, r3
 8000576:	0c12      	lsrs	r2, r2, #16
 8000578:	436b      	muls	r3, r5
 800057a:	4688      	mov	r8, r1
 800057c:	4351      	muls	r1, r2
 800057e:	436a      	muls	r2, r5
 8000580:	0c25      	lsrs	r5, r4, #16
 8000582:	46ac      	mov	ip, r5
 8000584:	185b      	adds	r3, r3, r1
 8000586:	4463      	add	r3, ip
 8000588:	4299      	cmp	r1, r3
 800058a:	d903      	bls.n	8000594 <__aeabi_ddiv+0x1a8>
 800058c:	2180      	movs	r1, #128	@ 0x80
 800058e:	0249      	lsls	r1, r1, #9
 8000590:	468c      	mov	ip, r1
 8000592:	4462      	add	r2, ip
 8000594:	0c19      	lsrs	r1, r3, #16
 8000596:	0424      	lsls	r4, r4, #16
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	0c24      	lsrs	r4, r4, #16
 800059c:	188a      	adds	r2, r1, r2
 800059e:	191c      	adds	r4, r3, r4
 80005a0:	4290      	cmp	r0, r2
 80005a2:	d302      	bcc.n	80005aa <__aeabi_ddiv+0x1be>
 80005a4:	d116      	bne.n	80005d4 <__aeabi_ddiv+0x1e8>
 80005a6:	42a7      	cmp	r7, r4
 80005a8:	d214      	bcs.n	80005d4 <__aeabi_ddiv+0x1e8>
 80005aa:	465b      	mov	r3, fp
 80005ac:	9d00      	ldr	r5, [sp, #0]
 80005ae:	3b01      	subs	r3, #1
 80005b0:	444f      	add	r7, r9
 80005b2:	9305      	str	r3, [sp, #20]
 80005b4:	454f      	cmp	r7, r9
 80005b6:	419b      	sbcs	r3, r3
 80005b8:	46ac      	mov	ip, r5
 80005ba:	425b      	negs	r3, r3
 80005bc:	4463      	add	r3, ip
 80005be:	18c0      	adds	r0, r0, r3
 80005c0:	4285      	cmp	r5, r0
 80005c2:	d300      	bcc.n	80005c6 <__aeabi_ddiv+0x1da>
 80005c4:	e1a1      	b.n	800090a <__aeabi_ddiv+0x51e>
 80005c6:	4282      	cmp	r2, r0
 80005c8:	d900      	bls.n	80005cc <__aeabi_ddiv+0x1e0>
 80005ca:	e1f6      	b.n	80009ba <__aeabi_ddiv+0x5ce>
 80005cc:	d100      	bne.n	80005d0 <__aeabi_ddiv+0x1e4>
 80005ce:	e1f1      	b.n	80009b4 <__aeabi_ddiv+0x5c8>
 80005d0:	9b05      	ldr	r3, [sp, #20]
 80005d2:	469b      	mov	fp, r3
 80005d4:	1b3c      	subs	r4, r7, r4
 80005d6:	42a7      	cmp	r7, r4
 80005d8:	41bf      	sbcs	r7, r7
 80005da:	9d00      	ldr	r5, [sp, #0]
 80005dc:	1a80      	subs	r0, r0, r2
 80005de:	427f      	negs	r7, r7
 80005e0:	1bc0      	subs	r0, r0, r7
 80005e2:	4285      	cmp	r5, r0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_ddiv+0x1fc>
 80005e6:	e1d0      	b.n	800098a <__aeabi_ddiv+0x59e>
 80005e8:	9902      	ldr	r1, [sp, #8]
 80005ea:	f7ff fe0f 	bl	800020c <__aeabi_uidivmod>
 80005ee:	9a03      	ldr	r2, [sp, #12]
 80005f0:	040b      	lsls	r3, r1, #16
 80005f2:	4342      	muls	r2, r0
 80005f4:	0c21      	lsrs	r1, r4, #16
 80005f6:	0007      	movs	r7, r0
 80005f8:	4319      	orrs	r1, r3
 80005fa:	428a      	cmp	r2, r1
 80005fc:	d900      	bls.n	8000600 <__aeabi_ddiv+0x214>
 80005fe:	e178      	b.n	80008f2 <__aeabi_ddiv+0x506>
 8000600:	1a88      	subs	r0, r1, r2
 8000602:	9902      	ldr	r1, [sp, #8]
 8000604:	f7ff fe02 	bl	800020c <__aeabi_uidivmod>
 8000608:	9a03      	ldr	r2, [sp, #12]
 800060a:	0424      	lsls	r4, r4, #16
 800060c:	4342      	muls	r2, r0
 800060e:	0409      	lsls	r1, r1, #16
 8000610:	0c24      	lsrs	r4, r4, #16
 8000612:	0003      	movs	r3, r0
 8000614:	430c      	orrs	r4, r1
 8000616:	42a2      	cmp	r2, r4
 8000618:	d900      	bls.n	800061c <__aeabi_ddiv+0x230>
 800061a:	e15d      	b.n	80008d8 <__aeabi_ddiv+0x4ec>
 800061c:	4641      	mov	r1, r8
 800061e:	1aa4      	subs	r4, r4, r2
 8000620:	043a      	lsls	r2, r7, #16
 8000622:	431a      	orrs	r2, r3
 8000624:	9d04      	ldr	r5, [sp, #16]
 8000626:	0413      	lsls	r3, r2, #16
 8000628:	0c1b      	lsrs	r3, r3, #16
 800062a:	4359      	muls	r1, r3
 800062c:	4647      	mov	r7, r8
 800062e:	436b      	muls	r3, r5
 8000630:	469c      	mov	ip, r3
 8000632:	0c10      	lsrs	r0, r2, #16
 8000634:	4347      	muls	r7, r0
 8000636:	0c0b      	lsrs	r3, r1, #16
 8000638:	44bc      	add	ip, r7
 800063a:	4463      	add	r3, ip
 800063c:	4368      	muls	r0, r5
 800063e:	429f      	cmp	r7, r3
 8000640:	d903      	bls.n	800064a <__aeabi_ddiv+0x25e>
 8000642:	2580      	movs	r5, #128	@ 0x80
 8000644:	026d      	lsls	r5, r5, #9
 8000646:	46ac      	mov	ip, r5
 8000648:	4460      	add	r0, ip
 800064a:	0c1f      	lsrs	r7, r3, #16
 800064c:	0409      	lsls	r1, r1, #16
 800064e:	041b      	lsls	r3, r3, #16
 8000650:	0c09      	lsrs	r1, r1, #16
 8000652:	183f      	adds	r7, r7, r0
 8000654:	185b      	adds	r3, r3, r1
 8000656:	42bc      	cmp	r4, r7
 8000658:	d200      	bcs.n	800065c <__aeabi_ddiv+0x270>
 800065a:	e102      	b.n	8000862 <__aeabi_ddiv+0x476>
 800065c:	d100      	bne.n	8000660 <__aeabi_ddiv+0x274>
 800065e:	e0fd      	b.n	800085c <__aeabi_ddiv+0x470>
 8000660:	2301      	movs	r3, #1
 8000662:	431a      	orrs	r2, r3
 8000664:	4b43      	ldr	r3, [pc, #268]	@ (8000774 <__aeabi_ddiv+0x388>)
 8000666:	4453      	add	r3, sl
 8000668:	2b00      	cmp	r3, #0
 800066a:	dc00      	bgt.n	800066e <__aeabi_ddiv+0x282>
 800066c:	e0ae      	b.n	80007cc <__aeabi_ddiv+0x3e0>
 800066e:	0751      	lsls	r1, r2, #29
 8000670:	d000      	beq.n	8000674 <__aeabi_ddiv+0x288>
 8000672:	e198      	b.n	80009a6 <__aeabi_ddiv+0x5ba>
 8000674:	4659      	mov	r1, fp
 8000676:	01c9      	lsls	r1, r1, #7
 8000678:	d506      	bpl.n	8000688 <__aeabi_ddiv+0x29c>
 800067a:	4659      	mov	r1, fp
 800067c:	4b3e      	ldr	r3, [pc, #248]	@ (8000778 <__aeabi_ddiv+0x38c>)
 800067e:	4019      	ands	r1, r3
 8000680:	2380      	movs	r3, #128	@ 0x80
 8000682:	468b      	mov	fp, r1
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	4453      	add	r3, sl
 8000688:	493c      	ldr	r1, [pc, #240]	@ (800077c <__aeabi_ddiv+0x390>)
 800068a:	428b      	cmp	r3, r1
 800068c:	dd00      	ble.n	8000690 <__aeabi_ddiv+0x2a4>
 800068e:	e71a      	b.n	80004c6 <__aeabi_ddiv+0xda>
 8000690:	4659      	mov	r1, fp
 8000692:	08d2      	lsrs	r2, r2, #3
 8000694:	0749      	lsls	r1, r1, #29
 8000696:	4311      	orrs	r1, r2
 8000698:	465a      	mov	r2, fp
 800069a:	055b      	lsls	r3, r3, #21
 800069c:	0254      	lsls	r4, r2, #9
 800069e:	4688      	mov	r8, r1
 80006a0:	0b24      	lsrs	r4, r4, #12
 80006a2:	0d5b      	lsrs	r3, r3, #21
 80006a4:	e702      	b.n	80004ac <__aeabi_ddiv+0xc0>
 80006a6:	465a      	mov	r2, fp
 80006a8:	9b00      	ldr	r3, [sp, #0]
 80006aa:	431a      	orrs	r2, r3
 80006ac:	d100      	bne.n	80006b0 <__aeabi_ddiv+0x2c4>
 80006ae:	e07e      	b.n	80007ae <__aeabi_ddiv+0x3c2>
 80006b0:	465b      	mov	r3, fp
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d100      	bne.n	80006b8 <__aeabi_ddiv+0x2cc>
 80006b6:	e100      	b.n	80008ba <__aeabi_ddiv+0x4ce>
 80006b8:	4658      	mov	r0, fp
 80006ba:	f000 fa63 	bl	8000b84 <__clzsi2>
 80006be:	0002      	movs	r2, r0
 80006c0:	0003      	movs	r3, r0
 80006c2:	3a0b      	subs	r2, #11
 80006c4:	271d      	movs	r7, #29
 80006c6:	9e00      	ldr	r6, [sp, #0]
 80006c8:	1aba      	subs	r2, r7, r2
 80006ca:	0019      	movs	r1, r3
 80006cc:	4658      	mov	r0, fp
 80006ce:	40d6      	lsrs	r6, r2
 80006d0:	3908      	subs	r1, #8
 80006d2:	4088      	lsls	r0, r1
 80006d4:	0032      	movs	r2, r6
 80006d6:	4302      	orrs	r2, r0
 80006d8:	4693      	mov	fp, r2
 80006da:	9a00      	ldr	r2, [sp, #0]
 80006dc:	408a      	lsls	r2, r1
 80006de:	4928      	ldr	r1, [pc, #160]	@ (8000780 <__aeabi_ddiv+0x394>)
 80006e0:	4453      	add	r3, sl
 80006e2:	468a      	mov	sl, r1
 80006e4:	449a      	add	sl, r3
 80006e6:	2300      	movs	r3, #0
 80006e8:	e6c8      	b.n	800047c <__aeabi_ddiv+0x90>
 80006ea:	465b      	mov	r3, fp
 80006ec:	4303      	orrs	r3, r0
 80006ee:	4699      	mov	r9, r3
 80006f0:	d056      	beq.n	80007a0 <__aeabi_ddiv+0x3b4>
 80006f2:	465b      	mov	r3, fp
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d100      	bne.n	80006fa <__aeabi_ddiv+0x30e>
 80006f8:	e0cd      	b.n	8000896 <__aeabi_ddiv+0x4aa>
 80006fa:	4658      	mov	r0, fp
 80006fc:	f000 fa42 	bl	8000b84 <__clzsi2>
 8000700:	230b      	movs	r3, #11
 8000702:	425b      	negs	r3, r3
 8000704:	469c      	mov	ip, r3
 8000706:	0002      	movs	r2, r0
 8000708:	4484      	add	ip, r0
 800070a:	4666      	mov	r6, ip
 800070c:	231d      	movs	r3, #29
 800070e:	1b9b      	subs	r3, r3, r6
 8000710:	0026      	movs	r6, r4
 8000712:	0011      	movs	r1, r2
 8000714:	4658      	mov	r0, fp
 8000716:	40de      	lsrs	r6, r3
 8000718:	3908      	subs	r1, #8
 800071a:	4088      	lsls	r0, r1
 800071c:	0033      	movs	r3, r6
 800071e:	4303      	orrs	r3, r0
 8000720:	4699      	mov	r9, r3
 8000722:	0023      	movs	r3, r4
 8000724:	408b      	lsls	r3, r1
 8000726:	4698      	mov	r8, r3
 8000728:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <__aeabi_ddiv+0x398>)
 800072a:	2400      	movs	r4, #0
 800072c:	1a9b      	subs	r3, r3, r2
 800072e:	469a      	mov	sl, r3
 8000730:	2300      	movs	r3, #0
 8000732:	9303      	str	r3, [sp, #12]
 8000734:	e682      	b.n	800043c <__aeabi_ddiv+0x50>
 8000736:	465a      	mov	r2, fp
 8000738:	4302      	orrs	r2, r0
 800073a:	4691      	mov	r9, r2
 800073c:	d12a      	bne.n	8000794 <__aeabi_ddiv+0x3a8>
 800073e:	2200      	movs	r2, #0
 8000740:	469a      	mov	sl, r3
 8000742:	2302      	movs	r3, #2
 8000744:	4690      	mov	r8, r2
 8000746:	2408      	movs	r4, #8
 8000748:	9303      	str	r3, [sp, #12]
 800074a:	e677      	b.n	800043c <__aeabi_ddiv+0x50>
 800074c:	465a      	mov	r2, fp
 800074e:	9b00      	ldr	r3, [sp, #0]
 8000750:	431a      	orrs	r2, r3
 8000752:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <__aeabi_ddiv+0x39c>)
 8000754:	469c      	mov	ip, r3
 8000756:	44e2      	add	sl, ip
 8000758:	2a00      	cmp	r2, #0
 800075a:	d117      	bne.n	800078c <__aeabi_ddiv+0x3a0>
 800075c:	2302      	movs	r3, #2
 800075e:	431c      	orrs	r4, r3
 8000760:	2300      	movs	r3, #0
 8000762:	469b      	mov	fp, r3
 8000764:	3302      	adds	r3, #2
 8000766:	e689      	b.n	800047c <__aeabi_ddiv+0x90>
 8000768:	000007ff 	.word	0x000007ff
 800076c:	fffffc01 	.word	0xfffffc01
 8000770:	08003b6c 	.word	0x08003b6c
 8000774:	000003ff 	.word	0x000003ff
 8000778:	feffffff 	.word	0xfeffffff
 800077c:	000007fe 	.word	0x000007fe
 8000780:	000003f3 	.word	0x000003f3
 8000784:	fffffc0d 	.word	0xfffffc0d
 8000788:	fffff801 	.word	0xfffff801
 800078c:	2303      	movs	r3, #3
 800078e:	0032      	movs	r2, r6
 8000790:	431c      	orrs	r4, r3
 8000792:	e673      	b.n	800047c <__aeabi_ddiv+0x90>
 8000794:	469a      	mov	sl, r3
 8000796:	2303      	movs	r3, #3
 8000798:	46d9      	mov	r9, fp
 800079a:	240c      	movs	r4, #12
 800079c:	9303      	str	r3, [sp, #12]
 800079e:	e64d      	b.n	800043c <__aeabi_ddiv+0x50>
 80007a0:	2300      	movs	r3, #0
 80007a2:	4698      	mov	r8, r3
 80007a4:	469a      	mov	sl, r3
 80007a6:	3301      	adds	r3, #1
 80007a8:	2404      	movs	r4, #4
 80007aa:	9303      	str	r3, [sp, #12]
 80007ac:	e646      	b.n	800043c <__aeabi_ddiv+0x50>
 80007ae:	2301      	movs	r3, #1
 80007b0:	431c      	orrs	r4, r3
 80007b2:	2300      	movs	r3, #0
 80007b4:	469b      	mov	fp, r3
 80007b6:	3301      	adds	r3, #1
 80007b8:	e660      	b.n	800047c <__aeabi_ddiv+0x90>
 80007ba:	2300      	movs	r3, #0
 80007bc:	2480      	movs	r4, #128	@ 0x80
 80007be:	4698      	mov	r8, r3
 80007c0:	2600      	movs	r6, #0
 80007c2:	4b92      	ldr	r3, [pc, #584]	@ (8000a0c <__aeabi_ddiv+0x620>)
 80007c4:	0324      	lsls	r4, r4, #12
 80007c6:	e671      	b.n	80004ac <__aeabi_ddiv+0xc0>
 80007c8:	2201      	movs	r2, #1
 80007ca:	4252      	negs	r2, r2
 80007cc:	2101      	movs	r1, #1
 80007ce:	1ac9      	subs	r1, r1, r3
 80007d0:	2938      	cmp	r1, #56	@ 0x38
 80007d2:	dd00      	ble.n	80007d6 <__aeabi_ddiv+0x3ea>
 80007d4:	e666      	b.n	80004a4 <__aeabi_ddiv+0xb8>
 80007d6:	291f      	cmp	r1, #31
 80007d8:	dc00      	bgt.n	80007dc <__aeabi_ddiv+0x3f0>
 80007da:	e0ab      	b.n	8000934 <__aeabi_ddiv+0x548>
 80007dc:	201f      	movs	r0, #31
 80007de:	4240      	negs	r0, r0
 80007e0:	1ac3      	subs	r3, r0, r3
 80007e2:	4658      	mov	r0, fp
 80007e4:	40d8      	lsrs	r0, r3
 80007e6:	0003      	movs	r3, r0
 80007e8:	2920      	cmp	r1, #32
 80007ea:	d004      	beq.n	80007f6 <__aeabi_ddiv+0x40a>
 80007ec:	4658      	mov	r0, fp
 80007ee:	4988      	ldr	r1, [pc, #544]	@ (8000a10 <__aeabi_ddiv+0x624>)
 80007f0:	4451      	add	r1, sl
 80007f2:	4088      	lsls	r0, r1
 80007f4:	4302      	orrs	r2, r0
 80007f6:	1e51      	subs	r1, r2, #1
 80007f8:	418a      	sbcs	r2, r1
 80007fa:	431a      	orrs	r2, r3
 80007fc:	2307      	movs	r3, #7
 80007fe:	0019      	movs	r1, r3
 8000800:	2400      	movs	r4, #0
 8000802:	4011      	ands	r1, r2
 8000804:	4213      	tst	r3, r2
 8000806:	d00c      	beq.n	8000822 <__aeabi_ddiv+0x436>
 8000808:	230f      	movs	r3, #15
 800080a:	4013      	ands	r3, r2
 800080c:	2b04      	cmp	r3, #4
 800080e:	d100      	bne.n	8000812 <__aeabi_ddiv+0x426>
 8000810:	e0f9      	b.n	8000a06 <__aeabi_ddiv+0x61a>
 8000812:	1d11      	adds	r1, r2, #4
 8000814:	4291      	cmp	r1, r2
 8000816:	419b      	sbcs	r3, r3
 8000818:	000a      	movs	r2, r1
 800081a:	425b      	negs	r3, r3
 800081c:	0759      	lsls	r1, r3, #29
 800081e:	025b      	lsls	r3, r3, #9
 8000820:	0b1c      	lsrs	r4, r3, #12
 8000822:	08d2      	lsrs	r2, r2, #3
 8000824:	430a      	orrs	r2, r1
 8000826:	4690      	mov	r8, r2
 8000828:	2300      	movs	r3, #0
 800082a:	e63f      	b.n	80004ac <__aeabi_ddiv+0xc0>
 800082c:	2480      	movs	r4, #128	@ 0x80
 800082e:	464b      	mov	r3, r9
 8000830:	0324      	lsls	r4, r4, #12
 8000832:	4223      	tst	r3, r4
 8000834:	d009      	beq.n	800084a <__aeabi_ddiv+0x45e>
 8000836:	465b      	mov	r3, fp
 8000838:	4223      	tst	r3, r4
 800083a:	d106      	bne.n	800084a <__aeabi_ddiv+0x45e>
 800083c:	431c      	orrs	r4, r3
 800083e:	0324      	lsls	r4, r4, #12
 8000840:	002e      	movs	r6, r5
 8000842:	4690      	mov	r8, r2
 8000844:	4b71      	ldr	r3, [pc, #452]	@ (8000a0c <__aeabi_ddiv+0x620>)
 8000846:	0b24      	lsrs	r4, r4, #12
 8000848:	e630      	b.n	80004ac <__aeabi_ddiv+0xc0>
 800084a:	2480      	movs	r4, #128	@ 0x80
 800084c:	464b      	mov	r3, r9
 800084e:	0324      	lsls	r4, r4, #12
 8000850:	431c      	orrs	r4, r3
 8000852:	0324      	lsls	r4, r4, #12
 8000854:	9e02      	ldr	r6, [sp, #8]
 8000856:	4b6d      	ldr	r3, [pc, #436]	@ (8000a0c <__aeabi_ddiv+0x620>)
 8000858:	0b24      	lsrs	r4, r4, #12
 800085a:	e627      	b.n	80004ac <__aeabi_ddiv+0xc0>
 800085c:	2b00      	cmp	r3, #0
 800085e:	d100      	bne.n	8000862 <__aeabi_ddiv+0x476>
 8000860:	e700      	b.n	8000664 <__aeabi_ddiv+0x278>
 8000862:	9800      	ldr	r0, [sp, #0]
 8000864:	1e51      	subs	r1, r2, #1
 8000866:	4684      	mov	ip, r0
 8000868:	4464      	add	r4, ip
 800086a:	4284      	cmp	r4, r0
 800086c:	d200      	bcs.n	8000870 <__aeabi_ddiv+0x484>
 800086e:	e084      	b.n	800097a <__aeabi_ddiv+0x58e>
 8000870:	42bc      	cmp	r4, r7
 8000872:	d200      	bcs.n	8000876 <__aeabi_ddiv+0x48a>
 8000874:	e0ae      	b.n	80009d4 <__aeabi_ddiv+0x5e8>
 8000876:	d100      	bne.n	800087a <__aeabi_ddiv+0x48e>
 8000878:	e0c1      	b.n	80009fe <__aeabi_ddiv+0x612>
 800087a:	000a      	movs	r2, r1
 800087c:	e6f0      	b.n	8000660 <__aeabi_ddiv+0x274>
 800087e:	4542      	cmp	r2, r8
 8000880:	d900      	bls.n	8000884 <__aeabi_ddiv+0x498>
 8000882:	e62c      	b.n	80004de <__aeabi_ddiv+0xf2>
 8000884:	464b      	mov	r3, r9
 8000886:	07dc      	lsls	r4, r3, #31
 8000888:	0858      	lsrs	r0, r3, #1
 800088a:	4643      	mov	r3, r8
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	431c      	orrs	r4, r3
 8000890:	4643      	mov	r3, r8
 8000892:	07df      	lsls	r7, r3, #31
 8000894:	e62a      	b.n	80004ec <__aeabi_ddiv+0x100>
 8000896:	f000 f975 	bl	8000b84 <__clzsi2>
 800089a:	2315      	movs	r3, #21
 800089c:	469c      	mov	ip, r3
 800089e:	4484      	add	ip, r0
 80008a0:	0002      	movs	r2, r0
 80008a2:	4663      	mov	r3, ip
 80008a4:	3220      	adds	r2, #32
 80008a6:	2b1c      	cmp	r3, #28
 80008a8:	dc00      	bgt.n	80008ac <__aeabi_ddiv+0x4c0>
 80008aa:	e72e      	b.n	800070a <__aeabi_ddiv+0x31e>
 80008ac:	0023      	movs	r3, r4
 80008ae:	3808      	subs	r0, #8
 80008b0:	4083      	lsls	r3, r0
 80008b2:	4699      	mov	r9, r3
 80008b4:	2300      	movs	r3, #0
 80008b6:	4698      	mov	r8, r3
 80008b8:	e736      	b.n	8000728 <__aeabi_ddiv+0x33c>
 80008ba:	f000 f963 	bl	8000b84 <__clzsi2>
 80008be:	0002      	movs	r2, r0
 80008c0:	0003      	movs	r3, r0
 80008c2:	3215      	adds	r2, #21
 80008c4:	3320      	adds	r3, #32
 80008c6:	2a1c      	cmp	r2, #28
 80008c8:	dc00      	bgt.n	80008cc <__aeabi_ddiv+0x4e0>
 80008ca:	e6fb      	b.n	80006c4 <__aeabi_ddiv+0x2d8>
 80008cc:	9900      	ldr	r1, [sp, #0]
 80008ce:	3808      	subs	r0, #8
 80008d0:	4081      	lsls	r1, r0
 80008d2:	2200      	movs	r2, #0
 80008d4:	468b      	mov	fp, r1
 80008d6:	e702      	b.n	80006de <__aeabi_ddiv+0x2f2>
 80008d8:	9900      	ldr	r1, [sp, #0]
 80008da:	3b01      	subs	r3, #1
 80008dc:	468c      	mov	ip, r1
 80008de:	4464      	add	r4, ip
 80008e0:	42a1      	cmp	r1, r4
 80008e2:	d900      	bls.n	80008e6 <__aeabi_ddiv+0x4fa>
 80008e4:	e69a      	b.n	800061c <__aeabi_ddiv+0x230>
 80008e6:	42a2      	cmp	r2, r4
 80008e8:	d800      	bhi.n	80008ec <__aeabi_ddiv+0x500>
 80008ea:	e697      	b.n	800061c <__aeabi_ddiv+0x230>
 80008ec:	1e83      	subs	r3, r0, #2
 80008ee:	4464      	add	r4, ip
 80008f0:	e694      	b.n	800061c <__aeabi_ddiv+0x230>
 80008f2:	46ac      	mov	ip, r5
 80008f4:	4461      	add	r1, ip
 80008f6:	3f01      	subs	r7, #1
 80008f8:	428d      	cmp	r5, r1
 80008fa:	d900      	bls.n	80008fe <__aeabi_ddiv+0x512>
 80008fc:	e680      	b.n	8000600 <__aeabi_ddiv+0x214>
 80008fe:	428a      	cmp	r2, r1
 8000900:	d800      	bhi.n	8000904 <__aeabi_ddiv+0x518>
 8000902:	e67d      	b.n	8000600 <__aeabi_ddiv+0x214>
 8000904:	1e87      	subs	r7, r0, #2
 8000906:	4461      	add	r1, ip
 8000908:	e67a      	b.n	8000600 <__aeabi_ddiv+0x214>
 800090a:	4285      	cmp	r5, r0
 800090c:	d000      	beq.n	8000910 <__aeabi_ddiv+0x524>
 800090e:	e65f      	b.n	80005d0 <__aeabi_ddiv+0x1e4>
 8000910:	45b9      	cmp	r9, r7
 8000912:	d900      	bls.n	8000916 <__aeabi_ddiv+0x52a>
 8000914:	e65c      	b.n	80005d0 <__aeabi_ddiv+0x1e4>
 8000916:	e656      	b.n	80005c6 <__aeabi_ddiv+0x1da>
 8000918:	42a2      	cmp	r2, r4
 800091a:	d800      	bhi.n	800091e <__aeabi_ddiv+0x532>
 800091c:	e61a      	b.n	8000554 <__aeabi_ddiv+0x168>
 800091e:	1e83      	subs	r3, r0, #2
 8000920:	4464      	add	r4, ip
 8000922:	e617      	b.n	8000554 <__aeabi_ddiv+0x168>
 8000924:	428a      	cmp	r2, r1
 8000926:	d800      	bhi.n	800092a <__aeabi_ddiv+0x53e>
 8000928:	e600      	b.n	800052c <__aeabi_ddiv+0x140>
 800092a:	46ac      	mov	ip, r5
 800092c:	1e83      	subs	r3, r0, #2
 800092e:	4698      	mov	r8, r3
 8000930:	4461      	add	r1, ip
 8000932:	e5fb      	b.n	800052c <__aeabi_ddiv+0x140>
 8000934:	4837      	ldr	r0, [pc, #220]	@ (8000a14 <__aeabi_ddiv+0x628>)
 8000936:	0014      	movs	r4, r2
 8000938:	4450      	add	r0, sl
 800093a:	4082      	lsls	r2, r0
 800093c:	465b      	mov	r3, fp
 800093e:	0017      	movs	r7, r2
 8000940:	4083      	lsls	r3, r0
 8000942:	40cc      	lsrs	r4, r1
 8000944:	1e7a      	subs	r2, r7, #1
 8000946:	4197      	sbcs	r7, r2
 8000948:	4323      	orrs	r3, r4
 800094a:	433b      	orrs	r3, r7
 800094c:	001a      	movs	r2, r3
 800094e:	465b      	mov	r3, fp
 8000950:	40cb      	lsrs	r3, r1
 8000952:	0751      	lsls	r1, r2, #29
 8000954:	d009      	beq.n	800096a <__aeabi_ddiv+0x57e>
 8000956:	210f      	movs	r1, #15
 8000958:	4011      	ands	r1, r2
 800095a:	2904      	cmp	r1, #4
 800095c:	d005      	beq.n	800096a <__aeabi_ddiv+0x57e>
 800095e:	1d11      	adds	r1, r2, #4
 8000960:	4291      	cmp	r1, r2
 8000962:	4192      	sbcs	r2, r2
 8000964:	4252      	negs	r2, r2
 8000966:	189b      	adds	r3, r3, r2
 8000968:	000a      	movs	r2, r1
 800096a:	0219      	lsls	r1, r3, #8
 800096c:	d400      	bmi.n	8000970 <__aeabi_ddiv+0x584>
 800096e:	e755      	b.n	800081c <__aeabi_ddiv+0x430>
 8000970:	2200      	movs	r2, #0
 8000972:	2301      	movs	r3, #1
 8000974:	2400      	movs	r4, #0
 8000976:	4690      	mov	r8, r2
 8000978:	e598      	b.n	80004ac <__aeabi_ddiv+0xc0>
 800097a:	000a      	movs	r2, r1
 800097c:	42bc      	cmp	r4, r7
 800097e:	d000      	beq.n	8000982 <__aeabi_ddiv+0x596>
 8000980:	e66e      	b.n	8000660 <__aeabi_ddiv+0x274>
 8000982:	454b      	cmp	r3, r9
 8000984:	d000      	beq.n	8000988 <__aeabi_ddiv+0x59c>
 8000986:	e66b      	b.n	8000660 <__aeabi_ddiv+0x274>
 8000988:	e66c      	b.n	8000664 <__aeabi_ddiv+0x278>
 800098a:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <__aeabi_ddiv+0x62c>)
 800098c:	4a23      	ldr	r2, [pc, #140]	@ (8000a1c <__aeabi_ddiv+0x630>)
 800098e:	4453      	add	r3, sl
 8000990:	4592      	cmp	sl, r2
 8000992:	da00      	bge.n	8000996 <__aeabi_ddiv+0x5aa>
 8000994:	e718      	b.n	80007c8 <__aeabi_ddiv+0x3dc>
 8000996:	2101      	movs	r1, #1
 8000998:	4249      	negs	r1, r1
 800099a:	1d0a      	adds	r2, r1, #4
 800099c:	428a      	cmp	r2, r1
 800099e:	4189      	sbcs	r1, r1
 80009a0:	4249      	negs	r1, r1
 80009a2:	448b      	add	fp, r1
 80009a4:	e666      	b.n	8000674 <__aeabi_ddiv+0x288>
 80009a6:	210f      	movs	r1, #15
 80009a8:	4011      	ands	r1, r2
 80009aa:	2904      	cmp	r1, #4
 80009ac:	d100      	bne.n	80009b0 <__aeabi_ddiv+0x5c4>
 80009ae:	e661      	b.n	8000674 <__aeabi_ddiv+0x288>
 80009b0:	0011      	movs	r1, r2
 80009b2:	e7f2      	b.n	800099a <__aeabi_ddiv+0x5ae>
 80009b4:	42bc      	cmp	r4, r7
 80009b6:	d800      	bhi.n	80009ba <__aeabi_ddiv+0x5ce>
 80009b8:	e60a      	b.n	80005d0 <__aeabi_ddiv+0x1e4>
 80009ba:	2302      	movs	r3, #2
 80009bc:	425b      	negs	r3, r3
 80009be:	469c      	mov	ip, r3
 80009c0:	9900      	ldr	r1, [sp, #0]
 80009c2:	444f      	add	r7, r9
 80009c4:	454f      	cmp	r7, r9
 80009c6:	419b      	sbcs	r3, r3
 80009c8:	44e3      	add	fp, ip
 80009ca:	468c      	mov	ip, r1
 80009cc:	425b      	negs	r3, r3
 80009ce:	4463      	add	r3, ip
 80009d0:	18c0      	adds	r0, r0, r3
 80009d2:	e5ff      	b.n	80005d4 <__aeabi_ddiv+0x1e8>
 80009d4:	4649      	mov	r1, r9
 80009d6:	9d00      	ldr	r5, [sp, #0]
 80009d8:	0048      	lsls	r0, r1, #1
 80009da:	4548      	cmp	r0, r9
 80009dc:	4189      	sbcs	r1, r1
 80009de:	46ac      	mov	ip, r5
 80009e0:	4249      	negs	r1, r1
 80009e2:	4461      	add	r1, ip
 80009e4:	4681      	mov	r9, r0
 80009e6:	3a02      	subs	r2, #2
 80009e8:	1864      	adds	r4, r4, r1
 80009ea:	e7c7      	b.n	800097c <__aeabi_ddiv+0x590>
 80009ec:	2480      	movs	r4, #128	@ 0x80
 80009ee:	465b      	mov	r3, fp
 80009f0:	0324      	lsls	r4, r4, #12
 80009f2:	431c      	orrs	r4, r3
 80009f4:	0324      	lsls	r4, r4, #12
 80009f6:	4690      	mov	r8, r2
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <__aeabi_ddiv+0x620>)
 80009fa:	0b24      	lsrs	r4, r4, #12
 80009fc:	e556      	b.n	80004ac <__aeabi_ddiv+0xc0>
 80009fe:	4599      	cmp	r9, r3
 8000a00:	d3e8      	bcc.n	80009d4 <__aeabi_ddiv+0x5e8>
 8000a02:	000a      	movs	r2, r1
 8000a04:	e7bd      	b.n	8000982 <__aeabi_ddiv+0x596>
 8000a06:	2300      	movs	r3, #0
 8000a08:	e708      	b.n	800081c <__aeabi_ddiv+0x430>
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	000007ff 	.word	0x000007ff
 8000a10:	0000043e 	.word	0x0000043e
 8000a14:	0000041e 	.word	0x0000041e
 8000a18:	000003ff 	.word	0x000003ff
 8000a1c:	fffffc02 	.word	0xfffffc02

08000a20 <__aeabi_i2d>:
 8000a20:	b570      	push	{r4, r5, r6, lr}
 8000a22:	2800      	cmp	r0, #0
 8000a24:	d016      	beq.n	8000a54 <__aeabi_i2d+0x34>
 8000a26:	17c3      	asrs	r3, r0, #31
 8000a28:	18c5      	adds	r5, r0, r3
 8000a2a:	405d      	eors	r5, r3
 8000a2c:	0fc4      	lsrs	r4, r0, #31
 8000a2e:	0028      	movs	r0, r5
 8000a30:	f000 f8a8 	bl	8000b84 <__clzsi2>
 8000a34:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <__aeabi_i2d+0x58>)
 8000a36:	1a1b      	subs	r3, r3, r0
 8000a38:	055b      	lsls	r3, r3, #21
 8000a3a:	0d5b      	lsrs	r3, r3, #21
 8000a3c:	280a      	cmp	r0, #10
 8000a3e:	dc14      	bgt.n	8000a6a <__aeabi_i2d+0x4a>
 8000a40:	0002      	movs	r2, r0
 8000a42:	002e      	movs	r6, r5
 8000a44:	3215      	adds	r2, #21
 8000a46:	4096      	lsls	r6, r2
 8000a48:	220b      	movs	r2, #11
 8000a4a:	1a12      	subs	r2, r2, r0
 8000a4c:	40d5      	lsrs	r5, r2
 8000a4e:	032d      	lsls	r5, r5, #12
 8000a50:	0b2d      	lsrs	r5, r5, #12
 8000a52:	e003      	b.n	8000a5c <__aeabi_i2d+0x3c>
 8000a54:	2400      	movs	r4, #0
 8000a56:	2300      	movs	r3, #0
 8000a58:	2500      	movs	r5, #0
 8000a5a:	2600      	movs	r6, #0
 8000a5c:	051b      	lsls	r3, r3, #20
 8000a5e:	432b      	orrs	r3, r5
 8000a60:	07e4      	lsls	r4, r4, #31
 8000a62:	4323      	orrs	r3, r4
 8000a64:	0030      	movs	r0, r6
 8000a66:	0019      	movs	r1, r3
 8000a68:	bd70      	pop	{r4, r5, r6, pc}
 8000a6a:	380b      	subs	r0, #11
 8000a6c:	4085      	lsls	r5, r0
 8000a6e:	032d      	lsls	r5, r5, #12
 8000a70:	2600      	movs	r6, #0
 8000a72:	0b2d      	lsrs	r5, r5, #12
 8000a74:	e7f2      	b.n	8000a5c <__aeabi_i2d+0x3c>
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	0000041e 	.word	0x0000041e

08000a7c <__aeabi_d2f>:
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	004b      	lsls	r3, r1, #1
 8000a80:	030f      	lsls	r7, r1, #12
 8000a82:	0d5b      	lsrs	r3, r3, #21
 8000a84:	4c3b      	ldr	r4, [pc, #236]	@ (8000b74 <__aeabi_d2f+0xf8>)
 8000a86:	0f45      	lsrs	r5, r0, #29
 8000a88:	b083      	sub	sp, #12
 8000a8a:	0a7f      	lsrs	r7, r7, #9
 8000a8c:	1c5e      	adds	r6, r3, #1
 8000a8e:	432f      	orrs	r7, r5
 8000a90:	9000      	str	r0, [sp, #0]
 8000a92:	9101      	str	r1, [sp, #4]
 8000a94:	0fca      	lsrs	r2, r1, #31
 8000a96:	00c5      	lsls	r5, r0, #3
 8000a98:	4226      	tst	r6, r4
 8000a9a:	d00b      	beq.n	8000ab4 <__aeabi_d2f+0x38>
 8000a9c:	4936      	ldr	r1, [pc, #216]	@ (8000b78 <__aeabi_d2f+0xfc>)
 8000a9e:	185c      	adds	r4, r3, r1
 8000aa0:	2cfe      	cmp	r4, #254	@ 0xfe
 8000aa2:	dd13      	ble.n	8000acc <__aeabi_d2f+0x50>
 8000aa4:	20ff      	movs	r0, #255	@ 0xff
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	05c0      	lsls	r0, r0, #23
 8000aaa:	4318      	orrs	r0, r3
 8000aac:	07d2      	lsls	r2, r2, #31
 8000aae:	4310      	orrs	r0, r2
 8000ab0:	b003      	add	sp, #12
 8000ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2f+0x42>
 8000ab8:	2000      	movs	r0, #0
 8000aba:	2300      	movs	r3, #0
 8000abc:	e7f4      	b.n	8000aa8 <__aeabi_d2f+0x2c>
 8000abe:	433d      	orrs	r5, r7
 8000ac0:	d0f0      	beq.n	8000aa4 <__aeabi_d2f+0x28>
 8000ac2:	2380      	movs	r3, #128	@ 0x80
 8000ac4:	03db      	lsls	r3, r3, #15
 8000ac6:	20ff      	movs	r0, #255	@ 0xff
 8000ac8:	433b      	orrs	r3, r7
 8000aca:	e7ed      	b.n	8000aa8 <__aeabi_d2f+0x2c>
 8000acc:	2c00      	cmp	r4, #0
 8000ace:	dd14      	ble.n	8000afa <__aeabi_d2f+0x7e>
 8000ad0:	9b00      	ldr	r3, [sp, #0]
 8000ad2:	00ff      	lsls	r7, r7, #3
 8000ad4:	019b      	lsls	r3, r3, #6
 8000ad6:	1e58      	subs	r0, r3, #1
 8000ad8:	4183      	sbcs	r3, r0
 8000ada:	0f69      	lsrs	r1, r5, #29
 8000adc:	433b      	orrs	r3, r7
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	0759      	lsls	r1, r3, #29
 8000ae2:	d041      	beq.n	8000b68 <__aeabi_d2f+0xec>
 8000ae4:	210f      	movs	r1, #15
 8000ae6:	4019      	ands	r1, r3
 8000ae8:	2904      	cmp	r1, #4
 8000aea:	d028      	beq.n	8000b3e <__aeabi_d2f+0xc2>
 8000aec:	3304      	adds	r3, #4
 8000aee:	0159      	lsls	r1, r3, #5
 8000af0:	d525      	bpl.n	8000b3e <__aeabi_d2f+0xc2>
 8000af2:	3401      	adds	r4, #1
 8000af4:	2300      	movs	r3, #0
 8000af6:	b2e0      	uxtb	r0, r4
 8000af8:	e7d6      	b.n	8000aa8 <__aeabi_d2f+0x2c>
 8000afa:	0021      	movs	r1, r4
 8000afc:	3117      	adds	r1, #23
 8000afe:	dbdb      	blt.n	8000ab8 <__aeabi_d2f+0x3c>
 8000b00:	2180      	movs	r1, #128	@ 0x80
 8000b02:	201e      	movs	r0, #30
 8000b04:	0409      	lsls	r1, r1, #16
 8000b06:	4339      	orrs	r1, r7
 8000b08:	1b00      	subs	r0, r0, r4
 8000b0a:	281f      	cmp	r0, #31
 8000b0c:	dd1b      	ble.n	8000b46 <__aeabi_d2f+0xca>
 8000b0e:	2602      	movs	r6, #2
 8000b10:	4276      	negs	r6, r6
 8000b12:	1b34      	subs	r4, r6, r4
 8000b14:	000e      	movs	r6, r1
 8000b16:	40e6      	lsrs	r6, r4
 8000b18:	0034      	movs	r4, r6
 8000b1a:	2820      	cmp	r0, #32
 8000b1c:	d004      	beq.n	8000b28 <__aeabi_d2f+0xac>
 8000b1e:	4817      	ldr	r0, [pc, #92]	@ (8000b7c <__aeabi_d2f+0x100>)
 8000b20:	4684      	mov	ip, r0
 8000b22:	4463      	add	r3, ip
 8000b24:	4099      	lsls	r1, r3
 8000b26:	430d      	orrs	r5, r1
 8000b28:	002b      	movs	r3, r5
 8000b2a:	1e59      	subs	r1, r3, #1
 8000b2c:	418b      	sbcs	r3, r1
 8000b2e:	4323      	orrs	r3, r4
 8000b30:	0759      	lsls	r1, r3, #29
 8000b32:	d015      	beq.n	8000b60 <__aeabi_d2f+0xe4>
 8000b34:	210f      	movs	r1, #15
 8000b36:	2400      	movs	r4, #0
 8000b38:	4019      	ands	r1, r3
 8000b3a:	2904      	cmp	r1, #4
 8000b3c:	d117      	bne.n	8000b6e <__aeabi_d2f+0xf2>
 8000b3e:	019b      	lsls	r3, r3, #6
 8000b40:	0a5b      	lsrs	r3, r3, #9
 8000b42:	b2e0      	uxtb	r0, r4
 8000b44:	e7b0      	b.n	8000aa8 <__aeabi_d2f+0x2c>
 8000b46:	4c0e      	ldr	r4, [pc, #56]	@ (8000b80 <__aeabi_d2f+0x104>)
 8000b48:	191c      	adds	r4, r3, r4
 8000b4a:	002b      	movs	r3, r5
 8000b4c:	40a5      	lsls	r5, r4
 8000b4e:	40c3      	lsrs	r3, r0
 8000b50:	40a1      	lsls	r1, r4
 8000b52:	1e68      	subs	r0, r5, #1
 8000b54:	4185      	sbcs	r5, r0
 8000b56:	4329      	orrs	r1, r5
 8000b58:	430b      	orrs	r3, r1
 8000b5a:	2400      	movs	r4, #0
 8000b5c:	0759      	lsls	r1, r3, #29
 8000b5e:	d1c1      	bne.n	8000ae4 <__aeabi_d2f+0x68>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	2000      	movs	r0, #0
 8000b64:	0a5b      	lsrs	r3, r3, #9
 8000b66:	e79f      	b.n	8000aa8 <__aeabi_d2f+0x2c>
 8000b68:	08db      	lsrs	r3, r3, #3
 8000b6a:	b2e0      	uxtb	r0, r4
 8000b6c:	e79c      	b.n	8000aa8 <__aeabi_d2f+0x2c>
 8000b6e:	3304      	adds	r3, #4
 8000b70:	e7e5      	b.n	8000b3e <__aeabi_d2f+0xc2>
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	000007fe 	.word	0x000007fe
 8000b78:	fffffc80 	.word	0xfffffc80
 8000b7c:	fffffca2 	.word	0xfffffca2
 8000b80:	fffffc82 	.word	0xfffffc82

08000b84 <__clzsi2>:
 8000b84:	211c      	movs	r1, #28
 8000b86:	2301      	movs	r3, #1
 8000b88:	041b      	lsls	r3, r3, #16
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d301      	bcc.n	8000b92 <__clzsi2+0xe>
 8000b8e:	0c00      	lsrs	r0, r0, #16
 8000b90:	3910      	subs	r1, #16
 8000b92:	0a1b      	lsrs	r3, r3, #8
 8000b94:	4298      	cmp	r0, r3
 8000b96:	d301      	bcc.n	8000b9c <__clzsi2+0x18>
 8000b98:	0a00      	lsrs	r0, r0, #8
 8000b9a:	3908      	subs	r1, #8
 8000b9c:	091b      	lsrs	r3, r3, #4
 8000b9e:	4298      	cmp	r0, r3
 8000ba0:	d301      	bcc.n	8000ba6 <__clzsi2+0x22>
 8000ba2:	0900      	lsrs	r0, r0, #4
 8000ba4:	3904      	subs	r1, #4
 8000ba6:	a202      	add	r2, pc, #8	@ (adr r2, 8000bb0 <__clzsi2+0x2c>)
 8000ba8:	5c10      	ldrb	r0, [r2, r0]
 8000baa:	1840      	adds	r0, r0, r1
 8000bac:	4770      	bx	lr
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	02020304 	.word	0x02020304
 8000bb4:	01010101 	.word	0x01010101
	...

08000bc0 <MPU6050_Init>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C2_Init(void);

void MPU6050_Init(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af04      	add	r7, sp, #16
    uint8_t check, data;

    // MPU6050 ID kontrolü
    HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, 0x75, 1, &check, 1, HAL_MAX_DELAY);
 8000bc6:	4827      	ldr	r0, [pc, #156]	@ (8000c64 <MPU6050_Init+0xa4>)
 8000bc8:	2301      	movs	r3, #1
 8000bca:	425b      	negs	r3, r3
 8000bcc:	9302      	str	r3, [sp, #8]
 8000bce:	2301      	movs	r3, #1
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	2275      	movs	r2, #117	@ 0x75
 8000bda:	21d0      	movs	r1, #208	@ 0xd0
 8000bdc:	f001 f91e 	bl	8001e1c <HAL_I2C_Mem_Read>
    if (check == 0x68) {
 8000be0:	1dfb      	adds	r3, r7, #7
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b68      	cmp	r3, #104	@ 0x68
 8000be6:	d134      	bne.n	8000c52 <MPU6050_Init+0x92>
        printf("MPU6050 Bağlandı!\n");
 8000be8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <MPU6050_Init+0xa8>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f002 fbd2 	bl	8003394 <puts>

        // Güç yönetimini ayarla (0x6B register, 0x00 değeri)
        data = 0x00;
 8000bf0:	1dbb      	adds	r3, r7, #6
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x6B, 1, &data, 1, HAL_MAX_DELAY);
 8000bf6:	481b      	ldr	r0, [pc, #108]	@ (8000c64 <MPU6050_Init+0xa4>)
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	425b      	negs	r3, r3
 8000bfc:	9302      	str	r3, [sp, #8]
 8000bfe:	2301      	movs	r3, #1
 8000c00:	9301      	str	r3, [sp, #4]
 8000c02:	1dbb      	adds	r3, r7, #6
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	2301      	movs	r3, #1
 8000c08:	226b      	movs	r2, #107	@ 0x6b
 8000c0a:	21d0      	movs	r1, #208	@ 0xd0
 8000c0c:	f000 ffd8 	bl	8001bc0 <HAL_I2C_Mem_Write>

        // Jiroskop yapılandırması (±250°/s, 0x1B register, 0x00 değeri)
        data = 0x00;
 8000c10:	1dbb      	adds	r3, r7, #6
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x1B, 1, &data, 1, HAL_MAX_DELAY);
 8000c16:	4813      	ldr	r0, [pc, #76]	@ (8000c64 <MPU6050_Init+0xa4>)
 8000c18:	2301      	movs	r3, #1
 8000c1a:	425b      	negs	r3, r3
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	1dbb      	adds	r3, r7, #6
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2301      	movs	r3, #1
 8000c28:	221b      	movs	r2, #27
 8000c2a:	21d0      	movs	r1, #208	@ 0xd0
 8000c2c:	f000 ffc8 	bl	8001bc0 <HAL_I2C_Mem_Write>

        // İvme ölçer yapılandırması (±2g, 0x1C register, 0x00 değeri)
        data = 0x00;
 8000c30:	1dbb      	adds	r3, r7, #6
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x1C, 1, &data, 1, HAL_MAX_DELAY);
 8000c36:	480b      	ldr	r0, [pc, #44]	@ (8000c64 <MPU6050_Init+0xa4>)
 8000c38:	2301      	movs	r3, #1
 8000c3a:	425b      	negs	r3, r3
 8000c3c:	9302      	str	r3, [sp, #8]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	9301      	str	r3, [sp, #4]
 8000c42:	1dbb      	adds	r3, r7, #6
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2301      	movs	r3, #1
 8000c48:	221c      	movs	r2, #28
 8000c4a:	21d0      	movs	r1, #208	@ 0xd0
 8000c4c:	f000 ffb8 	bl	8001bc0 <HAL_I2C_Mem_Write>
    } else {
        printf("MPU6050 Bulunamadı!\n");
    }
}
 8000c50:	e003      	b.n	8000c5a <MPU6050_Init+0x9a>
        printf("MPU6050 Bulunamadı!\n");
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MPU6050_Init+0xac>)
 8000c54:	0018      	movs	r0, r3
 8000c56:	f002 fb9d 	bl	8003394 <puts>
}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	200000bc 	.word	0x200000bc
 8000c68:	08003b40 	.word	0x08003b40
 8000c6c:	08003b54 	.word	0x08003b54

08000c70 <MPU6050_ReadData>:

void MPU6050_ReadData(int16_t* accel, int16_t* gyro) {
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b08b      	sub	sp, #44	@ 0x2c
 8000c74:	af04      	add	r7, sp, #16
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
    uint8_t buffer[14];

    // 0x3B adresinden 14 bayt veri oku (Accel X, Y, Z + Temp + Gyro X, Y, Z)
    HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, 0x3B, 1, buffer, 14, HAL_MAX_DELAY);
 8000c7a:	482c      	ldr	r0, [pc, #176]	@ (8000d2c <MPU6050_ReadData+0xbc>)
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	425b      	negs	r3, r3
 8000c80:	9302      	str	r3, [sp, #8]
 8000c82:	230e      	movs	r3, #14
 8000c84:	9301      	str	r3, [sp, #4]
 8000c86:	2408      	movs	r4, #8
 8000c88:	193b      	adds	r3, r7, r4
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	223b      	movs	r2, #59	@ 0x3b
 8000c90:	21d0      	movs	r1, #208	@ 0xd0
 8000c92:	f001 f8c3 	bl	8001e1c <HAL_I2C_Mem_Read>

    // İvme ölçer verilerini ayrıştır
    accel[0] = (buffer[0] << 8) | buffer[1]; // X
 8000c96:	0020      	movs	r0, r4
 8000c98:	183b      	adds	r3, r7, r0
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	183b      	adds	r3, r7, r0
 8000ca2:	785b      	ldrb	r3, [r3, #1]
 8000ca4:	b21b      	sxth	r3, r3
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	801a      	strh	r2, [r3, #0]
    accel[1] = (buffer[2] << 8) | buffer[3]; // Y
 8000cae:	183b      	adds	r3, r7, r0
 8000cb0:	789b      	ldrb	r3, [r3, #2]
 8000cb2:	021b      	lsls	r3, r3, #8
 8000cb4:	b219      	sxth	r1, r3
 8000cb6:	183b      	adds	r3, r7, r0
 8000cb8:	78db      	ldrb	r3, [r3, #3]
 8000cba:	b21a      	sxth	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	b212      	sxth	r2, r2
 8000cc4:	801a      	strh	r2, [r3, #0]
    accel[2] = (buffer[4] << 8) | buffer[5]; // Z
 8000cc6:	183b      	adds	r3, r7, r0
 8000cc8:	791b      	ldrb	r3, [r3, #4]
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	b219      	sxth	r1, r3
 8000cce:	183b      	adds	r3, r7, r0
 8000cd0:	795b      	ldrb	r3, [r3, #5]
 8000cd2:	b21a      	sxth	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	b212      	sxth	r2, r2
 8000cdc:	801a      	strh	r2, [r3, #0]

    // Jiroskop verilerini ayrıştır
    gyro[0] = (buffer[8] << 8) | buffer[9];  // X
 8000cde:	183b      	adds	r3, r7, r0
 8000ce0:	7a1b      	ldrb	r3, [r3, #8]
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	183b      	adds	r3, r7, r0
 8000ce8:	7a5b      	ldrb	r3, [r3, #9]
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	b21a      	sxth	r2, r3
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	801a      	strh	r2, [r3, #0]
    gyro[1] = (buffer[10] << 8) | buffer[11];// Y
 8000cf4:	183b      	adds	r3, r7, r0
 8000cf6:	7a9b      	ldrb	r3, [r3, #10]
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	b219      	sxth	r1, r3
 8000cfc:	183b      	adds	r3, r7, r0
 8000cfe:	7adb      	ldrb	r3, [r3, #11]
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	3302      	adds	r3, #2
 8000d06:	430a      	orrs	r2, r1
 8000d08:	b212      	sxth	r2, r2
 8000d0a:	801a      	strh	r2, [r3, #0]
    gyro[2] = (buffer[12] << 8) | buffer[13];// Z
 8000d0c:	183b      	adds	r3, r7, r0
 8000d0e:	7b1b      	ldrb	r3, [r3, #12]
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	b219      	sxth	r1, r3
 8000d14:	183b      	adds	r3, r7, r0
 8000d16:	7b5b      	ldrb	r3, [r3, #13]
 8000d18:	b21a      	sxth	r2, r3
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	b212      	sxth	r2, r2
 8000d22:	801a      	strh	r2, [r3, #0]
}
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b007      	add	sp, #28
 8000d2a:	bd90      	pop	{r4, r7, pc}
 8000d2c:	200000bc 	.word	0x200000bc

08000d30 <MPU6050_Calibrate>:


void MPU6050_Calibrate(void) {
 8000d30:	b5b0      	push	{r4, r5, r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0
    int32_t gyro_sum[3] = {0, 0, 0};
 8000d36:	210c      	movs	r1, #12
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
    int32_t accel_sum[3] = {0, 0, 0};
 8000d4a:	003b      	movs	r3, r7
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	003b      	movs	r3, r7
 8000d52:	2200      	movs	r2, #0
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	003b      	movs	r3, r7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
    uint8_t samples = 100; // Kalibrasyon için alınacak örnek sayısı
 8000d5c:	231b      	movs	r3, #27
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	2264      	movs	r2, #100	@ 0x64
 8000d62:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i < samples; i++) {
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
 8000d68:	e03c      	b.n	8000de4 <MPU6050_Calibrate+0xb4>
        // Sensörden ham verileri oku
        MPU6050_ReadData(accel, gyro);
 8000d6a:	4a48      	ldr	r2, [pc, #288]	@ (8000e8c <MPU6050_Calibrate+0x15c>)
 8000d6c:	4b48      	ldr	r3, [pc, #288]	@ (8000e90 <MPU6050_Calibrate+0x160>)
 8000d6e:	0011      	movs	r1, r2
 8000d70:	0018      	movs	r0, r3
 8000d72:	f7ff ff7d 	bl	8000c70 <MPU6050_ReadData>

        // Örnekleri toplama ekle
        gyro_sum[0] += gyro[0];
 8000d76:	210c      	movs	r1, #12
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a43      	ldr	r2, [pc, #268]	@ (8000e8c <MPU6050_Calibrate+0x15c>)
 8000d7e:	2000      	movs	r0, #0
 8000d80:	5e12      	ldrsh	r2, [r2, r0]
 8000d82:	189a      	adds	r2, r3, r2
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	601a      	str	r2, [r3, #0]
        gyro_sum[1] += gyro[1];
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	4a3f      	ldr	r2, [pc, #252]	@ (8000e8c <MPU6050_Calibrate+0x15c>)
 8000d8e:	2002      	movs	r0, #2
 8000d90:	5e12      	ldrsh	r2, [r2, r0]
 8000d92:	189a      	adds	r2, r3, r2
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	605a      	str	r2, [r3, #4]
        gyro_sum[2] += gyro[2];
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	4a3b      	ldr	r2, [pc, #236]	@ (8000e8c <MPU6050_Calibrate+0x15c>)
 8000d9e:	2004      	movs	r0, #4
 8000da0:	5e12      	ldrsh	r2, [r2, r0]
 8000da2:	189a      	adds	r2, r3, r2
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	609a      	str	r2, [r3, #8]

        accel_sum[0] += accel[0];
 8000da8:	003b      	movs	r3, r7
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a38      	ldr	r2, [pc, #224]	@ (8000e90 <MPU6050_Calibrate+0x160>)
 8000dae:	2100      	movs	r1, #0
 8000db0:	5e52      	ldrsh	r2, [r2, r1]
 8000db2:	189a      	adds	r2, r3, r2
 8000db4:	003b      	movs	r3, r7
 8000db6:	601a      	str	r2, [r3, #0]
        accel_sum[1] += accel[1];
 8000db8:	003b      	movs	r3, r7
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	4a34      	ldr	r2, [pc, #208]	@ (8000e90 <MPU6050_Calibrate+0x160>)
 8000dbe:	2102      	movs	r1, #2
 8000dc0:	5e52      	ldrsh	r2, [r2, r1]
 8000dc2:	189a      	adds	r2, r3, r2
 8000dc4:	003b      	movs	r3, r7
 8000dc6:	605a      	str	r2, [r3, #4]
        accel_sum[2] += accel[2];
 8000dc8:	003b      	movs	r3, r7
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	4a30      	ldr	r2, [pc, #192]	@ (8000e90 <MPU6050_Calibrate+0x160>)
 8000dce:	2104      	movs	r1, #4
 8000dd0:	5e52      	ldrsh	r2, [r2, r1]
 8000dd2:	189a      	adds	r2, r3, r2
 8000dd4:	003b      	movs	r3, r7
 8000dd6:	609a      	str	r2, [r3, #8]

        HAL_Delay(10); // Her ölçüm arasında kısa bir gecikme
 8000dd8:	200a      	movs	r0, #10
 8000dda:	f000 fc0f 	bl	80015fc <HAL_Delay>
    for (int i = 0; i < samples; i++) {
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3301      	adds	r3, #1
 8000de2:	61fb      	str	r3, [r7, #28]
 8000de4:	241b      	movs	r4, #27
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	69fa      	ldr	r2, [r7, #28]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dbbc      	blt.n	8000d6a <MPU6050_Calibrate+0x3a>
    }

    // Ortalama offset değerlerini hesapla
    gyro_offset[0] = gyro_sum[0] / samples;
 8000df0:	250c      	movs	r5, #12
 8000df2:	197b      	adds	r3, r7, r5
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	193b      	adds	r3, r7, r4
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	0010      	movs	r0, r2
 8000dfe:	f7ff fa09 	bl	8000214 <__divsi3>
 8000e02:	0003      	movs	r3, r0
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	4b23      	ldr	r3, [pc, #140]	@ (8000e94 <MPU6050_Calibrate+0x164>)
 8000e08:	801a      	strh	r2, [r3, #0]
    gyro_offset[1] = gyro_sum[1] / samples;
 8000e0a:	197b      	adds	r3, r7, r5
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	193b      	adds	r3, r7, r4
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	0019      	movs	r1, r3
 8000e14:	0010      	movs	r0, r2
 8000e16:	f7ff f9fd 	bl	8000214 <__divsi3>
 8000e1a:	0003      	movs	r3, r0
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <MPU6050_Calibrate+0x164>)
 8000e20:	805a      	strh	r2, [r3, #2]
    gyro_offset[2] = gyro_sum[2] / samples;
 8000e22:	197b      	adds	r3, r7, r5
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	193b      	adds	r3, r7, r4
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	0019      	movs	r1, r3
 8000e2c:	0010      	movs	r0, r2
 8000e2e:	f7ff f9f1 	bl	8000214 <__divsi3>
 8000e32:	0003      	movs	r3, r0
 8000e34:	b21a      	sxth	r2, r3
 8000e36:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <MPU6050_Calibrate+0x164>)
 8000e38:	809a      	strh	r2, [r3, #4]

    accel_offset[0] = accel_sum[0] / samples;
 8000e3a:	003b      	movs	r3, r7
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	193b      	adds	r3, r7, r4
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	0019      	movs	r1, r3
 8000e44:	0010      	movs	r0, r2
 8000e46:	f7ff f9e5 	bl	8000214 <__divsi3>
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <MPU6050_Calibrate+0x168>)
 8000e50:	801a      	strh	r2, [r3, #0]
    accel_offset[1] = accel_sum[1] / samples;
 8000e52:	003b      	movs	r3, r7
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	193b      	adds	r3, r7, r4
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	0010      	movs	r0, r2
 8000e5e:	f7ff f9d9 	bl	8000214 <__divsi3>
 8000e62:	0003      	movs	r3, r0
 8000e64:	b21a      	sxth	r2, r3
 8000e66:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <MPU6050_Calibrate+0x168>)
 8000e68:	805a      	strh	r2, [r3, #2]
    accel_offset[2] = accel_sum[2] / samples;
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	0019      	movs	r1, r3
 8000e74:	0010      	movs	r0, r2
 8000e76:	f7ff f9cd 	bl	8000214 <__divsi3>
 8000e7a:	0003      	movs	r3, r0
 8000e7c:	b21a      	sxth	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <MPU6050_Calibrate+0x168>)
 8000e80:	809a      	strh	r2, [r3, #4]
}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b008      	add	sp, #32
 8000e88:	bdb0      	pop	{r4, r5, r7, pc}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	2000009c 	.word	0x2000009c
 8000e90:	20000094 	.word	0x20000094
 8000e94:	20000084 	.word	0x20000084
 8000e98:	2000008c 	.word	0x2000008c

08000e9c <MPU6050_ApplyOffsets>:


void MPU6050_ApplyOffsets(void) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
    // Offsetleri ham verilere uygula
    gyro[0] -= gyro_offset[0];
 8000ea0:	4b28      	ldr	r3, [pc, #160]	@ (8000f44 <MPU6050_ApplyOffsets+0xa8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	5e9b      	ldrsh	r3, [r3, r2]
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	4b27      	ldr	r3, [pc, #156]	@ (8000f48 <MPU6050_ApplyOffsets+0xac>)
 8000eaa:	2100      	movs	r1, #0
 8000eac:	5e5b      	ldrsh	r3, [r3, r1]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	4b23      	ldr	r3, [pc, #140]	@ (8000f44 <MPU6050_ApplyOffsets+0xa8>)
 8000eb8:	801a      	strh	r2, [r3, #0]
    gyro[1] -= gyro_offset[1];
 8000eba:	4b22      	ldr	r3, [pc, #136]	@ (8000f44 <MPU6050_ApplyOffsets+0xa8>)
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	5e9b      	ldrsh	r3, [r3, r2]
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <MPU6050_ApplyOffsets+0xac>)
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	5e5b      	ldrsh	r3, [r3, r1]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f44 <MPU6050_ApplyOffsets+0xa8>)
 8000ed2:	805a      	strh	r2, [r3, #2]
    gyro[2] -= gyro_offset[2];
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <MPU6050_ApplyOffsets+0xa8>)
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	5e9b      	ldrsh	r3, [r3, r2]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <MPU6050_ApplyOffsets+0xac>)
 8000ede:	2104      	movs	r1, #4
 8000ee0:	5e5b      	ldrsh	r3, [r3, r1]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b21a      	sxth	r2, r3
 8000eea:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <MPU6050_ApplyOffsets+0xa8>)
 8000eec:	809a      	strh	r2, [r3, #4]

    accel[0] -= accel_offset[0];
 8000eee:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <MPU6050_ApplyOffsets+0xb0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	5e9b      	ldrsh	r3, [r3, r2]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <MPU6050_ApplyOffsets+0xb4>)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	5e5b      	ldrsh	r3, [r3, r1]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	b21a      	sxth	r2, r3
 8000f04:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <MPU6050_ApplyOffsets+0xb0>)
 8000f06:	801a      	strh	r2, [r3, #0]
    accel[1] -= accel_offset[1];
 8000f08:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <MPU6050_ApplyOffsets+0xb0>)
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	5e9b      	ldrsh	r3, [r3, r2]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <MPU6050_ApplyOffsets+0xb4>)
 8000f12:	2102      	movs	r1, #2
 8000f14:	5e5b      	ldrsh	r3, [r3, r1]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <MPU6050_ApplyOffsets+0xb0>)
 8000f20:	805a      	strh	r2, [r3, #2]
    accel[2] -= accel_offset[2];
 8000f22:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <MPU6050_ApplyOffsets+0xb0>)
 8000f24:	2204      	movs	r2, #4
 8000f26:	5e9b      	ldrsh	r3, [r3, r2]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <MPU6050_ApplyOffsets+0xb4>)
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	5e5b      	ldrsh	r3, [r3, r1]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <MPU6050_ApplyOffsets+0xb0>)
 8000f3a:	809a      	strh	r2, [r3, #4]
}
 8000f3c:	46c0      	nop			@ (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	2000009c 	.word	0x2000009c
 8000f48:	20000084 	.word	0x20000084
 8000f4c:	20000094 	.word	0x20000094
 8000f50:	2000008c 	.word	0x2000008c

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0

	HAL_Init();
 8000f5a:	f000 fac9 	bl	80014f0 <HAL_Init>
	    SystemClock_Config();
 8000f5e:	f000 f899 	bl	8001094 <SystemClock_Config>
	    MX_GPIO_Init();
 8000f62:	f000 f931 	bl	80011c8 <MX_GPIO_Init>
	    MX_I2C2_Init();
 8000f66:	f000 f8ef 	bl	8001148 <MX_I2C2_Init>

	    int16_t accel[3], gyro[3];

	    // MPU6050 başlat
	    MPU6050_Init();
 8000f6a:	f7ff fe29 	bl	8000bc0 <MPU6050_Init>
	    MPU6050_Calibrate();
 8000f6e:	f7ff fedf 	bl	8000d30 <MPU6050_Calibrate>
  while (1)
  {
    /* USER CODE END WHILE */
	  // Verileri oku
	  MPU6050_ReadData(accel, gyro);
 8000f72:	003a      	movs	r2, r7
 8000f74:	2408      	movs	r4, #8
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	0011      	movs	r1, r2
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f7ff fe78 	bl	8000c70 <MPU6050_ReadData>

	         // Offsetleri uygula
	         MPU6050_ApplyOffsets();
 8000f80:	f7ff ff8c 	bl	8000e9c <MPU6050_ApplyOffsets>
	          gyro_x_dps = gyro[0] / 131.0;
 8000f84:	003b      	movs	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	5e9b      	ldrsh	r3, [r3, r2]
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f7ff fd48 	bl	8000a20 <__aeabi_i2d>
 8000f90:	2200      	movs	r2, #0
 8000f92:	4b38      	ldr	r3, [pc, #224]	@ (8001074 <main+0x120>)
 8000f94:	f7ff fa2a 	bl	80003ec <__aeabi_ddiv>
 8000f98:	0002      	movs	r2, r0
 8000f9a:	000b      	movs	r3, r1
 8000f9c:	0010      	movs	r0, r2
 8000f9e:	0019      	movs	r1, r3
 8000fa0:	f7ff fd6c 	bl	8000a7c <__aeabi_d2f>
 8000fa4:	1c02      	adds	r2, r0, #0
 8000fa6:	4b34      	ldr	r3, [pc, #208]	@ (8001078 <main+0x124>)
 8000fa8:	601a      	str	r2, [r3, #0]
	                   gyro_y_dps = gyro[1] / 131.0;
 8000faa:	003b      	movs	r3, r7
 8000fac:	2202      	movs	r2, #2
 8000fae:	5e9b      	ldrsh	r3, [r3, r2]
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f7ff fd35 	bl	8000a20 <__aeabi_i2d>
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001074 <main+0x120>)
 8000fba:	f7ff fa17 	bl	80003ec <__aeabi_ddiv>
 8000fbe:	0002      	movs	r2, r0
 8000fc0:	000b      	movs	r3, r1
 8000fc2:	0010      	movs	r0, r2
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	f7ff fd59 	bl	8000a7c <__aeabi_d2f>
 8000fca:	1c02      	adds	r2, r0, #0
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800107c <main+0x128>)
 8000fce:	601a      	str	r2, [r3, #0]
	                   gyro_z_dps = gyro[2] / 131.0;
 8000fd0:	003b      	movs	r3, r7
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	5e9b      	ldrsh	r3, [r3, r2]
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f7ff fd22 	bl	8000a20 <__aeabi_i2d>
 8000fdc:	2200      	movs	r2, #0
 8000fde:	4b25      	ldr	r3, [pc, #148]	@ (8001074 <main+0x120>)
 8000fe0:	f7ff fa04 	bl	80003ec <__aeabi_ddiv>
 8000fe4:	0002      	movs	r2, r0
 8000fe6:	000b      	movs	r3, r1
 8000fe8:	0010      	movs	r0, r2
 8000fea:	0019      	movs	r1, r3
 8000fec:	f7ff fd46 	bl	8000a7c <__aeabi_d2f>
 8000ff0:	1c02      	adds	r2, r0, #0
 8000ff2:	4b23      	ldr	r3, [pc, #140]	@ (8001080 <main+0x12c>)
 8000ff4:	601a      	str	r2, [r3, #0]

	                  accel_x_g = accel[0] / 16384.0;
 8000ff6:	193b      	adds	r3, r7, r4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	5e9b      	ldrsh	r3, [r3, r2]
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff fd0f 	bl	8000a20 <__aeabi_i2d>
 8001002:	2200      	movs	r2, #0
 8001004:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <main+0x130>)
 8001006:	f7ff f9f1 	bl	80003ec <__aeabi_ddiv>
 800100a:	0002      	movs	r2, r0
 800100c:	000b      	movs	r3, r1
 800100e:	0010      	movs	r0, r2
 8001010:	0019      	movs	r1, r3
 8001012:	f7ff fd33 	bl	8000a7c <__aeabi_d2f>
 8001016:	1c02      	adds	r2, r0, #0
 8001018:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <main+0x134>)
 800101a:	601a      	str	r2, [r3, #0]
	                  accel_y_g = accel[1] / 16384.0;
 800101c:	193b      	adds	r3, r7, r4
 800101e:	2202      	movs	r2, #2
 8001020:	5e9b      	ldrsh	r3, [r3, r2]
 8001022:	0018      	movs	r0, r3
 8001024:	f7ff fcfc 	bl	8000a20 <__aeabi_i2d>
 8001028:	2200      	movs	r2, #0
 800102a:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <main+0x130>)
 800102c:	f7ff f9de 	bl	80003ec <__aeabi_ddiv>
 8001030:	0002      	movs	r2, r0
 8001032:	000b      	movs	r3, r1
 8001034:	0010      	movs	r0, r2
 8001036:	0019      	movs	r1, r3
 8001038:	f7ff fd20 	bl	8000a7c <__aeabi_d2f>
 800103c:	1c02      	adds	r2, r0, #0
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <main+0x138>)
 8001040:	601a      	str	r2, [r3, #0]
	                  accel_z_g = accel[2] / 16384.0;
 8001042:	193b      	adds	r3, r7, r4
 8001044:	2204      	movs	r2, #4
 8001046:	5e9b      	ldrsh	r3, [r3, r2]
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff fce9 	bl	8000a20 <__aeabi_i2d>
 800104e:	2200      	movs	r2, #0
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <main+0x130>)
 8001052:	f7ff f9cb 	bl	80003ec <__aeabi_ddiv>
 8001056:	0002      	movs	r2, r0
 8001058:	000b      	movs	r3, r1
 800105a:	0010      	movs	r0, r2
 800105c:	0019      	movs	r1, r3
 800105e:	f7ff fd0d 	bl	8000a7c <__aeabi_d2f>
 8001062:	1c02      	adds	r2, r0, #0
 8001064:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <main+0x13c>)
 8001066:	601a      	str	r2, [r3, #0]

	          HAL_Delay(100); // 0.1 saniyede bir veri oku
 8001068:	2064      	movs	r0, #100	@ 0x64
 800106a:	f000 fac7 	bl	80015fc <HAL_Delay>
	  MPU6050_ReadData(accel, gyro);
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	e77f      	b.n	8000f72 <main+0x1e>
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	40606000 	.word	0x40606000
 8001078:	200000a4 	.word	0x200000a4
 800107c:	200000a8 	.word	0x200000a8
 8001080:	200000ac 	.word	0x200000ac
 8001084:	40d00000 	.word	0x40d00000
 8001088:	200000b0 	.word	0x200000b0
 800108c:	200000b4 	.word	0x200000b4
 8001090:	200000b8 	.word	0x200000b8

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b093      	sub	sp, #76	@ 0x4c
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	2414      	movs	r4, #20
 800109c:	193b      	adds	r3, r7, r4
 800109e:	0018      	movs	r0, r3
 80010a0:	2334      	movs	r3, #52	@ 0x34
 80010a2:	001a      	movs	r2, r3
 80010a4:	2100      	movs	r1, #0
 80010a6:	f002 fa6b 	bl	8003580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	0018      	movs	r0, r3
 80010ae:	2310      	movs	r3, #16
 80010b0:	001a      	movs	r2, r3
 80010b2:	2100      	movs	r1, #0
 80010b4:	f002 fa64 	bl	8003580 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b8:	2380      	movs	r3, #128	@ 0x80
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	0018      	movs	r0, r3
 80010be:	f001 fb75 	bl	80027ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c2:	193b      	adds	r3, r7, r4
 80010c4:	2202      	movs	r2, #2
 80010c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	2280      	movs	r2, #128	@ 0x80
 80010cc:	0052      	lsls	r2, r2, #1
 80010ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80010d0:	0021      	movs	r1, r4
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2240      	movs	r2, #64	@ 0x40
 80010dc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2202      	movs	r2, #2
 80010e2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2202      	movs	r2, #2
 80010e8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	2208      	movs	r2, #8
 80010f4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2280      	movs	r2, #128	@ 0x80
 80010fa:	0292      	lsls	r2, r2, #10
 80010fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	2280      	movs	r2, #128	@ 0x80
 8001102:	0592      	lsls	r2, r2, #22
 8001104:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001106:	187b      	adds	r3, r7, r1
 8001108:	0018      	movs	r0, r3
 800110a:	f001 fb8f 	bl	800282c <HAL_RCC_OscConfig>
 800110e:	1e03      	subs	r3, r0, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001112:	f000 f893 	bl	800123c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2202      	movs	r2, #2
 8001120:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2102      	movs	r1, #2
 8001132:	0018      	movs	r0, r3
 8001134:	f001 fe8a 	bl	8002e4c <HAL_RCC_ClockConfig>
 8001138:	1e03      	subs	r3, r0, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800113c:	f000 f87e 	bl	800123c <Error_Handler>
  }
}
 8001140:	46c0      	nop			@ (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b013      	add	sp, #76	@ 0x4c
 8001146:	bd90      	pop	{r4, r7, pc}

08001148 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800114c:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <MX_I2C2_Init+0x74>)
 800114e:	4a1c      	ldr	r2, [pc, #112]	@ (80011c0 <MX_I2C2_Init+0x78>)
 8001150:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10B17DB5;
 8001152:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001154:	4a1b      	ldr	r2, [pc, #108]	@ (80011c4 <MX_I2C2_Init+0x7c>)
 8001156:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001158:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <MX_I2C2_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800115e:	4b17      	ldr	r3, [pc, #92]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001160:	2201      	movs	r2, #1
 8001162:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001164:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800116a:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <MX_I2C2_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117c:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <MX_I2C2_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001184:	0018      	movs	r0, r3
 8001186:	f000 fc75 	bl	8001a74 <HAL_I2C_Init>
 800118a:	1e03      	subs	r3, r0, #0
 800118c:	d001      	beq.n	8001192 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800118e:	f000 f855 	bl	800123c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <MX_I2C2_Init+0x74>)
 8001194:	2100      	movs	r1, #0
 8001196:	0018      	movs	r0, r3
 8001198:	f001 fa70 	bl	800267c <HAL_I2CEx_ConfigAnalogFilter>
 800119c:	1e03      	subs	r3, r0, #0
 800119e:	d001      	beq.n	80011a4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80011a0:	f000 f84c 	bl	800123c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <MX_I2C2_Init+0x74>)
 80011a6:	2100      	movs	r1, #0
 80011a8:	0018      	movs	r0, r3
 80011aa:	f001 fab3 	bl	8002714 <HAL_I2CEx_ConfigDigitalFilter>
 80011ae:	1e03      	subs	r3, r0, #0
 80011b0:	d001      	beq.n	80011b6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011b2:	f000 f843 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011b6:	46c0      	nop			@ (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200000bc 	.word	0x200000bc
 80011c0:	40005800 	.word	0x40005800
 80011c4:	10b17db5 	.word	0x10b17db5

080011c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <MX_GPIO_Init+0x70>)
 80011d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011d2:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <MX_GPIO_Init+0x70>)
 80011d4:	2104      	movs	r1, #4
 80011d6:	430a      	orrs	r2, r1
 80011d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80011da:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <MX_GPIO_Init+0x70>)
 80011dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011de:	2204      	movs	r2, #4
 80011e0:	4013      	ands	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e6:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <MX_GPIO_Init+0x70>)
 80011e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011ea:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <MX_GPIO_Init+0x70>)
 80011ec:	2120      	movs	r1, #32
 80011ee:	430a      	orrs	r2, r1
 80011f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <MX_GPIO_Init+0x70>)
 80011f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011f6:	2220      	movs	r2, #32
 80011f8:	4013      	ands	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <MX_GPIO_Init+0x70>)
 8001200:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001202:	4b0d      	ldr	r3, [pc, #52]	@ (8001238 <MX_GPIO_Init+0x70>)
 8001204:	2102      	movs	r1, #2
 8001206:	430a      	orrs	r2, r1
 8001208:	635a      	str	r2, [r3, #52]	@ 0x34
 800120a:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <MX_GPIO_Init+0x70>)
 800120c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800120e:	2202      	movs	r2, #2
 8001210:	4013      	ands	r3, r2
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <MX_GPIO_Init+0x70>)
 8001218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800121a:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <MX_GPIO_Init+0x70>)
 800121c:	2101      	movs	r1, #1
 800121e:	430a      	orrs	r2, r1
 8001220:	635a      	str	r2, [r3, #52]	@ 0x34
 8001222:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <MX_GPIO_Init+0x70>)
 8001224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001226:	2201      	movs	r2, #1
 8001228:	4013      	ands	r3, r2
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b004      	add	sp, #16
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	40021000 	.word	0x40021000

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001244:	46c0      	nop			@ (mov r8, r8)
 8001246:	e7fd      	b.n	8001244 <Error_Handler+0x8>

08001248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <HAL_MspInit+0x44>)
 8001250:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <HAL_MspInit+0x44>)
 8001254:	2101      	movs	r1, #1
 8001256:	430a      	orrs	r2, r1
 8001258:	641a      	str	r2, [r3, #64]	@ 0x40
 800125a:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <HAL_MspInit+0x44>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	2201      	movs	r2, #1
 8001260:	4013      	ands	r3, r2
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	4b09      	ldr	r3, [pc, #36]	@ (800128c <HAL_MspInit+0x44>)
 8001268:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <HAL_MspInit+0x44>)
 800126c:	2180      	movs	r1, #128	@ 0x80
 800126e:	0549      	lsls	r1, r1, #21
 8001270:	430a      	orrs	r2, r1
 8001272:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001274:	4b05      	ldr	r3, [pc, #20]	@ (800128c <HAL_MspInit+0x44>)
 8001276:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001278:	2380      	movs	r3, #128	@ 0x80
 800127a:	055b      	lsls	r3, r3, #21
 800127c:	4013      	ands	r3, r2
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001282:	46c0      	nop			@ (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	b002      	add	sp, #8
 8001288:	bd80      	pop	{r7, pc}
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	40021000 	.word	0x40021000

08001290 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b08b      	sub	sp, #44	@ 0x2c
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	2414      	movs	r4, #20
 800129a:	193b      	adds	r3, r7, r4
 800129c:	0018      	movs	r0, r3
 800129e:	2314      	movs	r3, #20
 80012a0:	001a      	movs	r2, r3
 80012a2:	2100      	movs	r1, #0
 80012a4:	f002 f96c 	bl	8003580 <memset>
  if(hi2c->Instance==I2C2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a1b      	ldr	r2, [pc, #108]	@ (800131c <HAL_I2C_MspInit+0x8c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d130      	bne.n	8001314 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <HAL_I2C_MspInit+0x90>)
 80012b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <HAL_I2C_MspInit+0x90>)
 80012b8:	2102      	movs	r1, #2
 80012ba:	430a      	orrs	r2, r1
 80012bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80012be:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <HAL_I2C_MspInit+0x90>)
 80012c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012c2:	2202      	movs	r2, #2
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012ca:	193b      	adds	r3, r7, r4
 80012cc:	22c0      	movs	r2, #192	@ 0xc0
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d2:	0021      	movs	r1, r4
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	2212      	movs	r2, #18
 80012d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	2201      	movs	r2, #1
 80012de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	2206      	movs	r2, #6
 80012ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001324 <HAL_I2C_MspInit+0x94>)
 80012f0:	0019      	movs	r1, r3
 80012f2:	0010      	movs	r0, r2
 80012f4:	f000 fa5a 	bl	80017ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <HAL_I2C_MspInit+0x90>)
 80012fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012fc:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <HAL_I2C_MspInit+0x90>)
 80012fe:	2180      	movs	r1, #128	@ 0x80
 8001300:	03c9      	lsls	r1, r1, #15
 8001302:	430a      	orrs	r2, r1
 8001304:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_I2C_MspInit+0x90>)
 8001308:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800130a:	2380      	movs	r3, #128	@ 0x80
 800130c:	03db      	lsls	r3, r3, #15
 800130e:	4013      	ands	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001314:	46c0      	nop			@ (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	b00b      	add	sp, #44	@ 0x2c
 800131a:	bd90      	pop	{r4, r7, pc}
 800131c:	40005800 	.word	0x40005800
 8001320:	40021000 	.word	0x40021000
 8001324:	50000400 	.word	0x50000400

08001328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800132c:	46c0      	nop			@ (mov r8, r8)
 800132e:	e7fd      	b.n	800132c <NMI_Handler+0x4>

08001330 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001334:	46c0      	nop			@ (mov r8, r8)
 8001336:	e7fd      	b.n	8001334 <HardFault_Handler+0x4>

08001338 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800133c:	46c0      	nop			@ (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001350:	f000 f938 	bl	80015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001354:	46c0      	nop			@ (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e00a      	b.n	8001382 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800136c:	e000      	b.n	8001370 <_read+0x16>
 800136e:	bf00      	nop
 8001370:	0001      	movs	r1, r0
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	60ba      	str	r2, [r7, #8]
 8001378:	b2ca      	uxtb	r2, r1
 800137a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	3301      	adds	r3, #1
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	429a      	cmp	r2, r3
 8001388:	dbf0      	blt.n	800136c <_read+0x12>
  }

  return len;
 800138a:	687b      	ldr	r3, [r7, #4]
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	b006      	add	sp, #24
 8001392:	bd80      	pop	{r7, pc}

08001394 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	e009      	b.n	80013ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	60ba      	str	r2, [r7, #8]
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	0018      	movs	r0, r3
 80013b0:	e000      	b.n	80013b4 <_write+0x20>
 80013b2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3301      	adds	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	429a      	cmp	r2, r3
 80013c0:	dbf1      	blt.n	80013a6 <_write+0x12>
  }
  return len;
 80013c2:	687b      	ldr	r3, [r7, #4]
}
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b006      	add	sp, #24
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_close>:

int _close(int file)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	425b      	negs	r3, r3
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	b002      	add	sp, #8
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	2280      	movs	r2, #128	@ 0x80
 80013ee:	0192      	lsls	r2, r2, #6
 80013f0:	605a      	str	r2, [r3, #4]
  return 0;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	0018      	movs	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b002      	add	sp, #8
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_isatty>:

int _isatty(int file)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001404:	2301      	movs	r3, #1
}
 8001406:	0018      	movs	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	b002      	add	sp, #8
 800140c:	bd80      	pop	{r7, pc}

0800140e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800141a:	2300      	movs	r3, #0
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b004      	add	sp, #16
 8001422:	bd80      	pop	{r7, pc}

08001424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800142c:	4a14      	ldr	r2, [pc, #80]	@ (8001480 <_sbrk+0x5c>)
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <_sbrk+0x60>)
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001438:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <_sbrk+0x64>)
 8001442:	4a12      	ldr	r2, [pc, #72]	@ (800148c <_sbrk+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001446:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	18d3      	adds	r3, r2, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	d207      	bcs.n	8001464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001454:	f002 f8ea 	bl	800362c <__errno>
 8001458:	0003      	movs	r3, r0
 800145a:	220c      	movs	r2, #12
 800145c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145e:	2301      	movs	r3, #1
 8001460:	425b      	negs	r3, r3
 8001462:	e009      	b.n	8001478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001464:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146a:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	18d2      	adds	r2, r2, r3
 8001472:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <_sbrk+0x64>)
 8001474:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	0018      	movs	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	b006      	add	sp, #24
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20002000 	.word	0x20002000
 8001484:	00000400 	.word	0x00000400
 8001488:	20000110 	.word	0x20000110
 800148c:	20000268 	.word	0x20000268

08001490 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001494:	46c0      	nop			@ (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800149c:	480d      	ldr	r0, [pc, #52]	@ (80014d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800149e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014a0:	f7ff fff6 	bl	8001490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a4:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80014a6:	490d      	ldr	r1, [pc, #52]	@ (80014dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80014a8:	4a0d      	ldr	r2, [pc, #52]	@ (80014e0 <LoopForever+0xe>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014bc:	4c0a      	ldr	r4, [pc, #40]	@ (80014e8 <LoopForever+0x16>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014ca:	f002 f8b5 	bl	8003638 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80014ce:	f7ff fd41 	bl	8000f54 <main>

080014d2 <LoopForever>:

LoopForever:
  b LoopForever
 80014d2:	e7fe      	b.n	80014d2 <LoopForever>
  ldr   r0, =_estack
 80014d4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014dc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80014e0:	08003bf4 	.word	0x08003bf4
  ldr r2, =_sbss
 80014e4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80014e8:	20000264 	.word	0x20000264

080014ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <ADC1_IRQHandler>
	...

080014f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014f6:	1dfb      	adds	r3, r7, #7
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fc:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <HAL_Init+0x3c>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <HAL_Init+0x3c>)
 8001502:	2180      	movs	r1, #128	@ 0x80
 8001504:	0049      	lsls	r1, r1, #1
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800150a:	2003      	movs	r0, #3
 800150c:	f000 f810 	bl	8001530 <HAL_InitTick>
 8001510:	1e03      	subs	r3, r0, #0
 8001512:	d003      	beq.n	800151c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001514:	1dfb      	adds	r3, r7, #7
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	e001      	b.n	8001520 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800151c:	f7ff fe94 	bl	8001248 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001520:	1dfb      	adds	r3, r7, #7
 8001522:	781b      	ldrb	r3, [r3, #0]
}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	b002      	add	sp, #8
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40022000 	.word	0x40022000

08001530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001538:	230f      	movs	r3, #15
 800153a:	18fb      	adds	r3, r7, r3
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001540:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <HAL_InitTick+0x88>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d02b      	beq.n	80015a0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001548:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <HAL_InitTick+0x8c>)
 800154a:	681c      	ldr	r4, [r3, #0]
 800154c:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <HAL_InitTick+0x88>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	0019      	movs	r1, r3
 8001552:	23fa      	movs	r3, #250	@ 0xfa
 8001554:	0098      	lsls	r0, r3, #2
 8001556:	f7fe fdd3 	bl	8000100 <__udivsi3>
 800155a:	0003      	movs	r3, r0
 800155c:	0019      	movs	r1, r3
 800155e:	0020      	movs	r0, r4
 8001560:	f7fe fdce 	bl	8000100 <__udivsi3>
 8001564:	0003      	movs	r3, r0
 8001566:	0018      	movs	r0, r3
 8001568:	f000 f913 	bl	8001792 <HAL_SYSTICK_Config>
 800156c:	1e03      	subs	r3, r0, #0
 800156e:	d112      	bne.n	8001596 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b03      	cmp	r3, #3
 8001574:	d80a      	bhi.n	800158c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	2301      	movs	r3, #1
 800157a:	425b      	negs	r3, r3
 800157c:	2200      	movs	r2, #0
 800157e:	0018      	movs	r0, r3
 8001580:	f000 f8f2 	bl	8001768 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001584:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <HAL_InitTick+0x90>)
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	e00d      	b.n	80015a8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800158c:	230f      	movs	r3, #15
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	2201      	movs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]
 8001594:	e008      	b.n	80015a8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001596:	230f      	movs	r3, #15
 8001598:	18fb      	adds	r3, r7, r3
 800159a:	2201      	movs	r2, #1
 800159c:	701a      	strb	r2, [r3, #0]
 800159e:	e003      	b.n	80015a8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015a0:	230f      	movs	r3, #15
 80015a2:	18fb      	adds	r3, r7, r3
 80015a4:	2201      	movs	r2, #1
 80015a6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80015a8:	230f      	movs	r3, #15
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	781b      	ldrb	r3, [r3, #0]
}
 80015ae:	0018      	movs	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b005      	add	sp, #20
 80015b4:	bd90      	pop	{r4, r7, pc}
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000004 	.word	0x20000004

080015c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015c8:	4b05      	ldr	r3, [pc, #20]	@ (80015e0 <HAL_IncTick+0x1c>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	001a      	movs	r2, r3
 80015ce:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <HAL_IncTick+0x20>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	18d2      	adds	r2, r2, r3
 80015d4:	4b03      	ldr	r3, [pc, #12]	@ (80015e4 <HAL_IncTick+0x20>)
 80015d6:	601a      	str	r2, [r3, #0]
}
 80015d8:	46c0      	nop			@ (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			@ (mov r8, r8)
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20000114 	.word	0x20000114

080015e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  return uwTick;
 80015ec:	4b02      	ldr	r3, [pc, #8]	@ (80015f8 <HAL_GetTick+0x10>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			@ (mov r8, r8)
 80015f8:	20000114 	.word	0x20000114

080015fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff fff0 	bl	80015e8 <HAL_GetTick>
 8001608:	0003      	movs	r3, r0
 800160a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	3301      	adds	r3, #1
 8001614:	d005      	beq.n	8001622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001616:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <HAL_Delay+0x44>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	001a      	movs	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	189b      	adds	r3, r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	f7ff ffe0 	bl	80015e8 <HAL_GetTick>
 8001628:	0002      	movs	r2, r0
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	d8f7      	bhi.n	8001624 <HAL_Delay+0x28>
  {
  }
}
 8001634:	46c0      	nop			@ (mov r8, r8)
 8001636:	46c0      	nop			@ (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	b004      	add	sp, #16
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			@ (mov r8, r8)
 8001640:	20000008 	.word	0x20000008

08001644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	0002      	movs	r2, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001652:	1dfb      	adds	r3, r7, #7
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b7f      	cmp	r3, #127	@ 0x7f
 8001658:	d828      	bhi.n	80016ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800165a:	4a2f      	ldr	r2, [pc, #188]	@ (8001718 <__NVIC_SetPriority+0xd4>)
 800165c:	1dfb      	adds	r3, r7, #7
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b25b      	sxtb	r3, r3
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	33c0      	adds	r3, #192	@ 0xc0
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	589b      	ldr	r3, [r3, r2]
 800166a:	1dfa      	adds	r2, r7, #7
 800166c:	7812      	ldrb	r2, [r2, #0]
 800166e:	0011      	movs	r1, r2
 8001670:	2203      	movs	r2, #3
 8001672:	400a      	ands	r2, r1
 8001674:	00d2      	lsls	r2, r2, #3
 8001676:	21ff      	movs	r1, #255	@ 0xff
 8001678:	4091      	lsls	r1, r2
 800167a:	000a      	movs	r2, r1
 800167c:	43d2      	mvns	r2, r2
 800167e:	401a      	ands	r2, r3
 8001680:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	019b      	lsls	r3, r3, #6
 8001686:	22ff      	movs	r2, #255	@ 0xff
 8001688:	401a      	ands	r2, r3
 800168a:	1dfb      	adds	r3, r7, #7
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	0018      	movs	r0, r3
 8001690:	2303      	movs	r3, #3
 8001692:	4003      	ands	r3, r0
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001698:	481f      	ldr	r0, [pc, #124]	@ (8001718 <__NVIC_SetPriority+0xd4>)
 800169a:	1dfb      	adds	r3, r7, #7
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	089b      	lsrs	r3, r3, #2
 80016a2:	430a      	orrs	r2, r1
 80016a4:	33c0      	adds	r3, #192	@ 0xc0
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016aa:	e031      	b.n	8001710 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016ac:	4a1b      	ldr	r2, [pc, #108]	@ (800171c <__NVIC_SetPriority+0xd8>)
 80016ae:	1dfb      	adds	r3, r7, #7
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	0019      	movs	r1, r3
 80016b4:	230f      	movs	r3, #15
 80016b6:	400b      	ands	r3, r1
 80016b8:	3b08      	subs	r3, #8
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3306      	adds	r3, #6
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	18d3      	adds	r3, r2, r3
 80016c2:	3304      	adds	r3, #4
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	1dfa      	adds	r2, r7, #7
 80016c8:	7812      	ldrb	r2, [r2, #0]
 80016ca:	0011      	movs	r1, r2
 80016cc:	2203      	movs	r2, #3
 80016ce:	400a      	ands	r2, r1
 80016d0:	00d2      	lsls	r2, r2, #3
 80016d2:	21ff      	movs	r1, #255	@ 0xff
 80016d4:	4091      	lsls	r1, r2
 80016d6:	000a      	movs	r2, r1
 80016d8:	43d2      	mvns	r2, r2
 80016da:	401a      	ands	r2, r3
 80016dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	019b      	lsls	r3, r3, #6
 80016e2:	22ff      	movs	r2, #255	@ 0xff
 80016e4:	401a      	ands	r2, r3
 80016e6:	1dfb      	adds	r3, r7, #7
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	0018      	movs	r0, r3
 80016ec:	2303      	movs	r3, #3
 80016ee:	4003      	ands	r3, r0
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016f4:	4809      	ldr	r0, [pc, #36]	@ (800171c <__NVIC_SetPriority+0xd8>)
 80016f6:	1dfb      	adds	r3, r7, #7
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	001c      	movs	r4, r3
 80016fc:	230f      	movs	r3, #15
 80016fe:	4023      	ands	r3, r4
 8001700:	3b08      	subs	r3, #8
 8001702:	089b      	lsrs	r3, r3, #2
 8001704:	430a      	orrs	r2, r1
 8001706:	3306      	adds	r3, #6
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	18c3      	adds	r3, r0, r3
 800170c:	3304      	adds	r3, #4
 800170e:	601a      	str	r2, [r3, #0]
}
 8001710:	46c0      	nop			@ (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	b003      	add	sp, #12
 8001716:	bd90      	pop	{r4, r7, pc}
 8001718:	e000e100 	.word	0xe000e100
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	1e5a      	subs	r2, r3, #1
 800172c:	2380      	movs	r3, #128	@ 0x80
 800172e:	045b      	lsls	r3, r3, #17
 8001730:	429a      	cmp	r2, r3
 8001732:	d301      	bcc.n	8001738 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001734:	2301      	movs	r3, #1
 8001736:	e010      	b.n	800175a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001738:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <SysTick_Config+0x44>)
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	3a01      	subs	r2, #1
 800173e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001740:	2301      	movs	r3, #1
 8001742:	425b      	negs	r3, r3
 8001744:	2103      	movs	r1, #3
 8001746:	0018      	movs	r0, r3
 8001748:	f7ff ff7c 	bl	8001644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174c:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <SysTick_Config+0x44>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001752:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <SysTick_Config+0x44>)
 8001754:	2207      	movs	r2, #7
 8001756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001758:	2300      	movs	r3, #0
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b002      	add	sp, #8
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			@ (mov r8, r8)
 8001764:	e000e010 	.word	0xe000e010

08001768 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	210f      	movs	r1, #15
 8001774:	187b      	adds	r3, r7, r1
 8001776:	1c02      	adds	r2, r0, #0
 8001778:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	187b      	adds	r3, r7, r1
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b25b      	sxtb	r3, r3
 8001782:	0011      	movs	r1, r2
 8001784:	0018      	movs	r0, r3
 8001786:	f7ff ff5d 	bl	8001644 <__NVIC_SetPriority>
}
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	b004      	add	sp, #16
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	0018      	movs	r0, r3
 800179e:	f7ff ffbf 	bl	8001720 <SysTick_Config>
 80017a2:	0003      	movs	r3, r0
}
 80017a4:	0018      	movs	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b002      	add	sp, #8
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ba:	e147      	b.n	8001a4c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2101      	movs	r1, #1
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4091      	lsls	r1, r2
 80017c6:	000a      	movs	r2, r1
 80017c8:	4013      	ands	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d100      	bne.n	80017d4 <HAL_GPIO_Init+0x28>
 80017d2:	e138      	b.n	8001a46 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2203      	movs	r2, #3
 80017da:	4013      	ands	r3, r2
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d005      	beq.n	80017ec <HAL_GPIO_Init+0x40>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2203      	movs	r2, #3
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d130      	bne.n	800184e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	409a      	lsls	r2, r3
 80017fa:	0013      	movs	r3, r2
 80017fc:	43da      	mvns	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	409a      	lsls	r2, r3
 800180e:	0013      	movs	r3, r2
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001822:	2201      	movs	r2, #1
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
 8001828:	0013      	movs	r3, r2
 800182a:	43da      	mvns	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	091b      	lsrs	r3, r3, #4
 8001838:	2201      	movs	r2, #1
 800183a:	401a      	ands	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	409a      	lsls	r2, r3
 8001840:	0013      	movs	r3, r2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2203      	movs	r2, #3
 8001854:	4013      	ands	r3, r2
 8001856:	2b03      	cmp	r3, #3
 8001858:	d017      	beq.n	800188a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	409a      	lsls	r2, r3
 8001868:	0013      	movs	r3, r2
 800186a:	43da      	mvns	r2, r3
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2203      	movs	r2, #3
 8001890:	4013      	ands	r3, r2
 8001892:	2b02      	cmp	r3, #2
 8001894:	d123      	bne.n	80018de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	08da      	lsrs	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3208      	adds	r2, #8
 800189e:	0092      	lsls	r2, r2, #2
 80018a0:	58d3      	ldr	r3, [r2, r3]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	2207      	movs	r2, #7
 80018a8:	4013      	ands	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	220f      	movs	r2, #15
 80018ae:	409a      	lsls	r2, r3
 80018b0:	0013      	movs	r3, r2
 80018b2:	43da      	mvns	r2, r3
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	691a      	ldr	r2, [r3, #16]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2107      	movs	r1, #7
 80018c2:	400b      	ands	r3, r1
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	409a      	lsls	r2, r3
 80018c8:	0013      	movs	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	0092      	lsls	r2, r2, #2
 80018da:	6939      	ldr	r1, [r7, #16]
 80018dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	2203      	movs	r2, #3
 80018ea:	409a      	lsls	r2, r3
 80018ec:	0013      	movs	r3, r2
 80018ee:	43da      	mvns	r2, r3
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2203      	movs	r2, #3
 80018fc:	401a      	ands	r2, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	409a      	lsls	r2, r3
 8001904:	0013      	movs	r3, r2
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	23c0      	movs	r3, #192	@ 0xc0
 8001918:	029b      	lsls	r3, r3, #10
 800191a:	4013      	ands	r3, r2
 800191c:	d100      	bne.n	8001920 <HAL_GPIO_Init+0x174>
 800191e:	e092      	b.n	8001a46 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001920:	4a50      	ldr	r2, [pc, #320]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	089b      	lsrs	r3, r3, #2
 8001926:	3318      	adds	r3, #24
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	589b      	ldr	r3, [r3, r2]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2203      	movs	r2, #3
 8001932:	4013      	ands	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	220f      	movs	r2, #15
 8001938:	409a      	lsls	r2, r3
 800193a:	0013      	movs	r3, r2
 800193c:	43da      	mvns	r2, r3
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	23a0      	movs	r3, #160	@ 0xa0
 8001948:	05db      	lsls	r3, r3, #23
 800194a:	429a      	cmp	r2, r3
 800194c:	d013      	beq.n	8001976 <HAL_GPIO_Init+0x1ca>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a45      	ldr	r2, [pc, #276]	@ (8001a68 <HAL_GPIO_Init+0x2bc>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d00d      	beq.n	8001972 <HAL_GPIO_Init+0x1c6>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a44      	ldr	r2, [pc, #272]	@ (8001a6c <HAL_GPIO_Init+0x2c0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d007      	beq.n	800196e <HAL_GPIO_Init+0x1c2>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a43      	ldr	r2, [pc, #268]	@ (8001a70 <HAL_GPIO_Init+0x2c4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d101      	bne.n	800196a <HAL_GPIO_Init+0x1be>
 8001966:	2303      	movs	r3, #3
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x1cc>
 800196a:	2305      	movs	r3, #5
 800196c:	e004      	b.n	8001978 <HAL_GPIO_Init+0x1cc>
 800196e:	2302      	movs	r3, #2
 8001970:	e002      	b.n	8001978 <HAL_GPIO_Init+0x1cc>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_GPIO_Init+0x1cc>
 8001976:	2300      	movs	r3, #0
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	2103      	movs	r1, #3
 800197c:	400a      	ands	r2, r1
 800197e:	00d2      	lsls	r2, r2, #3
 8001980:	4093      	lsls	r3, r2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001988:	4936      	ldr	r1, [pc, #216]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3318      	adds	r3, #24
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001996:	4b33      	ldr	r3, [pc, #204]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43da      	mvns	r2, r3
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	2380      	movs	r3, #128	@ 0x80
 80019ac:	035b      	lsls	r3, r3, #13
 80019ae:	4013      	ands	r3, r2
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80019c0:	4b28      	ldr	r3, [pc, #160]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43da      	mvns	r2, r3
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	2380      	movs	r3, #128	@ 0x80
 80019d6:	039b      	lsls	r3, r3, #14
 80019d8:	4013      	ands	r3, r2
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 80019ec:	2384      	movs	r3, #132	@ 0x84
 80019ee:	58d3      	ldr	r3, [r2, r3]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43da      	mvns	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	2380      	movs	r3, #128	@ 0x80
 8001a02:	029b      	lsls	r3, r3, #10
 8001a04:	4013      	ands	r3, r2
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a10:	4914      	ldr	r1, [pc, #80]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 8001a12:	2284      	movs	r2, #132	@ 0x84
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001a18:	4a12      	ldr	r2, [pc, #72]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 8001a1a:	2380      	movs	r3, #128	@ 0x80
 8001a1c:	58d3      	ldr	r3, [r2, r3]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	43da      	mvns	r2, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	2380      	movs	r3, #128	@ 0x80
 8001a30:	025b      	lsls	r3, r3, #9
 8001a32:	4013      	ands	r3, r2
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a3e:	4909      	ldr	r1, [pc, #36]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 8001a40:	2280      	movs	r2, #128	@ 0x80
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	40da      	lsrs	r2, r3
 8001a54:	1e13      	subs	r3, r2, #0
 8001a56:	d000      	beq.n	8001a5a <HAL_GPIO_Init+0x2ae>
 8001a58:	e6b0      	b.n	80017bc <HAL_GPIO_Init+0x10>
  }
}
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	46c0      	nop			@ (mov r8, r8)
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	b006      	add	sp, #24
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021800 	.word	0x40021800
 8001a68:	50000400 	.word	0x50000400
 8001a6c:	50000800 	.word	0x50000800
 8001a70:	50000c00 	.word	0x50000c00

08001a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e08f      	b.n	8001ba6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2241      	movs	r2, #65	@ 0x41
 8001a8a:	5c9b      	ldrb	r3, [r3, r2]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d107      	bne.n	8001aa2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2240      	movs	r2, #64	@ 0x40
 8001a96:	2100      	movs	r1, #0
 8001a98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff fbf7 	bl	8001290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2241      	movs	r2, #65	@ 0x41
 8001aa6:	2124      	movs	r1, #36	@ 0x24
 8001aa8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	438a      	bics	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	493b      	ldr	r1, [pc, #236]	@ (8001bb0 <HAL_I2C_Init+0x13c>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4938      	ldr	r1, [pc, #224]	@ (8001bb4 <HAL_I2C_Init+0x140>)
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d108      	bne.n	8001af2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2180      	movs	r1, #128	@ 0x80
 8001aea:	0209      	lsls	r1, r1, #8
 8001aec:	430a      	orrs	r2, r1
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	e007      	b.n	8001b02 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2184      	movs	r1, #132	@ 0x84
 8001afc:	0209      	lsls	r1, r1, #8
 8001afe:	430a      	orrs	r2, r1
 8001b00:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d109      	bne.n	8001b1e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2180      	movs	r1, #128	@ 0x80
 8001b16:	0109      	lsls	r1, r1, #4
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	e007      	b.n	8001b2e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4923      	ldr	r1, [pc, #140]	@ (8001bb8 <HAL_I2C_Init+0x144>)
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4920      	ldr	r1, [pc, #128]	@ (8001bbc <HAL_I2C_Init+0x148>)
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	491a      	ldr	r1, [pc, #104]	@ (8001bb4 <HAL_I2C_Init+0x140>)
 8001b4a:	400a      	ands	r2, r1
 8001b4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	431a      	orrs	r2, r3
 8001b58:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69d9      	ldr	r1, [r3, #28]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1a      	ldr	r2, [r3, #32]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2101      	movs	r1, #1
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2241      	movs	r2, #65	@ 0x41
 8001b92:	2120      	movs	r1, #32
 8001b94:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2242      	movs	r2, #66	@ 0x42
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b002      	add	sp, #8
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	f0ffffff 	.word	0xf0ffffff
 8001bb4:	ffff7fff 	.word	0xffff7fff
 8001bb8:	fffff7ff 	.word	0xfffff7ff
 8001bbc:	02008000 	.word	0x02008000

08001bc0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	000c      	movs	r4, r1
 8001bca:	0010      	movs	r0, r2
 8001bcc:	0019      	movs	r1, r3
 8001bce:	230a      	movs	r3, #10
 8001bd0:	18fb      	adds	r3, r7, r3
 8001bd2:	1c22      	adds	r2, r4, #0
 8001bd4:	801a      	strh	r2, [r3, #0]
 8001bd6:	2308      	movs	r3, #8
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	1c02      	adds	r2, r0, #0
 8001bdc:	801a      	strh	r2, [r3, #0]
 8001bde:	1dbb      	adds	r3, r7, #6
 8001be0:	1c0a      	adds	r2, r1, #0
 8001be2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2241      	movs	r2, #65	@ 0x41
 8001be8:	5c9b      	ldrb	r3, [r3, r2]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b20      	cmp	r3, #32
 8001bee:	d000      	beq.n	8001bf2 <HAL_I2C_Mem_Write+0x32>
 8001bf0:	e10c      	b.n	8001e0c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <HAL_I2C_Mem_Write+0x42>
 8001bf8:	232c      	movs	r3, #44	@ 0x2c
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d105      	bne.n	8001c0e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2280      	movs	r2, #128	@ 0x80
 8001c06:	0092      	lsls	r2, r2, #2
 8001c08:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e0ff      	b.n	8001e0e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2240      	movs	r2, #64	@ 0x40
 8001c12:	5c9b      	ldrb	r3, [r3, r2]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_I2C_Mem_Write+0x5c>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e0f8      	b.n	8001e0e <HAL_I2C_Mem_Write+0x24e>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2240      	movs	r2, #64	@ 0x40
 8001c20:	2101      	movs	r1, #1
 8001c22:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c24:	f7ff fce0 	bl	80015e8 <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c2c:	2380      	movs	r3, #128	@ 0x80
 8001c2e:	0219      	lsls	r1, r3, #8
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2319      	movs	r3, #25
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f000 fb0b 	bl	8002254 <I2C_WaitOnFlagUntilTimeout>
 8001c3e:	1e03      	subs	r3, r0, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e0e3      	b.n	8001e0e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2241      	movs	r2, #65	@ 0x41
 8001c4a:	2121      	movs	r1, #33	@ 0x21
 8001c4c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2242      	movs	r2, #66	@ 0x42
 8001c52:	2140      	movs	r1, #64	@ 0x40
 8001c54:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	222c      	movs	r2, #44	@ 0x2c
 8001c66:	18ba      	adds	r2, r7, r2
 8001c68:	8812      	ldrh	r2, [r2, #0]
 8001c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c72:	1dbb      	adds	r3, r7, #6
 8001c74:	881c      	ldrh	r4, [r3, #0]
 8001c76:	2308      	movs	r3, #8
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	881a      	ldrh	r2, [r3, #0]
 8001c7c:	230a      	movs	r3, #10
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	8819      	ldrh	r1, [r3, #0]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	0023      	movs	r3, r4
 8001c8e:	f000 f9f9 	bl	8002084 <I2C_RequestMemoryWrite>
 8001c92:	1e03      	subs	r3, r0, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2240      	movs	r2, #64	@ 0x40
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e0b5      	b.n	8001e0e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	2bff      	cmp	r3, #255	@ 0xff
 8001caa:	d911      	bls.n	8001cd0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	22ff      	movs	r2, #255	@ 0xff
 8001cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	2380      	movs	r3, #128	@ 0x80
 8001cba:	045c      	lsls	r4, r3, #17
 8001cbc:	230a      	movs	r3, #10
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	8819      	ldrh	r1, [r3, #0]
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	0023      	movs	r3, r4
 8001cca:	f000 fc9d 	bl	8002608 <I2C_TransferConfig>
 8001cce:	e012      	b.n	8001cf6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	2380      	movs	r3, #128	@ 0x80
 8001ce2:	049c      	lsls	r4, r3, #18
 8001ce4:	230a      	movs	r3, #10
 8001ce6:	18fb      	adds	r3, r7, r3
 8001ce8:	8819      	ldrh	r1, [r3, #0]
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	2300      	movs	r3, #0
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	0023      	movs	r3, r4
 8001cf2:	f000 fc89 	bl	8002608 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f000 fb01 	bl	8002304 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d02:	1e03      	subs	r3, r0, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e081      	b.n	8001e0e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	3b01      	subs	r3, #1
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03a      	beq.n	8001dba <HAL_I2C_Mem_Write+0x1fa>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d136      	bne.n	8001dba <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	0013      	movs	r3, r2
 8001d56:	2200      	movs	r2, #0
 8001d58:	2180      	movs	r1, #128	@ 0x80
 8001d5a:	f000 fa7b 	bl	8002254 <I2C_WaitOnFlagUntilTimeout>
 8001d5e:	1e03      	subs	r3, r0, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e053      	b.n	8001e0e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	2bff      	cmp	r3, #255	@ 0xff
 8001d6e:	d911      	bls.n	8001d94 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	22ff      	movs	r2, #255	@ 0xff
 8001d74:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	2380      	movs	r3, #128	@ 0x80
 8001d7e:	045c      	lsls	r4, r3, #17
 8001d80:	230a      	movs	r3, #10
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	8819      	ldrh	r1, [r3, #0]
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	0023      	movs	r3, r4
 8001d8e:	f000 fc3b 	bl	8002608 <I2C_TransferConfig>
 8001d92:	e012      	b.n	8001dba <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	2380      	movs	r3, #128	@ 0x80
 8001da6:	049c      	lsls	r4, r3, #18
 8001da8:	230a      	movs	r3, #10
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	8819      	ldrh	r1, [r3, #0]
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	2300      	movs	r3, #0
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	0023      	movs	r3, r4
 8001db6:	f000 fc27 	bl	8002608 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d198      	bne.n	8001cf6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f000 fae0 	bl	8002390 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001dd0:	1e03      	subs	r3, r0, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e01a      	b.n	8001e0e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	490b      	ldr	r1, [pc, #44]	@ (8001e18 <HAL_I2C_Mem_Write+0x258>)
 8001dec:	400a      	ands	r2, r1
 8001dee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2241      	movs	r2, #65	@ 0x41
 8001df4:	2120      	movs	r1, #32
 8001df6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2242      	movs	r2, #66	@ 0x42
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2240      	movs	r2, #64	@ 0x40
 8001e04:	2100      	movs	r1, #0
 8001e06:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e000      	b.n	8001e0e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001e0c:	2302      	movs	r3, #2
  }
}
 8001e0e:	0018      	movs	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b007      	add	sp, #28
 8001e14:	bd90      	pop	{r4, r7, pc}
 8001e16:	46c0      	nop			@ (mov r8, r8)
 8001e18:	fe00e800 	.word	0xfe00e800

08001e1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e1c:	b590      	push	{r4, r7, lr}
 8001e1e:	b089      	sub	sp, #36	@ 0x24
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	000c      	movs	r4, r1
 8001e26:	0010      	movs	r0, r2
 8001e28:	0019      	movs	r1, r3
 8001e2a:	230a      	movs	r3, #10
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	1c22      	adds	r2, r4, #0
 8001e30:	801a      	strh	r2, [r3, #0]
 8001e32:	2308      	movs	r3, #8
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	1c02      	adds	r2, r0, #0
 8001e38:	801a      	strh	r2, [r3, #0]
 8001e3a:	1dbb      	adds	r3, r7, #6
 8001e3c:	1c0a      	adds	r2, r1, #0
 8001e3e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2241      	movs	r2, #65	@ 0x41
 8001e44:	5c9b      	ldrb	r3, [r3, r2]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	d000      	beq.n	8001e4e <HAL_I2C_Mem_Read+0x32>
 8001e4c:	e110      	b.n	8002070 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d004      	beq.n	8001e5e <HAL_I2C_Mem_Read+0x42>
 8001e54:	232c      	movs	r3, #44	@ 0x2c
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d105      	bne.n	8001e6a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2280      	movs	r2, #128	@ 0x80
 8001e62:	0092      	lsls	r2, r2, #2
 8001e64:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e103      	b.n	8002072 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2240      	movs	r2, #64	@ 0x40
 8001e6e:	5c9b      	ldrb	r3, [r3, r2]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_I2C_Mem_Read+0x5c>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e0fc      	b.n	8002072 <HAL_I2C_Mem_Read+0x256>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2240      	movs	r2, #64	@ 0x40
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e80:	f7ff fbb2 	bl	80015e8 <HAL_GetTick>
 8001e84:	0003      	movs	r3, r0
 8001e86:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e88:	2380      	movs	r3, #128	@ 0x80
 8001e8a:	0219      	lsls	r1, r3, #8
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2319      	movs	r3, #25
 8001e94:	2201      	movs	r2, #1
 8001e96:	f000 f9dd 	bl	8002254 <I2C_WaitOnFlagUntilTimeout>
 8001e9a:	1e03      	subs	r3, r0, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e0e7      	b.n	8002072 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2241      	movs	r2, #65	@ 0x41
 8001ea6:	2122      	movs	r1, #34	@ 0x22
 8001ea8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2242      	movs	r2, #66	@ 0x42
 8001eae:	2140      	movs	r1, #64	@ 0x40
 8001eb0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	222c      	movs	r2, #44	@ 0x2c
 8001ec2:	18ba      	adds	r2, r7, r2
 8001ec4:	8812      	ldrh	r2, [r2, #0]
 8001ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ece:	1dbb      	adds	r3, r7, #6
 8001ed0:	881c      	ldrh	r4, [r3, #0]
 8001ed2:	2308      	movs	r3, #8
 8001ed4:	18fb      	adds	r3, r7, r3
 8001ed6:	881a      	ldrh	r2, [r3, #0]
 8001ed8:	230a      	movs	r3, #10
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	8819      	ldrh	r1, [r3, #0]
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	9301      	str	r3, [sp, #4]
 8001ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	0023      	movs	r3, r4
 8001eea:	f000 f92f 	bl	800214c <I2C_RequestMemoryRead>
 8001eee:	1e03      	subs	r3, r0, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2240      	movs	r2, #64	@ 0x40
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e0b9      	b.n	8002072 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	2bff      	cmp	r3, #255	@ 0xff
 8001f06:	d911      	bls.n	8001f2c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	22ff      	movs	r2, #255	@ 0xff
 8001f0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	2380      	movs	r3, #128	@ 0x80
 8001f16:	045c      	lsls	r4, r3, #17
 8001f18:	230a      	movs	r3, #10
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	8819      	ldrh	r1, [r3, #0]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	4b56      	ldr	r3, [pc, #344]	@ (800207c <HAL_I2C_Mem_Read+0x260>)
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	0023      	movs	r3, r4
 8001f26:	f000 fb6f 	bl	8002608 <I2C_TransferConfig>
 8001f2a:	e012      	b.n	8001f52 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	049c      	lsls	r4, r3, #18
 8001f40:	230a      	movs	r3, #10
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	8819      	ldrh	r1, [r3, #0]
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	4b4c      	ldr	r3, [pc, #304]	@ (800207c <HAL_I2C_Mem_Read+0x260>)
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	0023      	movs	r3, r4
 8001f4e:	f000 fb5b 	bl	8002608 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	0013      	movs	r3, r2
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2104      	movs	r1, #4
 8001f60:	f000 f978 	bl	8002254 <I2C_WaitOnFlagUntilTimeout>
 8001f64:	1e03      	subs	r3, r0, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e082      	b.n	8002072 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d03a      	beq.n	800201e <HAL_I2C_Mem_Read+0x202>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d136      	bne.n	800201e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	0013      	movs	r3, r2
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2180      	movs	r1, #128	@ 0x80
 8001fbe:	f000 f949 	bl	8002254 <I2C_WaitOnFlagUntilTimeout>
 8001fc2:	1e03      	subs	r3, r0, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e053      	b.n	8002072 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	2bff      	cmp	r3, #255	@ 0xff
 8001fd2:	d911      	bls.n	8001ff8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	22ff      	movs	r2, #255	@ 0xff
 8001fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	045c      	lsls	r4, r3, #17
 8001fe4:	230a      	movs	r3, #10
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	8819      	ldrh	r1, [r3, #0]
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	2300      	movs	r3, #0
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	0023      	movs	r3, r4
 8001ff2:	f000 fb09 	bl	8002608 <I2C_TransferConfig>
 8001ff6:	e012      	b.n	800201e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002006:	b2da      	uxtb	r2, r3
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	049c      	lsls	r4, r3, #18
 800200c:	230a      	movs	r3, #10
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	8819      	ldrh	r1, [r3, #0]
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	2300      	movs	r3, #0
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	0023      	movs	r3, r4
 800201a:	f000 faf5 	bl	8002608 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d194      	bne.n	8001f52 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	0018      	movs	r0, r3
 8002030:	f000 f9ae 	bl	8002390 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002034:	1e03      	subs	r3, r0, #0
 8002036:	d001      	beq.n	800203c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e01a      	b.n	8002072 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2220      	movs	r2, #32
 8002042:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	490c      	ldr	r1, [pc, #48]	@ (8002080 <HAL_I2C_Mem_Read+0x264>)
 8002050:	400a      	ands	r2, r1
 8002052:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2241      	movs	r2, #65	@ 0x41
 8002058:	2120      	movs	r1, #32
 800205a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2242      	movs	r2, #66	@ 0x42
 8002060:	2100      	movs	r1, #0
 8002062:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2240      	movs	r2, #64	@ 0x40
 8002068:	2100      	movs	r1, #0
 800206a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	e000      	b.n	8002072 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002070:	2302      	movs	r3, #2
  }
}
 8002072:	0018      	movs	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	b007      	add	sp, #28
 8002078:	bd90      	pop	{r4, r7, pc}
 800207a:	46c0      	nop			@ (mov r8, r8)
 800207c:	80002400 	.word	0x80002400
 8002080:	fe00e800 	.word	0xfe00e800

08002084 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002084:	b5b0      	push	{r4, r5, r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af02      	add	r7, sp, #8
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	000c      	movs	r4, r1
 800208e:	0010      	movs	r0, r2
 8002090:	0019      	movs	r1, r3
 8002092:	250a      	movs	r5, #10
 8002094:	197b      	adds	r3, r7, r5
 8002096:	1c22      	adds	r2, r4, #0
 8002098:	801a      	strh	r2, [r3, #0]
 800209a:	2308      	movs	r3, #8
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	1c02      	adds	r2, r0, #0
 80020a0:	801a      	strh	r2, [r3, #0]
 80020a2:	1dbb      	adds	r3, r7, #6
 80020a4:	1c0a      	adds	r2, r1, #0
 80020a6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80020a8:	1dbb      	adds	r3, r7, #6
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	2380      	movs	r3, #128	@ 0x80
 80020b0:	045c      	lsls	r4, r3, #17
 80020b2:	197b      	adds	r3, r7, r5
 80020b4:	8819      	ldrh	r1, [r3, #0]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	4b23      	ldr	r3, [pc, #140]	@ (8002148 <I2C_RequestMemoryWrite+0xc4>)
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	0023      	movs	r3, r4
 80020be:	f000 faa3 	bl	8002608 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c4:	6a39      	ldr	r1, [r7, #32]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f000 f91b 	bl	8002304 <I2C_WaitOnTXISFlagUntilTimeout>
 80020ce:	1e03      	subs	r3, r0, #0
 80020d0:	d001      	beq.n	80020d6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e033      	b.n	800213e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020d6:	1dbb      	adds	r3, r7, #6
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d107      	bne.n	80020ee <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020de:	2308      	movs	r3, #8
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80020ec:	e019      	b.n	8002122 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020ee:	2308      	movs	r3, #8
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002102:	6a39      	ldr	r1, [r7, #32]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	0018      	movs	r0, r3
 8002108:	f000 f8fc 	bl	8002304 <I2C_WaitOnTXISFlagUntilTimeout>
 800210c:	1e03      	subs	r3, r0, #0
 800210e:	d001      	beq.n	8002114 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e014      	b.n	800213e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002114:	2308      	movs	r3, #8
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002122:	6a3a      	ldr	r2, [r7, #32]
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	0013      	movs	r3, r2
 800212c:	2200      	movs	r2, #0
 800212e:	2180      	movs	r1, #128	@ 0x80
 8002130:	f000 f890 	bl	8002254 <I2C_WaitOnFlagUntilTimeout>
 8002134:	1e03      	subs	r3, r0, #0
 8002136:	d001      	beq.n	800213c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b004      	add	sp, #16
 8002144:	bdb0      	pop	{r4, r5, r7, pc}
 8002146:	46c0      	nop			@ (mov r8, r8)
 8002148:	80002000 	.word	0x80002000

0800214c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800214c:	b5b0      	push	{r4, r5, r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af02      	add	r7, sp, #8
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	000c      	movs	r4, r1
 8002156:	0010      	movs	r0, r2
 8002158:	0019      	movs	r1, r3
 800215a:	250a      	movs	r5, #10
 800215c:	197b      	adds	r3, r7, r5
 800215e:	1c22      	adds	r2, r4, #0
 8002160:	801a      	strh	r2, [r3, #0]
 8002162:	2308      	movs	r3, #8
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	1c02      	adds	r2, r0, #0
 8002168:	801a      	strh	r2, [r3, #0]
 800216a:	1dbb      	adds	r3, r7, #6
 800216c:	1c0a      	adds	r2, r1, #0
 800216e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002170:	1dbb      	adds	r3, r7, #6
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	197b      	adds	r3, r7, r5
 8002178:	8819      	ldrh	r1, [r3, #0]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	4b23      	ldr	r3, [pc, #140]	@ (800220c <I2C_RequestMemoryRead+0xc0>)
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2300      	movs	r3, #0
 8002182:	f000 fa41 	bl	8002608 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002188:	6a39      	ldr	r1, [r7, #32]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	0018      	movs	r0, r3
 800218e:	f000 f8b9 	bl	8002304 <I2C_WaitOnTXISFlagUntilTimeout>
 8002192:	1e03      	subs	r3, r0, #0
 8002194:	d001      	beq.n	800219a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e033      	b.n	8002202 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800219a:	1dbb      	adds	r3, r7, #6
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d107      	bne.n	80021b2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021a2:	2308      	movs	r3, #8
 80021a4:	18fb      	adds	r3, r7, r3
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80021b0:	e019      	b.n	80021e6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021b2:	2308      	movs	r3, #8
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021c6:	6a39      	ldr	r1, [r7, #32]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	0018      	movs	r0, r3
 80021cc:	f000 f89a 	bl	8002304 <I2C_WaitOnTXISFlagUntilTimeout>
 80021d0:	1e03      	subs	r3, r0, #0
 80021d2:	d001      	beq.n	80021d8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e014      	b.n	8002202 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021d8:	2308      	movs	r3, #8
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80021e6:	6a3a      	ldr	r2, [r7, #32]
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	0013      	movs	r3, r2
 80021f0:	2200      	movs	r2, #0
 80021f2:	2140      	movs	r1, #64	@ 0x40
 80021f4:	f000 f82e 	bl	8002254 <I2C_WaitOnFlagUntilTimeout>
 80021f8:	1e03      	subs	r3, r0, #0
 80021fa:	d001      	beq.n	8002200 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b004      	add	sp, #16
 8002208:	bdb0      	pop	{r4, r5, r7, pc}
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	80002000 	.word	0x80002000

08002210 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2202      	movs	r2, #2
 8002220:	4013      	ands	r3, r2
 8002222:	2b02      	cmp	r3, #2
 8002224:	d103      	bne.n	800222e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2200      	movs	r2, #0
 800222c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2201      	movs	r2, #1
 8002236:	4013      	ands	r3, r2
 8002238:	2b01      	cmp	r3, #1
 800223a:	d007      	beq.n	800224c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699a      	ldr	r2, [r3, #24]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2101      	movs	r1, #1
 8002248:	430a      	orrs	r2, r1
 800224a:	619a      	str	r2, [r3, #24]
  }
}
 800224c:	46c0      	nop			@ (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b002      	add	sp, #8
 8002252:	bd80      	pop	{r7, pc}

08002254 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	1dfb      	adds	r3, r7, #7
 8002262:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002264:	e03a      	b.n	80022dc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	6839      	ldr	r1, [r7, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	0018      	movs	r0, r3
 800226e:	f000 f8d3 	bl	8002418 <I2C_IsErrorOccurred>
 8002272:	1e03      	subs	r3, r0, #0
 8002274:	d001      	beq.n	800227a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e040      	b.n	80022fc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	d02d      	beq.n	80022dc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002280:	f7ff f9b2 	bl	80015e8 <HAL_GetTick>
 8002284:	0002      	movs	r2, r0
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d302      	bcc.n	8002296 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d122      	bne.n	80022dc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	4013      	ands	r3, r2
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	425a      	negs	r2, r3
 80022a6:	4153      	adcs	r3, r2
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	001a      	movs	r2, r3
 80022ac:	1dfb      	adds	r3, r7, #7
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d113      	bne.n	80022dc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b8:	2220      	movs	r2, #32
 80022ba:	431a      	orrs	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2241      	movs	r2, #65	@ 0x41
 80022c4:	2120      	movs	r1, #32
 80022c6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2242      	movs	r2, #66	@ 0x42
 80022cc:	2100      	movs	r1, #0
 80022ce:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2240      	movs	r2, #64	@ 0x40
 80022d4:	2100      	movs	r1, #0
 80022d6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e00f      	b.n	80022fc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	4013      	ands	r3, r2
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	425a      	negs	r2, r3
 80022ec:	4153      	adcs	r3, r2
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	001a      	movs	r2, r3
 80022f2:	1dfb      	adds	r3, r7, #7
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d0b5      	beq.n	8002266 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	0018      	movs	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	b004      	add	sp, #16
 8002302:	bd80      	pop	{r7, pc}

08002304 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002310:	e032      	b.n	8002378 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	0018      	movs	r0, r3
 800231a:	f000 f87d 	bl	8002418 <I2C_IsErrorOccurred>
 800231e:	1e03      	subs	r3, r0, #0
 8002320:	d001      	beq.n	8002326 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e030      	b.n	8002388 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	3301      	adds	r3, #1
 800232a:	d025      	beq.n	8002378 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232c:	f7ff f95c 	bl	80015e8 <HAL_GetTick>
 8002330:	0002      	movs	r2, r0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	429a      	cmp	r2, r3
 800233a:	d302      	bcc.n	8002342 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d11a      	bne.n	8002378 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	2202      	movs	r2, #2
 800234a:	4013      	ands	r3, r2
 800234c:	2b02      	cmp	r3, #2
 800234e:	d013      	beq.n	8002378 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002354:	2220      	movs	r2, #32
 8002356:	431a      	orrs	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2241      	movs	r2, #65	@ 0x41
 8002360:	2120      	movs	r1, #32
 8002362:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2242      	movs	r2, #66	@ 0x42
 8002368:	2100      	movs	r1, #0
 800236a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2240      	movs	r2, #64	@ 0x40
 8002370:	2100      	movs	r1, #0
 8002372:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e007      	b.n	8002388 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	2202      	movs	r2, #2
 8002380:	4013      	ands	r3, r2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d1c5      	bne.n	8002312 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	b004      	add	sp, #16
 800238e:	bd80      	pop	{r7, pc}

08002390 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800239c:	e02f      	b.n	80023fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 f837 	bl	8002418 <I2C_IsErrorOccurred>
 80023aa:	1e03      	subs	r3, r0, #0
 80023ac:	d001      	beq.n	80023b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e02d      	b.n	800240e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b2:	f7ff f919 	bl	80015e8 <HAL_GetTick>
 80023b6:	0002      	movs	r2, r0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d302      	bcc.n	80023c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d11a      	bne.n	80023fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2220      	movs	r2, #32
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d013      	beq.n	80023fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023da:	2220      	movs	r2, #32
 80023dc:	431a      	orrs	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2241      	movs	r2, #65	@ 0x41
 80023e6:	2120      	movs	r1, #32
 80023e8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2242      	movs	r2, #66	@ 0x42
 80023ee:	2100      	movs	r1, #0
 80023f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2240      	movs	r2, #64	@ 0x40
 80023f6:	2100      	movs	r1, #0
 80023f8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e007      	b.n	800240e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2220      	movs	r2, #32
 8002406:	4013      	ands	r3, r2
 8002408:	2b20      	cmp	r3, #32
 800240a:	d1c8      	bne.n	800239e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	0018      	movs	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	b004      	add	sp, #16
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	@ 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002424:	2327      	movs	r3, #39	@ 0x27
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	2210      	movs	r2, #16
 8002440:	4013      	ands	r3, r2
 8002442:	d100      	bne.n	8002446 <I2C_IsErrorOccurred+0x2e>
 8002444:	e079      	b.n	800253a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2210      	movs	r2, #16
 800244c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800244e:	e057      	b.n	8002500 <I2C_IsErrorOccurred+0xe8>
 8002450:	2227      	movs	r2, #39	@ 0x27
 8002452:	18bb      	adds	r3, r7, r2
 8002454:	18ba      	adds	r2, r7, r2
 8002456:	7812      	ldrb	r2, [r2, #0]
 8002458:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	3301      	adds	r3, #1
 800245e:	d04f      	beq.n	8002500 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002460:	f7ff f8c2 	bl	80015e8 <HAL_GetTick>
 8002464:	0002      	movs	r2, r0
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	429a      	cmp	r2, r3
 800246e:	d302      	bcc.n	8002476 <I2C_IsErrorOccurred+0x5e>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d144      	bne.n	8002500 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	2380      	movs	r3, #128	@ 0x80
 800247e:	01db      	lsls	r3, r3, #7
 8002480:	4013      	ands	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002484:	2013      	movs	r0, #19
 8002486:	183b      	adds	r3, r7, r0
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	2142      	movs	r1, #66	@ 0x42
 800248c:	5c52      	ldrb	r2, [r2, r1]
 800248e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	401a      	ands	r2, r3
 800249c:	2380      	movs	r3, #128	@ 0x80
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d126      	bne.n	80024f2 <I2C_IsErrorOccurred+0xda>
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	2380      	movs	r3, #128	@ 0x80
 80024a8:	01db      	lsls	r3, r3, #7
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d021      	beq.n	80024f2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80024ae:	183b      	adds	r3, r7, r0
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	d01d      	beq.n	80024f2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2180      	movs	r1, #128	@ 0x80
 80024c2:	01c9      	lsls	r1, r1, #7
 80024c4:	430a      	orrs	r2, r1
 80024c6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80024c8:	f7ff f88e 	bl	80015e8 <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024d0:	e00f      	b.n	80024f2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80024d2:	f7ff f889 	bl	80015e8 <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b19      	cmp	r3, #25
 80024de:	d908      	bls.n	80024f2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	2220      	movs	r2, #32
 80024e4:	4313      	orrs	r3, r2
 80024e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80024e8:	2327      	movs	r3, #39	@ 0x27
 80024ea:	18fb      	adds	r3, r7, r3
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]

              break;
 80024f0:	e006      	b.n	8002500 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	2220      	movs	r2, #32
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b20      	cmp	r3, #32
 80024fe:	d1e8      	bne.n	80024d2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2220      	movs	r2, #32
 8002508:	4013      	ands	r3, r2
 800250a:	2b20      	cmp	r3, #32
 800250c:	d004      	beq.n	8002518 <I2C_IsErrorOccurred+0x100>
 800250e:	2327      	movs	r3, #39	@ 0x27
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d09b      	beq.n	8002450 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002518:	2327      	movs	r3, #39	@ 0x27
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2220      	movs	r2, #32
 8002528:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	2204      	movs	r2, #4
 800252e:	4313      	orrs	r3, r2
 8002530:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002532:	2327      	movs	r3, #39	@ 0x27
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4013      	ands	r3, r2
 800254a:	d00c      	beq.n	8002566 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	2201      	movs	r2, #1
 8002550:	4313      	orrs	r3, r2
 8002552:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2280      	movs	r2, #128	@ 0x80
 800255a:	0052      	lsls	r2, r2, #1
 800255c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800255e:	2327      	movs	r3, #39	@ 0x27
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	2380      	movs	r3, #128	@ 0x80
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4013      	ands	r3, r2
 800256e:	d00c      	beq.n	800258a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	2208      	movs	r2, #8
 8002574:	4313      	orrs	r3, r2
 8002576:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2280      	movs	r2, #128	@ 0x80
 800257e:	00d2      	lsls	r2, r2, #3
 8002580:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002582:	2327      	movs	r3, #39	@ 0x27
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	2201      	movs	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	2380      	movs	r3, #128	@ 0x80
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4013      	ands	r3, r2
 8002592:	d00c      	beq.n	80025ae <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	2202      	movs	r2, #2
 8002598:	4313      	orrs	r3, r2
 800259a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2280      	movs	r2, #128	@ 0x80
 80025a2:	0092      	lsls	r2, r2, #2
 80025a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025a6:	2327      	movs	r3, #39	@ 0x27
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	2201      	movs	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80025ae:	2327      	movs	r3, #39	@ 0x27
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01d      	beq.n	80025f4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	0018      	movs	r0, r3
 80025bc:	f7ff fe28 	bl	8002210 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	490e      	ldr	r1, [pc, #56]	@ (8002604 <I2C_IsErrorOccurred+0x1ec>)
 80025cc:	400a      	ands	r2, r1
 80025ce:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2241      	movs	r2, #65	@ 0x41
 80025e0:	2120      	movs	r1, #32
 80025e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2242      	movs	r2, #66	@ 0x42
 80025e8:	2100      	movs	r1, #0
 80025ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2240      	movs	r2, #64	@ 0x40
 80025f0:	2100      	movs	r1, #0
 80025f2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80025f4:	2327      	movs	r3, #39	@ 0x27
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	781b      	ldrb	r3, [r3, #0]
}
 80025fa:	0018      	movs	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b00a      	add	sp, #40	@ 0x28
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	fe00e800 	.word	0xfe00e800

08002608 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	0008      	movs	r0, r1
 8002612:	0011      	movs	r1, r2
 8002614:	607b      	str	r3, [r7, #4]
 8002616:	240a      	movs	r4, #10
 8002618:	193b      	adds	r3, r7, r4
 800261a:	1c02      	adds	r2, r0, #0
 800261c:	801a      	strh	r2, [r3, #0]
 800261e:	2009      	movs	r0, #9
 8002620:	183b      	adds	r3, r7, r0
 8002622:	1c0a      	adds	r2, r1, #0
 8002624:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002626:	193b      	adds	r3, r7, r4
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	059b      	lsls	r3, r3, #22
 800262c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800262e:	183b      	adds	r3, r7, r0
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	0419      	lsls	r1, r3, #16
 8002634:	23ff      	movs	r3, #255	@ 0xff
 8002636:	041b      	lsls	r3, r3, #16
 8002638:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800263a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002642:	4313      	orrs	r3, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002652:	0d51      	lsrs	r1, r2, #21
 8002654:	2280      	movs	r2, #128	@ 0x80
 8002656:	00d2      	lsls	r2, r2, #3
 8002658:	400a      	ands	r2, r1
 800265a:	4907      	ldr	r1, [pc, #28]	@ (8002678 <I2C_TransferConfig+0x70>)
 800265c:	430a      	orrs	r2, r1
 800265e:	43d2      	mvns	r2, r2
 8002660:	401a      	ands	r2, r3
 8002662:	0011      	movs	r1, r2
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	430a      	orrs	r2, r1
 800266c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	46bd      	mov	sp, r7
 8002672:	b007      	add	sp, #28
 8002674:	bd90      	pop	{r4, r7, pc}
 8002676:	46c0      	nop			@ (mov r8, r8)
 8002678:	03ff63ff 	.word	0x03ff63ff

0800267c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2241      	movs	r2, #65	@ 0x41
 800268a:	5c9b      	ldrb	r3, [r3, r2]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b20      	cmp	r3, #32
 8002690:	d138      	bne.n	8002704 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2240      	movs	r2, #64	@ 0x40
 8002696:	5c9b      	ldrb	r3, [r3, r2]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800269c:	2302      	movs	r3, #2
 800269e:	e032      	b.n	8002706 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2240      	movs	r2, #64	@ 0x40
 80026a4:	2101      	movs	r1, #1
 80026a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2241      	movs	r2, #65	@ 0x41
 80026ac:	2124      	movs	r1, #36	@ 0x24
 80026ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2101      	movs	r1, #1
 80026bc:	438a      	bics	r2, r1
 80026be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4911      	ldr	r1, [pc, #68]	@ (8002710 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80026cc:	400a      	ands	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6819      	ldr	r1, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2101      	movs	r1, #1
 80026ec:	430a      	orrs	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2241      	movs	r2, #65	@ 0x41
 80026f4:	2120      	movs	r1, #32
 80026f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2240      	movs	r2, #64	@ 0x40
 80026fc:	2100      	movs	r1, #0
 80026fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	e000      	b.n	8002706 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002704:	2302      	movs	r3, #2
  }
}
 8002706:	0018      	movs	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	b002      	add	sp, #8
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	ffffefff 	.word	0xffffefff

08002714 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2241      	movs	r2, #65	@ 0x41
 8002722:	5c9b      	ldrb	r3, [r3, r2]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b20      	cmp	r3, #32
 8002728:	d139      	bne.n	800279e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2240      	movs	r2, #64	@ 0x40
 800272e:	5c9b      	ldrb	r3, [r3, r2]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002734:	2302      	movs	r3, #2
 8002736:	e033      	b.n	80027a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2240      	movs	r2, #64	@ 0x40
 800273c:	2101      	movs	r1, #1
 800273e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2241      	movs	r2, #65	@ 0x41
 8002744:	2124      	movs	r1, #36	@ 0x24
 8002746:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2101      	movs	r1, #1
 8002754:	438a      	bics	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4a11      	ldr	r2, [pc, #68]	@ (80027a8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002764:	4013      	ands	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	021b      	lsls	r3, r3, #8
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2101      	movs	r1, #1
 8002786:	430a      	orrs	r2, r1
 8002788:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2241      	movs	r2, #65	@ 0x41
 800278e:	2120      	movs	r1, #32
 8002790:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2240      	movs	r2, #64	@ 0x40
 8002796:	2100      	movs	r1, #0
 8002798:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	e000      	b.n	80027a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800279e:	2302      	movs	r3, #2
  }
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b004      	add	sp, #16
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	fffff0ff 	.word	0xfffff0ff

080027ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80027b4:	4b19      	ldr	r3, [pc, #100]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a19      	ldr	r2, [pc, #100]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	0019      	movs	r1, r3
 80027be:	4b17      	ldr	r3, [pc, #92]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	2380      	movs	r3, #128	@ 0x80
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d11f      	bne.n	8002810 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80027d0:	4b14      	ldr	r3, [pc, #80]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	0013      	movs	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	189b      	adds	r3, r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4912      	ldr	r1, [pc, #72]	@ (8002828 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80027de:	0018      	movs	r0, r3
 80027e0:	f7fd fc8e 	bl	8000100 <__udivsi3>
 80027e4:	0003      	movs	r3, r0
 80027e6:	3301      	adds	r3, #1
 80027e8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027ea:	e008      	b.n	80027fe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	3b01      	subs	r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	e001      	b.n	80027fe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e009      	b.n	8002812 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027fe:	4b07      	ldr	r3, [pc, #28]	@ (800281c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	2380      	movs	r3, #128	@ 0x80
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	401a      	ands	r2, r3
 8002808:	2380      	movs	r3, #128	@ 0x80
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	429a      	cmp	r2, r3
 800280e:	d0ed      	beq.n	80027ec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	0018      	movs	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	b004      	add	sp, #16
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			@ (mov r8, r8)
 800281c:	40007000 	.word	0x40007000
 8002820:	fffff9ff 	.word	0xfffff9ff
 8002824:	20000000 	.word	0x20000000
 8002828:	000f4240 	.word	0x000f4240

0800282c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e2f3      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2201      	movs	r2, #1
 8002844:	4013      	ands	r3, r2
 8002846:	d100      	bne.n	800284a <HAL_RCC_OscConfig+0x1e>
 8002848:	e07c      	b.n	8002944 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800284a:	4bc3      	ldr	r3, [pc, #780]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2238      	movs	r2, #56	@ 0x38
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002854:	4bc0      	ldr	r3, [pc, #768]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2203      	movs	r2, #3
 800285a:	4013      	ands	r3, r2
 800285c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	2b10      	cmp	r3, #16
 8002862:	d102      	bne.n	800286a <HAL_RCC_OscConfig+0x3e>
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d002      	beq.n	8002870 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	2b08      	cmp	r3, #8
 800286e:	d10b      	bne.n	8002888 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002870:	4bb9      	ldr	r3, [pc, #740]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	@ 0x80
 8002876:	029b      	lsls	r3, r3, #10
 8002878:	4013      	ands	r3, r2
 800287a:	d062      	beq.n	8002942 <HAL_RCC_OscConfig+0x116>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d15e      	bne.n	8002942 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e2ce      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	2380      	movs	r3, #128	@ 0x80
 800288e:	025b      	lsls	r3, r3, #9
 8002890:	429a      	cmp	r2, r3
 8002892:	d107      	bne.n	80028a4 <HAL_RCC_OscConfig+0x78>
 8002894:	4bb0      	ldr	r3, [pc, #704]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4baf      	ldr	r3, [pc, #700]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 800289a:	2180      	movs	r1, #128	@ 0x80
 800289c:	0249      	lsls	r1, r1, #9
 800289e:	430a      	orrs	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	e020      	b.n	80028e6 <HAL_RCC_OscConfig+0xba>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	23a0      	movs	r3, #160	@ 0xa0
 80028aa:	02db      	lsls	r3, r3, #11
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d10e      	bne.n	80028ce <HAL_RCC_OscConfig+0xa2>
 80028b0:	4ba9      	ldr	r3, [pc, #676]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4ba8      	ldr	r3, [pc, #672]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028b6:	2180      	movs	r1, #128	@ 0x80
 80028b8:	02c9      	lsls	r1, r1, #11
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	4ba6      	ldr	r3, [pc, #664]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	4ba5      	ldr	r3, [pc, #660]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028c4:	2180      	movs	r1, #128	@ 0x80
 80028c6:	0249      	lsls	r1, r1, #9
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e00b      	b.n	80028e6 <HAL_RCC_OscConfig+0xba>
 80028ce:	4ba2      	ldr	r3, [pc, #648]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4ba1      	ldr	r3, [pc, #644]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028d4:	49a1      	ldr	r1, [pc, #644]	@ (8002b5c <HAL_RCC_OscConfig+0x330>)
 80028d6:	400a      	ands	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	4b9f      	ldr	r3, [pc, #636]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4b9e      	ldr	r3, [pc, #632]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028e0:	499f      	ldr	r1, [pc, #636]	@ (8002b60 <HAL_RCC_OscConfig+0x334>)
 80028e2:	400a      	ands	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d014      	beq.n	8002918 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ee:	f7fe fe7b 	bl	80015e8 <HAL_GetTick>
 80028f2:	0003      	movs	r3, r0
 80028f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f8:	f7fe fe76 	bl	80015e8 <HAL_GetTick>
 80028fc:	0002      	movs	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	@ 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e28d      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800290a:	4b93      	ldr	r3, [pc, #588]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	2380      	movs	r3, #128	@ 0x80
 8002910:	029b      	lsls	r3, r3, #10
 8002912:	4013      	ands	r3, r2
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0xcc>
 8002916:	e015      	b.n	8002944 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe fe66 	bl	80015e8 <HAL_GetTick>
 800291c:	0003      	movs	r3, r0
 800291e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002922:	f7fe fe61 	bl	80015e8 <HAL_GetTick>
 8002926:	0002      	movs	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b64      	cmp	r3, #100	@ 0x64
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e278      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002934:	4b88      	ldr	r3, [pc, #544]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	2380      	movs	r3, #128	@ 0x80
 800293a:	029b      	lsls	r3, r3, #10
 800293c:	4013      	ands	r3, r2
 800293e:	d1f0      	bne.n	8002922 <HAL_RCC_OscConfig+0xf6>
 8002940:	e000      	b.n	8002944 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002942:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2202      	movs	r2, #2
 800294a:	4013      	ands	r3, r2
 800294c:	d100      	bne.n	8002950 <HAL_RCC_OscConfig+0x124>
 800294e:	e099      	b.n	8002a84 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002950:	4b81      	ldr	r3, [pc, #516]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2238      	movs	r2, #56	@ 0x38
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800295a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2203      	movs	r2, #3
 8002960:	4013      	ands	r3, r2
 8002962:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	2b10      	cmp	r3, #16
 8002968:	d102      	bne.n	8002970 <HAL_RCC_OscConfig+0x144>
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d002      	beq.n	8002976 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d135      	bne.n	80029e2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002976:	4b78      	ldr	r3, [pc, #480]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	2380      	movs	r3, #128	@ 0x80
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4013      	ands	r3, r2
 8002980:	d005      	beq.n	800298e <HAL_RCC_OscConfig+0x162>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e24b      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	4b72      	ldr	r3, [pc, #456]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4a74      	ldr	r2, [pc, #464]	@ (8002b64 <HAL_RCC_OscConfig+0x338>)
 8002994:	4013      	ands	r3, r2
 8002996:	0019      	movs	r1, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	021a      	lsls	r2, r3, #8
 800299e:	4b6e      	ldr	r3, [pc, #440]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80029a0:	430a      	orrs	r2, r1
 80029a2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d112      	bne.n	80029d0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80029aa:	4b6b      	ldr	r3, [pc, #428]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a6e      	ldr	r2, [pc, #440]	@ (8002b68 <HAL_RCC_OscConfig+0x33c>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	4b67      	ldr	r3, [pc, #412]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80029be:	4b66      	ldr	r3, [pc, #408]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	0adb      	lsrs	r3, r3, #11
 80029c4:	2207      	movs	r2, #7
 80029c6:	4013      	ands	r3, r2
 80029c8:	4a68      	ldr	r2, [pc, #416]	@ (8002b6c <HAL_RCC_OscConfig+0x340>)
 80029ca:	40da      	lsrs	r2, r3
 80029cc:	4b68      	ldr	r3, [pc, #416]	@ (8002b70 <HAL_RCC_OscConfig+0x344>)
 80029ce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029d0:	4b68      	ldr	r3, [pc, #416]	@ (8002b74 <HAL_RCC_OscConfig+0x348>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	0018      	movs	r0, r3
 80029d6:	f7fe fdab 	bl	8001530 <HAL_InitTick>
 80029da:	1e03      	subs	r3, r0, #0
 80029dc:	d051      	beq.n	8002a82 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e221      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d030      	beq.n	8002a4c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80029ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002b68 <HAL_RCC_OscConfig+0x33c>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	4b57      	ldr	r3, [pc, #348]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80029fa:	430a      	orrs	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80029fe:	4b56      	ldr	r3, [pc, #344]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b55      	ldr	r3, [pc, #340]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a04:	2180      	movs	r1, #128	@ 0x80
 8002a06:	0049      	lsls	r1, r1, #1
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fdec 	bl	80015e8 <HAL_GetTick>
 8002a10:	0003      	movs	r3, r0
 8002a12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a16:	f7fe fde7 	bl	80015e8 <HAL_GetTick>
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e1fe      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a28:	4b4b      	ldr	r3, [pc, #300]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	2380      	movs	r3, #128	@ 0x80
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4013      	ands	r3, r2
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a34:	4b48      	ldr	r3, [pc, #288]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4a4a      	ldr	r2, [pc, #296]	@ (8002b64 <HAL_RCC_OscConfig+0x338>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	0019      	movs	r1, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	021a      	lsls	r2, r3, #8
 8002a44:	4b44      	ldr	r3, [pc, #272]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	e01b      	b.n	8002a84 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002a4c:	4b42      	ldr	r3, [pc, #264]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b41      	ldr	r3, [pc, #260]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a52:	4949      	ldr	r1, [pc, #292]	@ (8002b78 <HAL_RCC_OscConfig+0x34c>)
 8002a54:	400a      	ands	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7fe fdc6 	bl	80015e8 <HAL_GetTick>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a62:	f7fe fdc1 	bl	80015e8 <HAL_GetTick>
 8002a66:	0002      	movs	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e1d8      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a74:	4b38      	ldr	r3, [pc, #224]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	2380      	movs	r3, #128	@ 0x80
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x236>
 8002a80:	e000      	b.n	8002a84 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a82:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2208      	movs	r2, #8
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d047      	beq.n	8002b1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a8e:	4b32      	ldr	r3, [pc, #200]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2238      	movs	r2, #56	@ 0x38
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b18      	cmp	r3, #24
 8002a98:	d10a      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d03c      	beq.n	8002b1e <HAL_RCC_OscConfig+0x2f2>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d138      	bne.n	8002b1e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e1ba      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d019      	beq.n	8002aec <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002ab8:	4b27      	ldr	r3, [pc, #156]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002aba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002abc:	4b26      	ldr	r3, [pc, #152]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002abe:	2101      	movs	r1, #1
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fd90 	bl	80015e8 <HAL_GetTick>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ace:	f7fe fd8b 	bl	80015e8 <HAL_GetTick>
 8002ad2:	0002      	movs	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e1a2      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d0f1      	beq.n	8002ace <HAL_RCC_OscConfig+0x2a2>
 8002aea:	e018      	b.n	8002b1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002aec:	4b1a      	ldr	r3, [pc, #104]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002aee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002af0:	4b19      	ldr	r3, [pc, #100]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002af2:	2101      	movs	r1, #1
 8002af4:	438a      	bics	r2, r1
 8002af6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe fd76 	bl	80015e8 <HAL_GetTick>
 8002afc:	0003      	movs	r3, r0
 8002afe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b02:	f7fe fd71 	bl	80015e8 <HAL_GetTick>
 8002b06:	0002      	movs	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e188      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b14:	4b10      	ldr	r3, [pc, #64]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b18:	2202      	movs	r2, #2
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d1f1      	bne.n	8002b02 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2204      	movs	r2, #4
 8002b24:	4013      	ands	r3, r2
 8002b26:	d100      	bne.n	8002b2a <HAL_RCC_OscConfig+0x2fe>
 8002b28:	e0c6      	b.n	8002cb8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2a:	231f      	movs	r3, #31
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b32:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2238      	movs	r2, #56	@ 0x38
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d11e      	bne.n	8002b7c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002b3e:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b42:	2202      	movs	r2, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	d100      	bne.n	8002b4a <HAL_RCC_OscConfig+0x31e>
 8002b48:	e0b6      	b.n	8002cb8 <HAL_RCC_OscConfig+0x48c>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d000      	beq.n	8002b54 <HAL_RCC_OscConfig+0x328>
 8002b52:	e0b1      	b.n	8002cb8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e166      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	fffeffff 	.word	0xfffeffff
 8002b60:	fffbffff 	.word	0xfffbffff
 8002b64:	ffff80ff 	.word	0xffff80ff
 8002b68:	ffffc7ff 	.word	0xffffc7ff
 8002b6c:	00f42400 	.word	0x00f42400
 8002b70:	20000000 	.word	0x20000000
 8002b74:	20000004 	.word	0x20000004
 8002b78:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b7c:	4bac      	ldr	r3, [pc, #688]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002b7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b80:	2380      	movs	r3, #128	@ 0x80
 8002b82:	055b      	lsls	r3, r3, #21
 8002b84:	4013      	ands	r3, r2
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_OscConfig+0x360>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <HAL_RCC_OscConfig+0x362>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d011      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	4ba7      	ldr	r3, [pc, #668]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002b94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b96:	4ba6      	ldr	r3, [pc, #664]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002b98:	2180      	movs	r1, #128	@ 0x80
 8002b9a:	0549      	lsls	r1, r1, #21
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ba0:	4ba3      	ldr	r3, [pc, #652]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002ba2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ba4:	2380      	movs	r3, #128	@ 0x80
 8002ba6:	055b      	lsls	r3, r3, #21
 8002ba8:	4013      	ands	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002bae:	231f      	movs	r3, #31
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb6:	4b9f      	ldr	r3, [pc, #636]	@ (8002e34 <HAL_RCC_OscConfig+0x608>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	2380      	movs	r3, #128	@ 0x80
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d11a      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bc2:	4b9c      	ldr	r3, [pc, #624]	@ (8002e34 <HAL_RCC_OscConfig+0x608>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	4b9b      	ldr	r3, [pc, #620]	@ (8002e34 <HAL_RCC_OscConfig+0x608>)
 8002bc8:	2180      	movs	r1, #128	@ 0x80
 8002bca:	0049      	lsls	r1, r1, #1
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002bd0:	f7fe fd0a 	bl	80015e8 <HAL_GetTick>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bda:	f7fe fd05 	bl	80015e8 <HAL_GetTick>
 8002bde:	0002      	movs	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e11c      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bec:	4b91      	ldr	r3, [pc, #580]	@ (8002e34 <HAL_RCC_OscConfig+0x608>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	2380      	movs	r3, #128	@ 0x80
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x3e2>
 8002c00:	4b8b      	ldr	r3, [pc, #556]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002c02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c04:	4b8a      	ldr	r3, [pc, #552]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002c06:	2101      	movs	r1, #1
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c0c:	e01c      	b.n	8002c48 <HAL_RCC_OscConfig+0x41c>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b05      	cmp	r3, #5
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x404>
 8002c16:	4b86      	ldr	r3, [pc, #536]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002c18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c1a:	4b85      	ldr	r3, [pc, #532]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002c1c:	2104      	movs	r1, #4
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c22:	4b83      	ldr	r3, [pc, #524]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002c24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c26:	4b82      	ldr	r3, [pc, #520]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002c28:	2101      	movs	r1, #1
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0x41c>
 8002c30:	4b7f      	ldr	r3, [pc, #508]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002c32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c34:	4b7e      	ldr	r3, [pc, #504]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002c36:	2101      	movs	r1, #1
 8002c38:	438a      	bics	r2, r1
 8002c3a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c3c:	4b7c      	ldr	r3, [pc, #496]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002c3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c40:	4b7b      	ldr	r3, [pc, #492]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002c42:	2104      	movs	r1, #4
 8002c44:	438a      	bics	r2, r1
 8002c46:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d014      	beq.n	8002c7a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fcca 	bl	80015e8 <HAL_GetTick>
 8002c54:	0003      	movs	r3, r0
 8002c56:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c58:	e009      	b.n	8002c6e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fe fcc5 	bl	80015e8 <HAL_GetTick>
 8002c5e:	0002      	movs	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	4a74      	ldr	r2, [pc, #464]	@ (8002e38 <HAL_RCC_OscConfig+0x60c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e0db      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c6e:	4b70      	ldr	r3, [pc, #448]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c72:	2202      	movs	r2, #2
 8002c74:	4013      	ands	r3, r2
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x42e>
 8002c78:	e013      	b.n	8002ca2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7a:	f7fe fcb5 	bl	80015e8 <HAL_GetTick>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c82:	e009      	b.n	8002c98 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c84:	f7fe fcb0 	bl	80015e8 <HAL_GetTick>
 8002c88:	0002      	movs	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	4a6a      	ldr	r2, [pc, #424]	@ (8002e38 <HAL_RCC_OscConfig+0x60c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e0c6      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c98:	4b65      	ldr	r3, [pc, #404]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002ca2:	231f      	movs	r3, #31
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d105      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002cac:	4b60      	ldr	r3, [pc, #384]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002cae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cb0:	4b5f      	ldr	r3, [pc, #380]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002cb2:	4962      	ldr	r1, [pc, #392]	@ (8002e3c <HAL_RCC_OscConfig+0x610>)
 8002cb4:	400a      	ands	r2, r1
 8002cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d100      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x496>
 8002cc0:	e0b0      	b.n	8002e24 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cc2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2238      	movs	r2, #56	@ 0x38
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b10      	cmp	r3, #16
 8002ccc:	d100      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x4a4>
 8002cce:	e078      	b.n	8002dc2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d153      	bne.n	8002d80 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd8:	4b55      	ldr	r3, [pc, #340]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4b54      	ldr	r3, [pc, #336]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002cde:	4958      	ldr	r1, [pc, #352]	@ (8002e40 <HAL_RCC_OscConfig+0x614>)
 8002ce0:	400a      	ands	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fc80 	bl	80015e8 <HAL_GetTick>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cee:	f7fe fc7b 	bl	80015e8 <HAL_GetTick>
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e092      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d00:	4b4b      	ldr	r3, [pc, #300]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	2380      	movs	r3, #128	@ 0x80
 8002d06:	049b      	lsls	r3, r3, #18
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d1f0      	bne.n	8002cee <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d0c:	4b48      	ldr	r3, [pc, #288]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4a4c      	ldr	r2, [pc, #304]	@ (8002e44 <HAL_RCC_OscConfig+0x618>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	0019      	movs	r1, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1a      	ldr	r2, [r3, #32]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	431a      	orrs	r2, r3
 8002d34:	4b3e      	ldr	r3, [pc, #248]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002d36:	430a      	orrs	r2, r1
 8002d38:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002d40:	2180      	movs	r1, #128	@ 0x80
 8002d42:	0449      	lsls	r1, r1, #17
 8002d44:	430a      	orrs	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002d48:	4b39      	ldr	r3, [pc, #228]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	4b38      	ldr	r3, [pc, #224]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002d4e:	2180      	movs	r1, #128	@ 0x80
 8002d50:	0549      	lsls	r1, r1, #21
 8002d52:	430a      	orrs	r2, r1
 8002d54:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7fe fc47 	bl	80015e8 <HAL_GetTick>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d60:	f7fe fc42 	bl	80015e8 <HAL_GetTick>
 8002d64:	0002      	movs	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e059      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d72:	4b2f      	ldr	r3, [pc, #188]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	2380      	movs	r3, #128	@ 0x80
 8002d78:	049b      	lsls	r3, r3, #18
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x534>
 8002d7e:	e051      	b.n	8002e24 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d80:	4b2b      	ldr	r3, [pc, #172]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b2a      	ldr	r3, [pc, #168]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002d86:	492e      	ldr	r1, [pc, #184]	@ (8002e40 <HAL_RCC_OscConfig+0x614>)
 8002d88:	400a      	ands	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fc2c 	bl	80015e8 <HAL_GetTick>
 8002d90:	0003      	movs	r3, r0
 8002d92:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d96:	f7fe fc27 	bl	80015e8 <HAL_GetTick>
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e03e      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da8:	4b21      	ldr	r3, [pc, #132]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	2380      	movs	r3, #128	@ 0x80
 8002dae:	049b      	lsls	r3, r3, #18
 8002db0:	4013      	ands	r3, r2
 8002db2:	d1f0      	bne.n	8002d96 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002db4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002dba:	4923      	ldr	r1, [pc, #140]	@ (8002e48 <HAL_RCC_OscConfig+0x61c>)
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	60da      	str	r2, [r3, #12]
 8002dc0:	e030      	b.n	8002e24 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e02b      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002dce:	4b18      	ldr	r3, [pc, #96]	@ (8002e30 <HAL_RCC_OscConfig+0x604>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	401a      	ands	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d11e      	bne.n	8002e20 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2270      	movs	r2, #112	@ 0x70
 8002de6:	401a      	ands	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d117      	bne.n	8002e20 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	23fe      	movs	r3, #254	@ 0xfe
 8002df4:	01db      	lsls	r3, r3, #7
 8002df6:	401a      	ands	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d10e      	bne.n	8002e20 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	23f8      	movs	r3, #248	@ 0xf8
 8002e06:	039b      	lsls	r3, r3, #14
 8002e08:	401a      	ands	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d106      	bne.n	8002e20 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	0f5b      	lsrs	r3, r3, #29
 8002e16:	075a      	lsls	r2, r3, #29
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	0018      	movs	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b008      	add	sp, #32
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	46c0      	nop			@ (mov r8, r8)
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40007000 	.word	0x40007000
 8002e38:	00001388 	.word	0x00001388
 8002e3c:	efffffff 	.word	0xefffffff
 8002e40:	feffffff 	.word	0xfeffffff
 8002e44:	1fc1808c 	.word	0x1fc1808c
 8002e48:	effefffc 	.word	0xeffefffc

08002e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0e9      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e60:	4b76      	ldr	r3, [pc, #472]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2207      	movs	r2, #7
 8002e66:	4013      	ands	r3, r2
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d91e      	bls.n	8002eac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b73      	ldr	r3, [pc, #460]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2207      	movs	r2, #7
 8002e74:	4393      	bics	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	4b70      	ldr	r3, [pc, #448]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e80:	f7fe fbb2 	bl	80015e8 <HAL_GetTick>
 8002e84:	0003      	movs	r3, r0
 8002e86:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e88:	e009      	b.n	8002e9e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8a:	f7fe fbad 	bl	80015e8 <HAL_GetTick>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	4a6a      	ldr	r2, [pc, #424]	@ (8003040 <HAL_RCC_ClockConfig+0x1f4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e0ca      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e9e:	4b67      	ldr	r3, [pc, #412]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2207      	movs	r2, #7
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d1ee      	bne.n	8002e8a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d015      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2204      	movs	r2, #4
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d006      	beq.n	8002ece <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ec0:	4b60      	ldr	r3, [pc, #384]	@ (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	4b5f      	ldr	r3, [pc, #380]	@ (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002ec6:	21e0      	movs	r1, #224	@ 0xe0
 8002ec8:	01c9      	lsls	r1, r1, #7
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ece:	4b5d      	ldr	r3, [pc, #372]	@ (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	4a5d      	ldr	r2, [pc, #372]	@ (8003048 <HAL_RCC_ClockConfig+0x1fc>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	4b59      	ldr	r3, [pc, #356]	@ (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d057      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ef4:	4b53      	ldr	r3, [pc, #332]	@ (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	2380      	movs	r3, #128	@ 0x80
 8002efa:	029b      	lsls	r3, r3, #10
 8002efc:	4013      	ands	r3, r2
 8002efe:	d12b      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e097      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d107      	bne.n	8002f1c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0c:	4b4d      	ldr	r3, [pc, #308]	@ (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	2380      	movs	r3, #128	@ 0x80
 8002f12:	049b      	lsls	r3, r3, #18
 8002f14:	4013      	ands	r3, r2
 8002f16:	d11f      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e08b      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f24:	4b47      	ldr	r3, [pc, #284]	@ (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	2380      	movs	r3, #128	@ 0x80
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d113      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e07f      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d106      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f3c:	4b41      	ldr	r3, [pc, #260]	@ (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f40:	2202      	movs	r2, #2
 8002f42:	4013      	ands	r3, r2
 8002f44:	d108      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e074      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4e:	2202      	movs	r2, #2
 8002f50:	4013      	ands	r3, r2
 8002f52:	d101      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e06d      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f58:	4b3a      	ldr	r3, [pc, #232]	@ (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2207      	movs	r2, #7
 8002f5e:	4393      	bics	r3, r2
 8002f60:	0019      	movs	r1, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	4b37      	ldr	r3, [pc, #220]	@ (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6c:	f7fe fb3c 	bl	80015e8 <HAL_GetTick>
 8002f70:	0003      	movs	r3, r0
 8002f72:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f74:	e009      	b.n	8002f8a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f76:	f7fe fb37 	bl	80015e8 <HAL_GetTick>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	4a2f      	ldr	r2, [pc, #188]	@ (8003040 <HAL_RCC_ClockConfig+0x1f4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e054      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	4b2e      	ldr	r3, [pc, #184]	@ (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2238      	movs	r2, #56	@ 0x38
 8002f90:	401a      	ands	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d1ec      	bne.n	8002f76 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b27      	ldr	r3, [pc, #156]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2207      	movs	r2, #7
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d21e      	bcs.n	8002fe8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b24      	ldr	r3, [pc, #144]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2207      	movs	r2, #7
 8002fb0:	4393      	bics	r3, r2
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	4b21      	ldr	r3, [pc, #132]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fbc:	f7fe fb14 	bl	80015e8 <HAL_GetTick>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fc4:	e009      	b.n	8002fda <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc6:	f7fe fb0f 	bl	80015e8 <HAL_GetTick>
 8002fca:	0002      	movs	r2, r0
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8003040 <HAL_RCC_ClockConfig+0x1f4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e02c      	b.n	8003034 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fda:	4b18      	ldr	r3, [pc, #96]	@ (800303c <HAL_RCC_ClockConfig+0x1f0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2207      	movs	r2, #7
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d1ee      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2204      	movs	r2, #4
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d009      	beq.n	8003006 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff2:	4b14      	ldr	r3, [pc, #80]	@ (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	4a15      	ldr	r2, [pc, #84]	@ (800304c <HAL_RCC_ClockConfig+0x200>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	4b10      	ldr	r3, [pc, #64]	@ (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 8003002:	430a      	orrs	r2, r1
 8003004:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003006:	f000 f829 	bl	800305c <HAL_RCC_GetSysClockFreq>
 800300a:	0001      	movs	r1, r0
 800300c:	4b0d      	ldr	r3, [pc, #52]	@ (8003044 <HAL_RCC_ClockConfig+0x1f8>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	220f      	movs	r2, #15
 8003014:	401a      	ands	r2, r3
 8003016:	4b0e      	ldr	r3, [pc, #56]	@ (8003050 <HAL_RCC_ClockConfig+0x204>)
 8003018:	0092      	lsls	r2, r2, #2
 800301a:	58d3      	ldr	r3, [r2, r3]
 800301c:	221f      	movs	r2, #31
 800301e:	4013      	ands	r3, r2
 8003020:	000a      	movs	r2, r1
 8003022:	40da      	lsrs	r2, r3
 8003024:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <HAL_RCC_ClockConfig+0x208>)
 8003026:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003028:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <HAL_RCC_ClockConfig+0x20c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0018      	movs	r0, r3
 800302e:	f7fe fa7f 	bl	8001530 <HAL_InitTick>
 8003032:	0003      	movs	r3, r0
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b004      	add	sp, #16
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40022000 	.word	0x40022000
 8003040:	00001388 	.word	0x00001388
 8003044:	40021000 	.word	0x40021000
 8003048:	fffff0ff 	.word	0xfffff0ff
 800304c:	ffff8fff 	.word	0xffff8fff
 8003050:	08003bac 	.word	0x08003bac
 8003054:	20000000 	.word	0x20000000
 8003058:	20000004 	.word	0x20000004

0800305c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003062:	4b3c      	ldr	r3, [pc, #240]	@ (8003154 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2238      	movs	r2, #56	@ 0x38
 8003068:	4013      	ands	r3, r2
 800306a:	d10f      	bne.n	800308c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800306c:	4b39      	ldr	r3, [pc, #228]	@ (8003154 <HAL_RCC_GetSysClockFreq+0xf8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	0adb      	lsrs	r3, r3, #11
 8003072:	2207      	movs	r2, #7
 8003074:	4013      	ands	r3, r2
 8003076:	2201      	movs	r2, #1
 8003078:	409a      	lsls	r2, r3
 800307a:	0013      	movs	r3, r2
 800307c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800307e:	6839      	ldr	r1, [r7, #0]
 8003080:	4835      	ldr	r0, [pc, #212]	@ (8003158 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003082:	f7fd f83d 	bl	8000100 <__udivsi3>
 8003086:	0003      	movs	r3, r0
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	e05d      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800308c:	4b31      	ldr	r3, [pc, #196]	@ (8003154 <HAL_RCC_GetSysClockFreq+0xf8>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2238      	movs	r2, #56	@ 0x38
 8003092:	4013      	ands	r3, r2
 8003094:	2b08      	cmp	r3, #8
 8003096:	d102      	bne.n	800309e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003098:	4b30      	ldr	r3, [pc, #192]	@ (800315c <HAL_RCC_GetSysClockFreq+0x100>)
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	e054      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800309e:	4b2d      	ldr	r3, [pc, #180]	@ (8003154 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2238      	movs	r2, #56	@ 0x38
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b10      	cmp	r3, #16
 80030a8:	d138      	bne.n	800311c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80030aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003154 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	2203      	movs	r2, #3
 80030b0:	4013      	ands	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030b4:	4b27      	ldr	r3, [pc, #156]	@ (8003154 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	2207      	movs	r2, #7
 80030bc:	4013      	ands	r3, r2
 80030be:	3301      	adds	r3, #1
 80030c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d10d      	bne.n	80030e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030c8:	68b9      	ldr	r1, [r7, #8]
 80030ca:	4824      	ldr	r0, [pc, #144]	@ (800315c <HAL_RCC_GetSysClockFreq+0x100>)
 80030cc:	f7fd f818 	bl	8000100 <__udivsi3>
 80030d0:	0003      	movs	r3, r0
 80030d2:	0019      	movs	r1, r3
 80030d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003154 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	227f      	movs	r2, #127	@ 0x7f
 80030dc:	4013      	ands	r3, r2
 80030de:	434b      	muls	r3, r1
 80030e0:	617b      	str	r3, [r7, #20]
        break;
 80030e2:	e00d      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	481c      	ldr	r0, [pc, #112]	@ (8003158 <HAL_RCC_GetSysClockFreq+0xfc>)
 80030e8:	f7fd f80a 	bl	8000100 <__udivsi3>
 80030ec:	0003      	movs	r3, r0
 80030ee:	0019      	movs	r1, r3
 80030f0:	4b18      	ldr	r3, [pc, #96]	@ (8003154 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	0a1b      	lsrs	r3, r3, #8
 80030f6:	227f      	movs	r2, #127	@ 0x7f
 80030f8:	4013      	ands	r3, r2
 80030fa:	434b      	muls	r3, r1
 80030fc:	617b      	str	r3, [r7, #20]
        break;
 80030fe:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003100:	4b14      	ldr	r3, [pc, #80]	@ (8003154 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	0f5b      	lsrs	r3, r3, #29
 8003106:	2207      	movs	r2, #7
 8003108:	4013      	ands	r3, r2
 800310a:	3301      	adds	r3, #1
 800310c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	6978      	ldr	r0, [r7, #20]
 8003112:	f7fc fff5 	bl	8000100 <__udivsi3>
 8003116:	0003      	movs	r3, r0
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	e015      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800311c:	4b0d      	ldr	r3, [pc, #52]	@ (8003154 <HAL_RCC_GetSysClockFreq+0xf8>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2238      	movs	r2, #56	@ 0x38
 8003122:	4013      	ands	r3, r2
 8003124:	2b20      	cmp	r3, #32
 8003126:	d103      	bne.n	8003130 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003128:	2380      	movs	r3, #128	@ 0x80
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	e00b      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003130:	4b08      	ldr	r3, [pc, #32]	@ (8003154 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2238      	movs	r2, #56	@ 0x38
 8003136:	4013      	ands	r3, r2
 8003138:	2b18      	cmp	r3, #24
 800313a:	d103      	bne.n	8003144 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800313c:	23fa      	movs	r3, #250	@ 0xfa
 800313e:	01db      	lsls	r3, r3, #7
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	e001      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003148:	693b      	ldr	r3, [r7, #16]
}
 800314a:	0018      	movs	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	b006      	add	sp, #24
 8003150:	bd80      	pop	{r7, pc}
 8003152:	46c0      	nop			@ (mov r8, r8)
 8003154:	40021000 	.word	0x40021000
 8003158:	00f42400 	.word	0x00f42400
 800315c:	007a1200 	.word	0x007a1200

08003160 <std>:
 8003160:	2300      	movs	r3, #0
 8003162:	b510      	push	{r4, lr}
 8003164:	0004      	movs	r4, r0
 8003166:	6003      	str	r3, [r0, #0]
 8003168:	6043      	str	r3, [r0, #4]
 800316a:	6083      	str	r3, [r0, #8]
 800316c:	8181      	strh	r1, [r0, #12]
 800316e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003170:	81c2      	strh	r2, [r0, #14]
 8003172:	6103      	str	r3, [r0, #16]
 8003174:	6143      	str	r3, [r0, #20]
 8003176:	6183      	str	r3, [r0, #24]
 8003178:	0019      	movs	r1, r3
 800317a:	2208      	movs	r2, #8
 800317c:	305c      	adds	r0, #92	@ 0x5c
 800317e:	f000 f9ff 	bl	8003580 <memset>
 8003182:	4b0b      	ldr	r3, [pc, #44]	@ (80031b0 <std+0x50>)
 8003184:	6224      	str	r4, [r4, #32]
 8003186:	6263      	str	r3, [r4, #36]	@ 0x24
 8003188:	4b0a      	ldr	r3, [pc, #40]	@ (80031b4 <std+0x54>)
 800318a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800318c:	4b0a      	ldr	r3, [pc, #40]	@ (80031b8 <std+0x58>)
 800318e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003190:	4b0a      	ldr	r3, [pc, #40]	@ (80031bc <std+0x5c>)
 8003192:	6323      	str	r3, [r4, #48]	@ 0x30
 8003194:	4b0a      	ldr	r3, [pc, #40]	@ (80031c0 <std+0x60>)
 8003196:	429c      	cmp	r4, r3
 8003198:	d005      	beq.n	80031a6 <std+0x46>
 800319a:	4b0a      	ldr	r3, [pc, #40]	@ (80031c4 <std+0x64>)
 800319c:	429c      	cmp	r4, r3
 800319e:	d002      	beq.n	80031a6 <std+0x46>
 80031a0:	4b09      	ldr	r3, [pc, #36]	@ (80031c8 <std+0x68>)
 80031a2:	429c      	cmp	r4, r3
 80031a4:	d103      	bne.n	80031ae <std+0x4e>
 80031a6:	0020      	movs	r0, r4
 80031a8:	3058      	adds	r0, #88	@ 0x58
 80031aa:	f000 fa69 	bl	8003680 <__retarget_lock_init_recursive>
 80031ae:	bd10      	pop	{r4, pc}
 80031b0:	080033a9 	.word	0x080033a9
 80031b4:	080033d1 	.word	0x080033d1
 80031b8:	08003409 	.word	0x08003409
 80031bc:	08003435 	.word	0x08003435
 80031c0:	20000118 	.word	0x20000118
 80031c4:	20000180 	.word	0x20000180
 80031c8:	200001e8 	.word	0x200001e8

080031cc <stdio_exit_handler>:
 80031cc:	b510      	push	{r4, lr}
 80031ce:	4a03      	ldr	r2, [pc, #12]	@ (80031dc <stdio_exit_handler+0x10>)
 80031d0:	4903      	ldr	r1, [pc, #12]	@ (80031e0 <stdio_exit_handler+0x14>)
 80031d2:	4804      	ldr	r0, [pc, #16]	@ (80031e4 <stdio_exit_handler+0x18>)
 80031d4:	f000 f86c 	bl	80032b0 <_fwalk_sglue>
 80031d8:	bd10      	pop	{r4, pc}
 80031da:	46c0      	nop			@ (mov r8, r8)
 80031dc:	2000000c 	.word	0x2000000c
 80031e0:	0800398d 	.word	0x0800398d
 80031e4:	2000001c 	.word	0x2000001c

080031e8 <cleanup_stdio>:
 80031e8:	6841      	ldr	r1, [r0, #4]
 80031ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <cleanup_stdio+0x30>)
 80031ec:	b510      	push	{r4, lr}
 80031ee:	0004      	movs	r4, r0
 80031f0:	4299      	cmp	r1, r3
 80031f2:	d001      	beq.n	80031f8 <cleanup_stdio+0x10>
 80031f4:	f000 fbca 	bl	800398c <_fflush_r>
 80031f8:	68a1      	ldr	r1, [r4, #8]
 80031fa:	4b08      	ldr	r3, [pc, #32]	@ (800321c <cleanup_stdio+0x34>)
 80031fc:	4299      	cmp	r1, r3
 80031fe:	d002      	beq.n	8003206 <cleanup_stdio+0x1e>
 8003200:	0020      	movs	r0, r4
 8003202:	f000 fbc3 	bl	800398c <_fflush_r>
 8003206:	68e1      	ldr	r1, [r4, #12]
 8003208:	4b05      	ldr	r3, [pc, #20]	@ (8003220 <cleanup_stdio+0x38>)
 800320a:	4299      	cmp	r1, r3
 800320c:	d002      	beq.n	8003214 <cleanup_stdio+0x2c>
 800320e:	0020      	movs	r0, r4
 8003210:	f000 fbbc 	bl	800398c <_fflush_r>
 8003214:	bd10      	pop	{r4, pc}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	20000118 	.word	0x20000118
 800321c:	20000180 	.word	0x20000180
 8003220:	200001e8 	.word	0x200001e8

08003224 <global_stdio_init.part.0>:
 8003224:	b510      	push	{r4, lr}
 8003226:	4b09      	ldr	r3, [pc, #36]	@ (800324c <global_stdio_init.part.0+0x28>)
 8003228:	4a09      	ldr	r2, [pc, #36]	@ (8003250 <global_stdio_init.part.0+0x2c>)
 800322a:	2104      	movs	r1, #4
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	4809      	ldr	r0, [pc, #36]	@ (8003254 <global_stdio_init.part.0+0x30>)
 8003230:	2200      	movs	r2, #0
 8003232:	f7ff ff95 	bl	8003160 <std>
 8003236:	2201      	movs	r2, #1
 8003238:	2109      	movs	r1, #9
 800323a:	4807      	ldr	r0, [pc, #28]	@ (8003258 <global_stdio_init.part.0+0x34>)
 800323c:	f7ff ff90 	bl	8003160 <std>
 8003240:	2202      	movs	r2, #2
 8003242:	2112      	movs	r1, #18
 8003244:	4805      	ldr	r0, [pc, #20]	@ (800325c <global_stdio_init.part.0+0x38>)
 8003246:	f7ff ff8b 	bl	8003160 <std>
 800324a:	bd10      	pop	{r4, pc}
 800324c:	20000250 	.word	0x20000250
 8003250:	080031cd 	.word	0x080031cd
 8003254:	20000118 	.word	0x20000118
 8003258:	20000180 	.word	0x20000180
 800325c:	200001e8 	.word	0x200001e8

08003260 <__sfp_lock_acquire>:
 8003260:	b510      	push	{r4, lr}
 8003262:	4802      	ldr	r0, [pc, #8]	@ (800326c <__sfp_lock_acquire+0xc>)
 8003264:	f000 fa0d 	bl	8003682 <__retarget_lock_acquire_recursive>
 8003268:	bd10      	pop	{r4, pc}
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	20000259 	.word	0x20000259

08003270 <__sfp_lock_release>:
 8003270:	b510      	push	{r4, lr}
 8003272:	4802      	ldr	r0, [pc, #8]	@ (800327c <__sfp_lock_release+0xc>)
 8003274:	f000 fa06 	bl	8003684 <__retarget_lock_release_recursive>
 8003278:	bd10      	pop	{r4, pc}
 800327a:	46c0      	nop			@ (mov r8, r8)
 800327c:	20000259 	.word	0x20000259

08003280 <__sinit>:
 8003280:	b510      	push	{r4, lr}
 8003282:	0004      	movs	r4, r0
 8003284:	f7ff ffec 	bl	8003260 <__sfp_lock_acquire>
 8003288:	6a23      	ldr	r3, [r4, #32]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <__sinit+0x14>
 800328e:	f7ff ffef 	bl	8003270 <__sfp_lock_release>
 8003292:	bd10      	pop	{r4, pc}
 8003294:	4b04      	ldr	r3, [pc, #16]	@ (80032a8 <__sinit+0x28>)
 8003296:	6223      	str	r3, [r4, #32]
 8003298:	4b04      	ldr	r3, [pc, #16]	@ (80032ac <__sinit+0x2c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f6      	bne.n	800328e <__sinit+0xe>
 80032a0:	f7ff ffc0 	bl	8003224 <global_stdio_init.part.0>
 80032a4:	e7f3      	b.n	800328e <__sinit+0xe>
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	080031e9 	.word	0x080031e9
 80032ac:	20000250 	.word	0x20000250

080032b0 <_fwalk_sglue>:
 80032b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032b2:	0014      	movs	r4, r2
 80032b4:	2600      	movs	r6, #0
 80032b6:	9000      	str	r0, [sp, #0]
 80032b8:	9101      	str	r1, [sp, #4]
 80032ba:	68a5      	ldr	r5, [r4, #8]
 80032bc:	6867      	ldr	r7, [r4, #4]
 80032be:	3f01      	subs	r7, #1
 80032c0:	d504      	bpl.n	80032cc <_fwalk_sglue+0x1c>
 80032c2:	6824      	ldr	r4, [r4, #0]
 80032c4:	2c00      	cmp	r4, #0
 80032c6:	d1f8      	bne.n	80032ba <_fwalk_sglue+0xa>
 80032c8:	0030      	movs	r0, r6
 80032ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80032cc:	89ab      	ldrh	r3, [r5, #12]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d908      	bls.n	80032e4 <_fwalk_sglue+0x34>
 80032d2:	220e      	movs	r2, #14
 80032d4:	5eab      	ldrsh	r3, [r5, r2]
 80032d6:	3301      	adds	r3, #1
 80032d8:	d004      	beq.n	80032e4 <_fwalk_sglue+0x34>
 80032da:	0029      	movs	r1, r5
 80032dc:	9800      	ldr	r0, [sp, #0]
 80032de:	9b01      	ldr	r3, [sp, #4]
 80032e0:	4798      	blx	r3
 80032e2:	4306      	orrs	r6, r0
 80032e4:	3568      	adds	r5, #104	@ 0x68
 80032e6:	e7ea      	b.n	80032be <_fwalk_sglue+0xe>

080032e8 <_puts_r>:
 80032e8:	6a03      	ldr	r3, [r0, #32]
 80032ea:	b570      	push	{r4, r5, r6, lr}
 80032ec:	0005      	movs	r5, r0
 80032ee:	000e      	movs	r6, r1
 80032f0:	6884      	ldr	r4, [r0, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <_puts_r+0x12>
 80032f6:	f7ff ffc3 	bl	8003280 <__sinit>
 80032fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80032fc:	07db      	lsls	r3, r3, #31
 80032fe:	d405      	bmi.n	800330c <_puts_r+0x24>
 8003300:	89a3      	ldrh	r3, [r4, #12]
 8003302:	059b      	lsls	r3, r3, #22
 8003304:	d402      	bmi.n	800330c <_puts_r+0x24>
 8003306:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003308:	f000 f9bb 	bl	8003682 <__retarget_lock_acquire_recursive>
 800330c:	89a3      	ldrh	r3, [r4, #12]
 800330e:	071b      	lsls	r3, r3, #28
 8003310:	d502      	bpl.n	8003318 <_puts_r+0x30>
 8003312:	6923      	ldr	r3, [r4, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d11f      	bne.n	8003358 <_puts_r+0x70>
 8003318:	0021      	movs	r1, r4
 800331a:	0028      	movs	r0, r5
 800331c:	f000 f8d2 	bl	80034c4 <__swsetup_r>
 8003320:	2800      	cmp	r0, #0
 8003322:	d019      	beq.n	8003358 <_puts_r+0x70>
 8003324:	2501      	movs	r5, #1
 8003326:	426d      	negs	r5, r5
 8003328:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800332a:	07db      	lsls	r3, r3, #31
 800332c:	d405      	bmi.n	800333a <_puts_r+0x52>
 800332e:	89a3      	ldrh	r3, [r4, #12]
 8003330:	059b      	lsls	r3, r3, #22
 8003332:	d402      	bmi.n	800333a <_puts_r+0x52>
 8003334:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003336:	f000 f9a5 	bl	8003684 <__retarget_lock_release_recursive>
 800333a:	0028      	movs	r0, r5
 800333c:	bd70      	pop	{r4, r5, r6, pc}
 800333e:	3601      	adds	r6, #1
 8003340:	60a3      	str	r3, [r4, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	da04      	bge.n	8003350 <_puts_r+0x68>
 8003346:	69a2      	ldr	r2, [r4, #24]
 8003348:	429a      	cmp	r2, r3
 800334a:	dc16      	bgt.n	800337a <_puts_r+0x92>
 800334c:	290a      	cmp	r1, #10
 800334e:	d014      	beq.n	800337a <_puts_r+0x92>
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	6022      	str	r2, [r4, #0]
 8003356:	7019      	strb	r1, [r3, #0]
 8003358:	68a3      	ldr	r3, [r4, #8]
 800335a:	7831      	ldrb	r1, [r6, #0]
 800335c:	3b01      	subs	r3, #1
 800335e:	2900      	cmp	r1, #0
 8003360:	d1ed      	bne.n	800333e <_puts_r+0x56>
 8003362:	60a3      	str	r3, [r4, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	da0f      	bge.n	8003388 <_puts_r+0xa0>
 8003368:	0022      	movs	r2, r4
 800336a:	0028      	movs	r0, r5
 800336c:	310a      	adds	r1, #10
 800336e:	f000 f867 	bl	8003440 <__swbuf_r>
 8003372:	3001      	adds	r0, #1
 8003374:	d0d6      	beq.n	8003324 <_puts_r+0x3c>
 8003376:	250a      	movs	r5, #10
 8003378:	e7d6      	b.n	8003328 <_puts_r+0x40>
 800337a:	0022      	movs	r2, r4
 800337c:	0028      	movs	r0, r5
 800337e:	f000 f85f 	bl	8003440 <__swbuf_r>
 8003382:	3001      	adds	r0, #1
 8003384:	d1e8      	bne.n	8003358 <_puts_r+0x70>
 8003386:	e7cd      	b.n	8003324 <_puts_r+0x3c>
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	6022      	str	r2, [r4, #0]
 800338e:	220a      	movs	r2, #10
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e7f0      	b.n	8003376 <_puts_r+0x8e>

08003394 <puts>:
 8003394:	b510      	push	{r4, lr}
 8003396:	4b03      	ldr	r3, [pc, #12]	@ (80033a4 <puts+0x10>)
 8003398:	0001      	movs	r1, r0
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	f7ff ffa4 	bl	80032e8 <_puts_r>
 80033a0:	bd10      	pop	{r4, pc}
 80033a2:	46c0      	nop			@ (mov r8, r8)
 80033a4:	20000018 	.word	0x20000018

080033a8 <__sread>:
 80033a8:	b570      	push	{r4, r5, r6, lr}
 80033aa:	000c      	movs	r4, r1
 80033ac:	250e      	movs	r5, #14
 80033ae:	5f49      	ldrsh	r1, [r1, r5]
 80033b0:	f000 f914 	bl	80035dc <_read_r>
 80033b4:	2800      	cmp	r0, #0
 80033b6:	db03      	blt.n	80033c0 <__sread+0x18>
 80033b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80033ba:	181b      	adds	r3, r3, r0
 80033bc:	6563      	str	r3, [r4, #84]	@ 0x54
 80033be:	bd70      	pop	{r4, r5, r6, pc}
 80033c0:	89a3      	ldrh	r3, [r4, #12]
 80033c2:	4a02      	ldr	r2, [pc, #8]	@ (80033cc <__sread+0x24>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	81a3      	strh	r3, [r4, #12]
 80033c8:	e7f9      	b.n	80033be <__sread+0x16>
 80033ca:	46c0      	nop			@ (mov r8, r8)
 80033cc:	ffffefff 	.word	0xffffefff

080033d0 <__swrite>:
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d2:	001f      	movs	r7, r3
 80033d4:	898b      	ldrh	r3, [r1, #12]
 80033d6:	0005      	movs	r5, r0
 80033d8:	000c      	movs	r4, r1
 80033da:	0016      	movs	r6, r2
 80033dc:	05db      	lsls	r3, r3, #23
 80033de:	d505      	bpl.n	80033ec <__swrite+0x1c>
 80033e0:	230e      	movs	r3, #14
 80033e2:	5ec9      	ldrsh	r1, [r1, r3]
 80033e4:	2200      	movs	r2, #0
 80033e6:	2302      	movs	r3, #2
 80033e8:	f000 f8e4 	bl	80035b4 <_lseek_r>
 80033ec:	89a3      	ldrh	r3, [r4, #12]
 80033ee:	4a05      	ldr	r2, [pc, #20]	@ (8003404 <__swrite+0x34>)
 80033f0:	0028      	movs	r0, r5
 80033f2:	4013      	ands	r3, r2
 80033f4:	81a3      	strh	r3, [r4, #12]
 80033f6:	0032      	movs	r2, r6
 80033f8:	230e      	movs	r3, #14
 80033fa:	5ee1      	ldrsh	r1, [r4, r3]
 80033fc:	003b      	movs	r3, r7
 80033fe:	f000 f901 	bl	8003604 <_write_r>
 8003402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003404:	ffffefff 	.word	0xffffefff

08003408 <__sseek>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	000c      	movs	r4, r1
 800340c:	250e      	movs	r5, #14
 800340e:	5f49      	ldrsh	r1, [r1, r5]
 8003410:	f000 f8d0 	bl	80035b4 <_lseek_r>
 8003414:	89a3      	ldrh	r3, [r4, #12]
 8003416:	1c42      	adds	r2, r0, #1
 8003418:	d103      	bne.n	8003422 <__sseek+0x1a>
 800341a:	4a05      	ldr	r2, [pc, #20]	@ (8003430 <__sseek+0x28>)
 800341c:	4013      	ands	r3, r2
 800341e:	81a3      	strh	r3, [r4, #12]
 8003420:	bd70      	pop	{r4, r5, r6, pc}
 8003422:	2280      	movs	r2, #128	@ 0x80
 8003424:	0152      	lsls	r2, r2, #5
 8003426:	4313      	orrs	r3, r2
 8003428:	81a3      	strh	r3, [r4, #12]
 800342a:	6560      	str	r0, [r4, #84]	@ 0x54
 800342c:	e7f8      	b.n	8003420 <__sseek+0x18>
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	ffffefff 	.word	0xffffefff

08003434 <__sclose>:
 8003434:	b510      	push	{r4, lr}
 8003436:	230e      	movs	r3, #14
 8003438:	5ec9      	ldrsh	r1, [r1, r3]
 800343a:	f000 f8a9 	bl	8003590 <_close_r>
 800343e:	bd10      	pop	{r4, pc}

08003440 <__swbuf_r>:
 8003440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003442:	0006      	movs	r6, r0
 8003444:	000d      	movs	r5, r1
 8003446:	0014      	movs	r4, r2
 8003448:	2800      	cmp	r0, #0
 800344a:	d004      	beq.n	8003456 <__swbuf_r+0x16>
 800344c:	6a03      	ldr	r3, [r0, #32]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <__swbuf_r+0x16>
 8003452:	f7ff ff15 	bl	8003280 <__sinit>
 8003456:	69a3      	ldr	r3, [r4, #24]
 8003458:	60a3      	str	r3, [r4, #8]
 800345a:	89a3      	ldrh	r3, [r4, #12]
 800345c:	071b      	lsls	r3, r3, #28
 800345e:	d502      	bpl.n	8003466 <__swbuf_r+0x26>
 8003460:	6923      	ldr	r3, [r4, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <__swbuf_r+0x3a>
 8003466:	0021      	movs	r1, r4
 8003468:	0030      	movs	r0, r6
 800346a:	f000 f82b 	bl	80034c4 <__swsetup_r>
 800346e:	2800      	cmp	r0, #0
 8003470:	d003      	beq.n	800347a <__swbuf_r+0x3a>
 8003472:	2501      	movs	r5, #1
 8003474:	426d      	negs	r5, r5
 8003476:	0028      	movs	r0, r5
 8003478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800347a:	6923      	ldr	r3, [r4, #16]
 800347c:	6820      	ldr	r0, [r4, #0]
 800347e:	b2ef      	uxtb	r7, r5
 8003480:	1ac0      	subs	r0, r0, r3
 8003482:	6963      	ldr	r3, [r4, #20]
 8003484:	b2ed      	uxtb	r5, r5
 8003486:	4283      	cmp	r3, r0
 8003488:	dc05      	bgt.n	8003496 <__swbuf_r+0x56>
 800348a:	0021      	movs	r1, r4
 800348c:	0030      	movs	r0, r6
 800348e:	f000 fa7d 	bl	800398c <_fflush_r>
 8003492:	2800      	cmp	r0, #0
 8003494:	d1ed      	bne.n	8003472 <__swbuf_r+0x32>
 8003496:	68a3      	ldr	r3, [r4, #8]
 8003498:	3001      	adds	r0, #1
 800349a:	3b01      	subs	r3, #1
 800349c:	60a3      	str	r3, [r4, #8]
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	6022      	str	r2, [r4, #0]
 80034a4:	701f      	strb	r7, [r3, #0]
 80034a6:	6963      	ldr	r3, [r4, #20]
 80034a8:	4283      	cmp	r3, r0
 80034aa:	d004      	beq.n	80034b6 <__swbuf_r+0x76>
 80034ac:	89a3      	ldrh	r3, [r4, #12]
 80034ae:	07db      	lsls	r3, r3, #31
 80034b0:	d5e1      	bpl.n	8003476 <__swbuf_r+0x36>
 80034b2:	2d0a      	cmp	r5, #10
 80034b4:	d1df      	bne.n	8003476 <__swbuf_r+0x36>
 80034b6:	0021      	movs	r1, r4
 80034b8:	0030      	movs	r0, r6
 80034ba:	f000 fa67 	bl	800398c <_fflush_r>
 80034be:	2800      	cmp	r0, #0
 80034c0:	d0d9      	beq.n	8003476 <__swbuf_r+0x36>
 80034c2:	e7d6      	b.n	8003472 <__swbuf_r+0x32>

080034c4 <__swsetup_r>:
 80034c4:	4b2d      	ldr	r3, [pc, #180]	@ (800357c <__swsetup_r+0xb8>)
 80034c6:	b570      	push	{r4, r5, r6, lr}
 80034c8:	0005      	movs	r5, r0
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	000c      	movs	r4, r1
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d004      	beq.n	80034dc <__swsetup_r+0x18>
 80034d2:	6a03      	ldr	r3, [r0, #32]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <__swsetup_r+0x18>
 80034d8:	f7ff fed2 	bl	8003280 <__sinit>
 80034dc:	230c      	movs	r3, #12
 80034de:	5ee2      	ldrsh	r2, [r4, r3]
 80034e0:	0713      	lsls	r3, r2, #28
 80034e2:	d423      	bmi.n	800352c <__swsetup_r+0x68>
 80034e4:	06d3      	lsls	r3, r2, #27
 80034e6:	d407      	bmi.n	80034f8 <__swsetup_r+0x34>
 80034e8:	2309      	movs	r3, #9
 80034ea:	602b      	str	r3, [r5, #0]
 80034ec:	2340      	movs	r3, #64	@ 0x40
 80034ee:	2001      	movs	r0, #1
 80034f0:	4313      	orrs	r3, r2
 80034f2:	81a3      	strh	r3, [r4, #12]
 80034f4:	4240      	negs	r0, r0
 80034f6:	e03a      	b.n	800356e <__swsetup_r+0xaa>
 80034f8:	0752      	lsls	r2, r2, #29
 80034fa:	d513      	bpl.n	8003524 <__swsetup_r+0x60>
 80034fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80034fe:	2900      	cmp	r1, #0
 8003500:	d008      	beq.n	8003514 <__swsetup_r+0x50>
 8003502:	0023      	movs	r3, r4
 8003504:	3344      	adds	r3, #68	@ 0x44
 8003506:	4299      	cmp	r1, r3
 8003508:	d002      	beq.n	8003510 <__swsetup_r+0x4c>
 800350a:	0028      	movs	r0, r5
 800350c:	f000 f8bc 	bl	8003688 <_free_r>
 8003510:	2300      	movs	r3, #0
 8003512:	6363      	str	r3, [r4, #52]	@ 0x34
 8003514:	2224      	movs	r2, #36	@ 0x24
 8003516:	89a3      	ldrh	r3, [r4, #12]
 8003518:	4393      	bics	r3, r2
 800351a:	81a3      	strh	r3, [r4, #12]
 800351c:	2300      	movs	r3, #0
 800351e:	6063      	str	r3, [r4, #4]
 8003520:	6923      	ldr	r3, [r4, #16]
 8003522:	6023      	str	r3, [r4, #0]
 8003524:	2308      	movs	r3, #8
 8003526:	89a2      	ldrh	r2, [r4, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	81a3      	strh	r3, [r4, #12]
 800352c:	6923      	ldr	r3, [r4, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10b      	bne.n	800354a <__swsetup_r+0x86>
 8003532:	21a0      	movs	r1, #160	@ 0xa0
 8003534:	2280      	movs	r2, #128	@ 0x80
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	0089      	lsls	r1, r1, #2
 800353a:	0092      	lsls	r2, r2, #2
 800353c:	400b      	ands	r3, r1
 800353e:	4293      	cmp	r3, r2
 8003540:	d003      	beq.n	800354a <__swsetup_r+0x86>
 8003542:	0021      	movs	r1, r4
 8003544:	0028      	movs	r0, r5
 8003546:	f000 fa77 	bl	8003a38 <__smakebuf_r>
 800354a:	230c      	movs	r3, #12
 800354c:	5ee2      	ldrsh	r2, [r4, r3]
 800354e:	2101      	movs	r1, #1
 8003550:	0013      	movs	r3, r2
 8003552:	400b      	ands	r3, r1
 8003554:	420a      	tst	r2, r1
 8003556:	d00b      	beq.n	8003570 <__swsetup_r+0xac>
 8003558:	2300      	movs	r3, #0
 800355a:	60a3      	str	r3, [r4, #8]
 800355c:	6963      	ldr	r3, [r4, #20]
 800355e:	425b      	negs	r3, r3
 8003560:	61a3      	str	r3, [r4, #24]
 8003562:	2000      	movs	r0, #0
 8003564:	6923      	ldr	r3, [r4, #16]
 8003566:	4283      	cmp	r3, r0
 8003568:	d101      	bne.n	800356e <__swsetup_r+0xaa>
 800356a:	0613      	lsls	r3, r2, #24
 800356c:	d4be      	bmi.n	80034ec <__swsetup_r+0x28>
 800356e:	bd70      	pop	{r4, r5, r6, pc}
 8003570:	0791      	lsls	r1, r2, #30
 8003572:	d400      	bmi.n	8003576 <__swsetup_r+0xb2>
 8003574:	6963      	ldr	r3, [r4, #20]
 8003576:	60a3      	str	r3, [r4, #8]
 8003578:	e7f3      	b.n	8003562 <__swsetup_r+0x9e>
 800357a:	46c0      	nop			@ (mov r8, r8)
 800357c:	20000018 	.word	0x20000018

08003580 <memset>:
 8003580:	0003      	movs	r3, r0
 8003582:	1882      	adds	r2, r0, r2
 8003584:	4293      	cmp	r3, r2
 8003586:	d100      	bne.n	800358a <memset+0xa>
 8003588:	4770      	bx	lr
 800358a:	7019      	strb	r1, [r3, #0]
 800358c:	3301      	adds	r3, #1
 800358e:	e7f9      	b.n	8003584 <memset+0x4>

08003590 <_close_r>:
 8003590:	2300      	movs	r3, #0
 8003592:	b570      	push	{r4, r5, r6, lr}
 8003594:	4d06      	ldr	r5, [pc, #24]	@ (80035b0 <_close_r+0x20>)
 8003596:	0004      	movs	r4, r0
 8003598:	0008      	movs	r0, r1
 800359a:	602b      	str	r3, [r5, #0]
 800359c:	f7fd ff16 	bl	80013cc <_close>
 80035a0:	1c43      	adds	r3, r0, #1
 80035a2:	d103      	bne.n	80035ac <_close_r+0x1c>
 80035a4:	682b      	ldr	r3, [r5, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d000      	beq.n	80035ac <_close_r+0x1c>
 80035aa:	6023      	str	r3, [r4, #0]
 80035ac:	bd70      	pop	{r4, r5, r6, pc}
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	20000254 	.word	0x20000254

080035b4 <_lseek_r>:
 80035b4:	b570      	push	{r4, r5, r6, lr}
 80035b6:	0004      	movs	r4, r0
 80035b8:	0008      	movs	r0, r1
 80035ba:	0011      	movs	r1, r2
 80035bc:	001a      	movs	r2, r3
 80035be:	2300      	movs	r3, #0
 80035c0:	4d05      	ldr	r5, [pc, #20]	@ (80035d8 <_lseek_r+0x24>)
 80035c2:	602b      	str	r3, [r5, #0]
 80035c4:	f7fd ff23 	bl	800140e <_lseek>
 80035c8:	1c43      	adds	r3, r0, #1
 80035ca:	d103      	bne.n	80035d4 <_lseek_r+0x20>
 80035cc:	682b      	ldr	r3, [r5, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d000      	beq.n	80035d4 <_lseek_r+0x20>
 80035d2:	6023      	str	r3, [r4, #0]
 80035d4:	bd70      	pop	{r4, r5, r6, pc}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	20000254 	.word	0x20000254

080035dc <_read_r>:
 80035dc:	b570      	push	{r4, r5, r6, lr}
 80035de:	0004      	movs	r4, r0
 80035e0:	0008      	movs	r0, r1
 80035e2:	0011      	movs	r1, r2
 80035e4:	001a      	movs	r2, r3
 80035e6:	2300      	movs	r3, #0
 80035e8:	4d05      	ldr	r5, [pc, #20]	@ (8003600 <_read_r+0x24>)
 80035ea:	602b      	str	r3, [r5, #0]
 80035ec:	f7fd feb5 	bl	800135a <_read>
 80035f0:	1c43      	adds	r3, r0, #1
 80035f2:	d103      	bne.n	80035fc <_read_r+0x20>
 80035f4:	682b      	ldr	r3, [r5, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d000      	beq.n	80035fc <_read_r+0x20>
 80035fa:	6023      	str	r3, [r4, #0]
 80035fc:	bd70      	pop	{r4, r5, r6, pc}
 80035fe:	46c0      	nop			@ (mov r8, r8)
 8003600:	20000254 	.word	0x20000254

08003604 <_write_r>:
 8003604:	b570      	push	{r4, r5, r6, lr}
 8003606:	0004      	movs	r4, r0
 8003608:	0008      	movs	r0, r1
 800360a:	0011      	movs	r1, r2
 800360c:	001a      	movs	r2, r3
 800360e:	2300      	movs	r3, #0
 8003610:	4d05      	ldr	r5, [pc, #20]	@ (8003628 <_write_r+0x24>)
 8003612:	602b      	str	r3, [r5, #0]
 8003614:	f7fd febe 	bl	8001394 <_write>
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	d103      	bne.n	8003624 <_write_r+0x20>
 800361c:	682b      	ldr	r3, [r5, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d000      	beq.n	8003624 <_write_r+0x20>
 8003622:	6023      	str	r3, [r4, #0]
 8003624:	bd70      	pop	{r4, r5, r6, pc}
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	20000254 	.word	0x20000254

0800362c <__errno>:
 800362c:	4b01      	ldr	r3, [pc, #4]	@ (8003634 <__errno+0x8>)
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	4770      	bx	lr
 8003632:	46c0      	nop			@ (mov r8, r8)
 8003634:	20000018 	.word	0x20000018

08003638 <__libc_init_array>:
 8003638:	b570      	push	{r4, r5, r6, lr}
 800363a:	2600      	movs	r6, #0
 800363c:	4c0c      	ldr	r4, [pc, #48]	@ (8003670 <__libc_init_array+0x38>)
 800363e:	4d0d      	ldr	r5, [pc, #52]	@ (8003674 <__libc_init_array+0x3c>)
 8003640:	1b64      	subs	r4, r4, r5
 8003642:	10a4      	asrs	r4, r4, #2
 8003644:	42a6      	cmp	r6, r4
 8003646:	d109      	bne.n	800365c <__libc_init_array+0x24>
 8003648:	2600      	movs	r6, #0
 800364a:	f000 fa6d 	bl	8003b28 <_init>
 800364e:	4c0a      	ldr	r4, [pc, #40]	@ (8003678 <__libc_init_array+0x40>)
 8003650:	4d0a      	ldr	r5, [pc, #40]	@ (800367c <__libc_init_array+0x44>)
 8003652:	1b64      	subs	r4, r4, r5
 8003654:	10a4      	asrs	r4, r4, #2
 8003656:	42a6      	cmp	r6, r4
 8003658:	d105      	bne.n	8003666 <__libc_init_array+0x2e>
 800365a:	bd70      	pop	{r4, r5, r6, pc}
 800365c:	00b3      	lsls	r3, r6, #2
 800365e:	58eb      	ldr	r3, [r5, r3]
 8003660:	4798      	blx	r3
 8003662:	3601      	adds	r6, #1
 8003664:	e7ee      	b.n	8003644 <__libc_init_array+0xc>
 8003666:	00b3      	lsls	r3, r6, #2
 8003668:	58eb      	ldr	r3, [r5, r3]
 800366a:	4798      	blx	r3
 800366c:	3601      	adds	r6, #1
 800366e:	e7f2      	b.n	8003656 <__libc_init_array+0x1e>
 8003670:	08003bec 	.word	0x08003bec
 8003674:	08003bec 	.word	0x08003bec
 8003678:	08003bf0 	.word	0x08003bf0
 800367c:	08003bec 	.word	0x08003bec

08003680 <__retarget_lock_init_recursive>:
 8003680:	4770      	bx	lr

08003682 <__retarget_lock_acquire_recursive>:
 8003682:	4770      	bx	lr

08003684 <__retarget_lock_release_recursive>:
 8003684:	4770      	bx	lr
	...

08003688 <_free_r>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	0005      	movs	r5, r0
 800368c:	1e0c      	subs	r4, r1, #0
 800368e:	d010      	beq.n	80036b2 <_free_r+0x2a>
 8003690:	3c04      	subs	r4, #4
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	da00      	bge.n	800369a <_free_r+0x12>
 8003698:	18e4      	adds	r4, r4, r3
 800369a:	0028      	movs	r0, r5
 800369c:	f000 f8e0 	bl	8003860 <__malloc_lock>
 80036a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003718 <_free_r+0x90>)
 80036a2:	6813      	ldr	r3, [r2, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <_free_r+0x2c>
 80036a8:	6063      	str	r3, [r4, #4]
 80036aa:	6014      	str	r4, [r2, #0]
 80036ac:	0028      	movs	r0, r5
 80036ae:	f000 f8df 	bl	8003870 <__malloc_unlock>
 80036b2:	bd70      	pop	{r4, r5, r6, pc}
 80036b4:	42a3      	cmp	r3, r4
 80036b6:	d908      	bls.n	80036ca <_free_r+0x42>
 80036b8:	6820      	ldr	r0, [r4, #0]
 80036ba:	1821      	adds	r1, r4, r0
 80036bc:	428b      	cmp	r3, r1
 80036be:	d1f3      	bne.n	80036a8 <_free_r+0x20>
 80036c0:	6819      	ldr	r1, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	1809      	adds	r1, r1, r0
 80036c6:	6021      	str	r1, [r4, #0]
 80036c8:	e7ee      	b.n	80036a8 <_free_r+0x20>
 80036ca:	001a      	movs	r2, r3
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <_free_r+0x4e>
 80036d2:	42a3      	cmp	r3, r4
 80036d4:	d9f9      	bls.n	80036ca <_free_r+0x42>
 80036d6:	6811      	ldr	r1, [r2, #0]
 80036d8:	1850      	adds	r0, r2, r1
 80036da:	42a0      	cmp	r0, r4
 80036dc:	d10b      	bne.n	80036f6 <_free_r+0x6e>
 80036de:	6820      	ldr	r0, [r4, #0]
 80036e0:	1809      	adds	r1, r1, r0
 80036e2:	1850      	adds	r0, r2, r1
 80036e4:	6011      	str	r1, [r2, #0]
 80036e6:	4283      	cmp	r3, r0
 80036e8:	d1e0      	bne.n	80036ac <_free_r+0x24>
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	1841      	adds	r1, r0, r1
 80036f0:	6011      	str	r1, [r2, #0]
 80036f2:	6053      	str	r3, [r2, #4]
 80036f4:	e7da      	b.n	80036ac <_free_r+0x24>
 80036f6:	42a0      	cmp	r0, r4
 80036f8:	d902      	bls.n	8003700 <_free_r+0x78>
 80036fa:	230c      	movs	r3, #12
 80036fc:	602b      	str	r3, [r5, #0]
 80036fe:	e7d5      	b.n	80036ac <_free_r+0x24>
 8003700:	6820      	ldr	r0, [r4, #0]
 8003702:	1821      	adds	r1, r4, r0
 8003704:	428b      	cmp	r3, r1
 8003706:	d103      	bne.n	8003710 <_free_r+0x88>
 8003708:	6819      	ldr	r1, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	1809      	adds	r1, r1, r0
 800370e:	6021      	str	r1, [r4, #0]
 8003710:	6063      	str	r3, [r4, #4]
 8003712:	6054      	str	r4, [r2, #4]
 8003714:	e7ca      	b.n	80036ac <_free_r+0x24>
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	20000260 	.word	0x20000260

0800371c <sbrk_aligned>:
 800371c:	b570      	push	{r4, r5, r6, lr}
 800371e:	4e0f      	ldr	r6, [pc, #60]	@ (800375c <sbrk_aligned+0x40>)
 8003720:	000d      	movs	r5, r1
 8003722:	6831      	ldr	r1, [r6, #0]
 8003724:	0004      	movs	r4, r0
 8003726:	2900      	cmp	r1, #0
 8003728:	d102      	bne.n	8003730 <sbrk_aligned+0x14>
 800372a:	f000 f9eb 	bl	8003b04 <_sbrk_r>
 800372e:	6030      	str	r0, [r6, #0]
 8003730:	0029      	movs	r1, r5
 8003732:	0020      	movs	r0, r4
 8003734:	f000 f9e6 	bl	8003b04 <_sbrk_r>
 8003738:	1c43      	adds	r3, r0, #1
 800373a:	d103      	bne.n	8003744 <sbrk_aligned+0x28>
 800373c:	2501      	movs	r5, #1
 800373e:	426d      	negs	r5, r5
 8003740:	0028      	movs	r0, r5
 8003742:	bd70      	pop	{r4, r5, r6, pc}
 8003744:	2303      	movs	r3, #3
 8003746:	1cc5      	adds	r5, r0, #3
 8003748:	439d      	bics	r5, r3
 800374a:	42a8      	cmp	r0, r5
 800374c:	d0f8      	beq.n	8003740 <sbrk_aligned+0x24>
 800374e:	1a29      	subs	r1, r5, r0
 8003750:	0020      	movs	r0, r4
 8003752:	f000 f9d7 	bl	8003b04 <_sbrk_r>
 8003756:	3001      	adds	r0, #1
 8003758:	d1f2      	bne.n	8003740 <sbrk_aligned+0x24>
 800375a:	e7ef      	b.n	800373c <sbrk_aligned+0x20>
 800375c:	2000025c 	.word	0x2000025c

08003760 <_malloc_r>:
 8003760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003762:	2203      	movs	r2, #3
 8003764:	1ccb      	adds	r3, r1, #3
 8003766:	4393      	bics	r3, r2
 8003768:	3308      	adds	r3, #8
 800376a:	0005      	movs	r5, r0
 800376c:	001f      	movs	r7, r3
 800376e:	2b0c      	cmp	r3, #12
 8003770:	d234      	bcs.n	80037dc <_malloc_r+0x7c>
 8003772:	270c      	movs	r7, #12
 8003774:	42b9      	cmp	r1, r7
 8003776:	d833      	bhi.n	80037e0 <_malloc_r+0x80>
 8003778:	0028      	movs	r0, r5
 800377a:	f000 f871 	bl	8003860 <__malloc_lock>
 800377e:	4e37      	ldr	r6, [pc, #220]	@ (800385c <_malloc_r+0xfc>)
 8003780:	6833      	ldr	r3, [r6, #0]
 8003782:	001c      	movs	r4, r3
 8003784:	2c00      	cmp	r4, #0
 8003786:	d12f      	bne.n	80037e8 <_malloc_r+0x88>
 8003788:	0039      	movs	r1, r7
 800378a:	0028      	movs	r0, r5
 800378c:	f7ff ffc6 	bl	800371c <sbrk_aligned>
 8003790:	0004      	movs	r4, r0
 8003792:	1c43      	adds	r3, r0, #1
 8003794:	d15f      	bne.n	8003856 <_malloc_r+0xf6>
 8003796:	6834      	ldr	r4, [r6, #0]
 8003798:	9400      	str	r4, [sp, #0]
 800379a:	9b00      	ldr	r3, [sp, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d14a      	bne.n	8003836 <_malloc_r+0xd6>
 80037a0:	2c00      	cmp	r4, #0
 80037a2:	d052      	beq.n	800384a <_malloc_r+0xea>
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	0028      	movs	r0, r5
 80037a8:	18e3      	adds	r3, r4, r3
 80037aa:	9900      	ldr	r1, [sp, #0]
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	f000 f9a9 	bl	8003b04 <_sbrk_r>
 80037b2:	9b01      	ldr	r3, [sp, #4]
 80037b4:	4283      	cmp	r3, r0
 80037b6:	d148      	bne.n	800384a <_malloc_r+0xea>
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	0028      	movs	r0, r5
 80037bc:	1aff      	subs	r7, r7, r3
 80037be:	0039      	movs	r1, r7
 80037c0:	f7ff ffac 	bl	800371c <sbrk_aligned>
 80037c4:	3001      	adds	r0, #1
 80037c6:	d040      	beq.n	800384a <_malloc_r+0xea>
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	19db      	adds	r3, r3, r7
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	6833      	ldr	r3, [r6, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	2a00      	cmp	r2, #0
 80037d4:	d133      	bne.n	800383e <_malloc_r+0xde>
 80037d6:	9b00      	ldr	r3, [sp, #0]
 80037d8:	6033      	str	r3, [r6, #0]
 80037da:	e019      	b.n	8003810 <_malloc_r+0xb0>
 80037dc:	2b00      	cmp	r3, #0
 80037de:	dac9      	bge.n	8003774 <_malloc_r+0x14>
 80037e0:	230c      	movs	r3, #12
 80037e2:	602b      	str	r3, [r5, #0]
 80037e4:	2000      	movs	r0, #0
 80037e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80037e8:	6821      	ldr	r1, [r4, #0]
 80037ea:	1bc9      	subs	r1, r1, r7
 80037ec:	d420      	bmi.n	8003830 <_malloc_r+0xd0>
 80037ee:	290b      	cmp	r1, #11
 80037f0:	d90a      	bls.n	8003808 <_malloc_r+0xa8>
 80037f2:	19e2      	adds	r2, r4, r7
 80037f4:	6027      	str	r7, [r4, #0]
 80037f6:	42a3      	cmp	r3, r4
 80037f8:	d104      	bne.n	8003804 <_malloc_r+0xa4>
 80037fa:	6032      	str	r2, [r6, #0]
 80037fc:	6863      	ldr	r3, [r4, #4]
 80037fe:	6011      	str	r1, [r2, #0]
 8003800:	6053      	str	r3, [r2, #4]
 8003802:	e005      	b.n	8003810 <_malloc_r+0xb0>
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	e7f9      	b.n	80037fc <_malloc_r+0x9c>
 8003808:	6862      	ldr	r2, [r4, #4]
 800380a:	42a3      	cmp	r3, r4
 800380c:	d10e      	bne.n	800382c <_malloc_r+0xcc>
 800380e:	6032      	str	r2, [r6, #0]
 8003810:	0028      	movs	r0, r5
 8003812:	f000 f82d 	bl	8003870 <__malloc_unlock>
 8003816:	0020      	movs	r0, r4
 8003818:	2207      	movs	r2, #7
 800381a:	300b      	adds	r0, #11
 800381c:	1d23      	adds	r3, r4, #4
 800381e:	4390      	bics	r0, r2
 8003820:	1ac2      	subs	r2, r0, r3
 8003822:	4298      	cmp	r0, r3
 8003824:	d0df      	beq.n	80037e6 <_malloc_r+0x86>
 8003826:	1a1b      	subs	r3, r3, r0
 8003828:	50a3      	str	r3, [r4, r2]
 800382a:	e7dc      	b.n	80037e6 <_malloc_r+0x86>
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	e7ef      	b.n	8003810 <_malloc_r+0xb0>
 8003830:	0023      	movs	r3, r4
 8003832:	6864      	ldr	r4, [r4, #4]
 8003834:	e7a6      	b.n	8003784 <_malloc_r+0x24>
 8003836:	9c00      	ldr	r4, [sp, #0]
 8003838:	6863      	ldr	r3, [r4, #4]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	e7ad      	b.n	800379a <_malloc_r+0x3a>
 800383e:	001a      	movs	r2, r3
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	42a3      	cmp	r3, r4
 8003844:	d1fb      	bne.n	800383e <_malloc_r+0xde>
 8003846:	2300      	movs	r3, #0
 8003848:	e7da      	b.n	8003800 <_malloc_r+0xa0>
 800384a:	230c      	movs	r3, #12
 800384c:	0028      	movs	r0, r5
 800384e:	602b      	str	r3, [r5, #0]
 8003850:	f000 f80e 	bl	8003870 <__malloc_unlock>
 8003854:	e7c6      	b.n	80037e4 <_malloc_r+0x84>
 8003856:	6007      	str	r7, [r0, #0]
 8003858:	e7da      	b.n	8003810 <_malloc_r+0xb0>
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	20000260 	.word	0x20000260

08003860 <__malloc_lock>:
 8003860:	b510      	push	{r4, lr}
 8003862:	4802      	ldr	r0, [pc, #8]	@ (800386c <__malloc_lock+0xc>)
 8003864:	f7ff ff0d 	bl	8003682 <__retarget_lock_acquire_recursive>
 8003868:	bd10      	pop	{r4, pc}
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	20000258 	.word	0x20000258

08003870 <__malloc_unlock>:
 8003870:	b510      	push	{r4, lr}
 8003872:	4802      	ldr	r0, [pc, #8]	@ (800387c <__malloc_unlock+0xc>)
 8003874:	f7ff ff06 	bl	8003684 <__retarget_lock_release_recursive>
 8003878:	bd10      	pop	{r4, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	20000258 	.word	0x20000258

08003880 <__sflush_r>:
 8003880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003882:	220c      	movs	r2, #12
 8003884:	5e8b      	ldrsh	r3, [r1, r2]
 8003886:	0005      	movs	r5, r0
 8003888:	000c      	movs	r4, r1
 800388a:	071a      	lsls	r2, r3, #28
 800388c:	d456      	bmi.n	800393c <__sflush_r+0xbc>
 800388e:	684a      	ldr	r2, [r1, #4]
 8003890:	2a00      	cmp	r2, #0
 8003892:	dc02      	bgt.n	800389a <__sflush_r+0x1a>
 8003894:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003896:	2a00      	cmp	r2, #0
 8003898:	dd4e      	ble.n	8003938 <__sflush_r+0xb8>
 800389a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800389c:	2f00      	cmp	r7, #0
 800389e:	d04b      	beq.n	8003938 <__sflush_r+0xb8>
 80038a0:	2200      	movs	r2, #0
 80038a2:	2080      	movs	r0, #128	@ 0x80
 80038a4:	682e      	ldr	r6, [r5, #0]
 80038a6:	602a      	str	r2, [r5, #0]
 80038a8:	001a      	movs	r2, r3
 80038aa:	0140      	lsls	r0, r0, #5
 80038ac:	6a21      	ldr	r1, [r4, #32]
 80038ae:	4002      	ands	r2, r0
 80038b0:	4203      	tst	r3, r0
 80038b2:	d033      	beq.n	800391c <__sflush_r+0x9c>
 80038b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80038b6:	89a3      	ldrh	r3, [r4, #12]
 80038b8:	075b      	lsls	r3, r3, #29
 80038ba:	d506      	bpl.n	80038ca <__sflush_r+0x4a>
 80038bc:	6863      	ldr	r3, [r4, #4]
 80038be:	1ad2      	subs	r2, r2, r3
 80038c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <__sflush_r+0x4a>
 80038c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038c8:	1ad2      	subs	r2, r2, r3
 80038ca:	2300      	movs	r3, #0
 80038cc:	0028      	movs	r0, r5
 80038ce:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80038d0:	6a21      	ldr	r1, [r4, #32]
 80038d2:	47b8      	blx	r7
 80038d4:	89a2      	ldrh	r2, [r4, #12]
 80038d6:	1c43      	adds	r3, r0, #1
 80038d8:	d106      	bne.n	80038e8 <__sflush_r+0x68>
 80038da:	6829      	ldr	r1, [r5, #0]
 80038dc:	291d      	cmp	r1, #29
 80038de:	d846      	bhi.n	800396e <__sflush_r+0xee>
 80038e0:	4b29      	ldr	r3, [pc, #164]	@ (8003988 <__sflush_r+0x108>)
 80038e2:	410b      	asrs	r3, r1
 80038e4:	07db      	lsls	r3, r3, #31
 80038e6:	d442      	bmi.n	800396e <__sflush_r+0xee>
 80038e8:	2300      	movs	r3, #0
 80038ea:	6063      	str	r3, [r4, #4]
 80038ec:	6923      	ldr	r3, [r4, #16]
 80038ee:	6023      	str	r3, [r4, #0]
 80038f0:	04d2      	lsls	r2, r2, #19
 80038f2:	d505      	bpl.n	8003900 <__sflush_r+0x80>
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	d102      	bne.n	80038fe <__sflush_r+0x7e>
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d100      	bne.n	8003900 <__sflush_r+0x80>
 80038fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8003900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003902:	602e      	str	r6, [r5, #0]
 8003904:	2900      	cmp	r1, #0
 8003906:	d017      	beq.n	8003938 <__sflush_r+0xb8>
 8003908:	0023      	movs	r3, r4
 800390a:	3344      	adds	r3, #68	@ 0x44
 800390c:	4299      	cmp	r1, r3
 800390e:	d002      	beq.n	8003916 <__sflush_r+0x96>
 8003910:	0028      	movs	r0, r5
 8003912:	f7ff feb9 	bl	8003688 <_free_r>
 8003916:	2300      	movs	r3, #0
 8003918:	6363      	str	r3, [r4, #52]	@ 0x34
 800391a:	e00d      	b.n	8003938 <__sflush_r+0xb8>
 800391c:	2301      	movs	r3, #1
 800391e:	0028      	movs	r0, r5
 8003920:	47b8      	blx	r7
 8003922:	0002      	movs	r2, r0
 8003924:	1c43      	adds	r3, r0, #1
 8003926:	d1c6      	bne.n	80038b6 <__sflush_r+0x36>
 8003928:	682b      	ldr	r3, [r5, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0c3      	beq.n	80038b6 <__sflush_r+0x36>
 800392e:	2b1d      	cmp	r3, #29
 8003930:	d001      	beq.n	8003936 <__sflush_r+0xb6>
 8003932:	2b16      	cmp	r3, #22
 8003934:	d11a      	bne.n	800396c <__sflush_r+0xec>
 8003936:	602e      	str	r6, [r5, #0]
 8003938:	2000      	movs	r0, #0
 800393a:	e01e      	b.n	800397a <__sflush_r+0xfa>
 800393c:	690e      	ldr	r6, [r1, #16]
 800393e:	2e00      	cmp	r6, #0
 8003940:	d0fa      	beq.n	8003938 <__sflush_r+0xb8>
 8003942:	680f      	ldr	r7, [r1, #0]
 8003944:	600e      	str	r6, [r1, #0]
 8003946:	1bba      	subs	r2, r7, r6
 8003948:	9201      	str	r2, [sp, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	079b      	lsls	r3, r3, #30
 800394e:	d100      	bne.n	8003952 <__sflush_r+0xd2>
 8003950:	694a      	ldr	r2, [r1, #20]
 8003952:	60a2      	str	r2, [r4, #8]
 8003954:	9b01      	ldr	r3, [sp, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	ddee      	ble.n	8003938 <__sflush_r+0xb8>
 800395a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800395c:	0032      	movs	r2, r6
 800395e:	001f      	movs	r7, r3
 8003960:	0028      	movs	r0, r5
 8003962:	9b01      	ldr	r3, [sp, #4]
 8003964:	6a21      	ldr	r1, [r4, #32]
 8003966:	47b8      	blx	r7
 8003968:	2800      	cmp	r0, #0
 800396a:	dc07      	bgt.n	800397c <__sflush_r+0xfc>
 800396c:	89a2      	ldrh	r2, [r4, #12]
 800396e:	2340      	movs	r3, #64	@ 0x40
 8003970:	2001      	movs	r0, #1
 8003972:	4313      	orrs	r3, r2
 8003974:	b21b      	sxth	r3, r3
 8003976:	81a3      	strh	r3, [r4, #12]
 8003978:	4240      	negs	r0, r0
 800397a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800397c:	9b01      	ldr	r3, [sp, #4]
 800397e:	1836      	adds	r6, r6, r0
 8003980:	1a1b      	subs	r3, r3, r0
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	e7e6      	b.n	8003954 <__sflush_r+0xd4>
 8003986:	46c0      	nop			@ (mov r8, r8)
 8003988:	dfbffffe 	.word	0xdfbffffe

0800398c <_fflush_r>:
 800398c:	690b      	ldr	r3, [r1, #16]
 800398e:	b570      	push	{r4, r5, r6, lr}
 8003990:	0005      	movs	r5, r0
 8003992:	000c      	movs	r4, r1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d102      	bne.n	800399e <_fflush_r+0x12>
 8003998:	2500      	movs	r5, #0
 800399a:	0028      	movs	r0, r5
 800399c:	bd70      	pop	{r4, r5, r6, pc}
 800399e:	2800      	cmp	r0, #0
 80039a0:	d004      	beq.n	80039ac <_fflush_r+0x20>
 80039a2:	6a03      	ldr	r3, [r0, #32]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <_fflush_r+0x20>
 80039a8:	f7ff fc6a 	bl	8003280 <__sinit>
 80039ac:	220c      	movs	r2, #12
 80039ae:	5ea3      	ldrsh	r3, [r4, r2]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f1      	beq.n	8003998 <_fflush_r+0xc>
 80039b4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80039b6:	07d2      	lsls	r2, r2, #31
 80039b8:	d404      	bmi.n	80039c4 <_fflush_r+0x38>
 80039ba:	059b      	lsls	r3, r3, #22
 80039bc:	d402      	bmi.n	80039c4 <_fflush_r+0x38>
 80039be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039c0:	f7ff fe5f 	bl	8003682 <__retarget_lock_acquire_recursive>
 80039c4:	0028      	movs	r0, r5
 80039c6:	0021      	movs	r1, r4
 80039c8:	f7ff ff5a 	bl	8003880 <__sflush_r>
 80039cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039ce:	0005      	movs	r5, r0
 80039d0:	07db      	lsls	r3, r3, #31
 80039d2:	d4e2      	bmi.n	800399a <_fflush_r+0xe>
 80039d4:	89a3      	ldrh	r3, [r4, #12]
 80039d6:	059b      	lsls	r3, r3, #22
 80039d8:	d4df      	bmi.n	800399a <_fflush_r+0xe>
 80039da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039dc:	f7ff fe52 	bl	8003684 <__retarget_lock_release_recursive>
 80039e0:	e7db      	b.n	800399a <_fflush_r+0xe>
	...

080039e4 <__swhatbuf_r>:
 80039e4:	b570      	push	{r4, r5, r6, lr}
 80039e6:	000e      	movs	r6, r1
 80039e8:	001d      	movs	r5, r3
 80039ea:	230e      	movs	r3, #14
 80039ec:	5ec9      	ldrsh	r1, [r1, r3]
 80039ee:	0014      	movs	r4, r2
 80039f0:	b096      	sub	sp, #88	@ 0x58
 80039f2:	2900      	cmp	r1, #0
 80039f4:	da0c      	bge.n	8003a10 <__swhatbuf_r+0x2c>
 80039f6:	89b2      	ldrh	r2, [r6, #12]
 80039f8:	2380      	movs	r3, #128	@ 0x80
 80039fa:	0011      	movs	r1, r2
 80039fc:	4019      	ands	r1, r3
 80039fe:	421a      	tst	r2, r3
 8003a00:	d114      	bne.n	8003a2c <__swhatbuf_r+0x48>
 8003a02:	2380      	movs	r3, #128	@ 0x80
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	2000      	movs	r0, #0
 8003a08:	6029      	str	r1, [r5, #0]
 8003a0a:	6023      	str	r3, [r4, #0]
 8003a0c:	b016      	add	sp, #88	@ 0x58
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}
 8003a10:	466a      	mov	r2, sp
 8003a12:	f000 f853 	bl	8003abc <_fstat_r>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	dbed      	blt.n	80039f6 <__swhatbuf_r+0x12>
 8003a1a:	23f0      	movs	r3, #240	@ 0xf0
 8003a1c:	9901      	ldr	r1, [sp, #4]
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	4019      	ands	r1, r3
 8003a22:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <__swhatbuf_r+0x50>)
 8003a24:	18c9      	adds	r1, r1, r3
 8003a26:	424b      	negs	r3, r1
 8003a28:	4159      	adcs	r1, r3
 8003a2a:	e7ea      	b.n	8003a02 <__swhatbuf_r+0x1e>
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	2340      	movs	r3, #64	@ 0x40
 8003a30:	e7e9      	b.n	8003a06 <__swhatbuf_r+0x22>
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	ffffe000 	.word	0xffffe000

08003a38 <__smakebuf_r>:
 8003a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3a:	2602      	movs	r6, #2
 8003a3c:	898b      	ldrh	r3, [r1, #12]
 8003a3e:	0005      	movs	r5, r0
 8003a40:	000c      	movs	r4, r1
 8003a42:	b085      	sub	sp, #20
 8003a44:	4233      	tst	r3, r6
 8003a46:	d007      	beq.n	8003a58 <__smakebuf_r+0x20>
 8003a48:	0023      	movs	r3, r4
 8003a4a:	3347      	adds	r3, #71	@ 0x47
 8003a4c:	6023      	str	r3, [r4, #0]
 8003a4e:	6123      	str	r3, [r4, #16]
 8003a50:	2301      	movs	r3, #1
 8003a52:	6163      	str	r3, [r4, #20]
 8003a54:	b005      	add	sp, #20
 8003a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a58:	ab03      	add	r3, sp, #12
 8003a5a:	aa02      	add	r2, sp, #8
 8003a5c:	f7ff ffc2 	bl	80039e4 <__swhatbuf_r>
 8003a60:	9f02      	ldr	r7, [sp, #8]
 8003a62:	9001      	str	r0, [sp, #4]
 8003a64:	0039      	movs	r1, r7
 8003a66:	0028      	movs	r0, r5
 8003a68:	f7ff fe7a 	bl	8003760 <_malloc_r>
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	d108      	bne.n	8003a82 <__smakebuf_r+0x4a>
 8003a70:	220c      	movs	r2, #12
 8003a72:	5ea3      	ldrsh	r3, [r4, r2]
 8003a74:	059a      	lsls	r2, r3, #22
 8003a76:	d4ed      	bmi.n	8003a54 <__smakebuf_r+0x1c>
 8003a78:	2203      	movs	r2, #3
 8003a7a:	4393      	bics	r3, r2
 8003a7c:	431e      	orrs	r6, r3
 8003a7e:	81a6      	strh	r6, [r4, #12]
 8003a80:	e7e2      	b.n	8003a48 <__smakebuf_r+0x10>
 8003a82:	2380      	movs	r3, #128	@ 0x80
 8003a84:	89a2      	ldrh	r2, [r4, #12]
 8003a86:	6020      	str	r0, [r4, #0]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	81a3      	strh	r3, [r4, #12]
 8003a8c:	9b03      	ldr	r3, [sp, #12]
 8003a8e:	6120      	str	r0, [r4, #16]
 8003a90:	6167      	str	r7, [r4, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00c      	beq.n	8003ab0 <__smakebuf_r+0x78>
 8003a96:	0028      	movs	r0, r5
 8003a98:	230e      	movs	r3, #14
 8003a9a:	5ee1      	ldrsh	r1, [r4, r3]
 8003a9c:	f000 f820 	bl	8003ae0 <_isatty_r>
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	d005      	beq.n	8003ab0 <__smakebuf_r+0x78>
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	89a2      	ldrh	r2, [r4, #12]
 8003aa8:	439a      	bics	r2, r3
 8003aaa:	3b02      	subs	r3, #2
 8003aac:	4313      	orrs	r3, r2
 8003aae:	81a3      	strh	r3, [r4, #12]
 8003ab0:	89a3      	ldrh	r3, [r4, #12]
 8003ab2:	9a01      	ldr	r2, [sp, #4]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	81a3      	strh	r3, [r4, #12]
 8003ab8:	e7cc      	b.n	8003a54 <__smakebuf_r+0x1c>
	...

08003abc <_fstat_r>:
 8003abc:	2300      	movs	r3, #0
 8003abe:	b570      	push	{r4, r5, r6, lr}
 8003ac0:	4d06      	ldr	r5, [pc, #24]	@ (8003adc <_fstat_r+0x20>)
 8003ac2:	0004      	movs	r4, r0
 8003ac4:	0008      	movs	r0, r1
 8003ac6:	0011      	movs	r1, r2
 8003ac8:	602b      	str	r3, [r5, #0]
 8003aca:	f7fd fc89 	bl	80013e0 <_fstat>
 8003ace:	1c43      	adds	r3, r0, #1
 8003ad0:	d103      	bne.n	8003ada <_fstat_r+0x1e>
 8003ad2:	682b      	ldr	r3, [r5, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d000      	beq.n	8003ada <_fstat_r+0x1e>
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	bd70      	pop	{r4, r5, r6, pc}
 8003adc:	20000254 	.word	0x20000254

08003ae0 <_isatty_r>:
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	b570      	push	{r4, r5, r6, lr}
 8003ae4:	4d06      	ldr	r5, [pc, #24]	@ (8003b00 <_isatty_r+0x20>)
 8003ae6:	0004      	movs	r4, r0
 8003ae8:	0008      	movs	r0, r1
 8003aea:	602b      	str	r3, [r5, #0]
 8003aec:	f7fd fc86 	bl	80013fc <_isatty>
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	d103      	bne.n	8003afc <_isatty_r+0x1c>
 8003af4:	682b      	ldr	r3, [r5, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d000      	beq.n	8003afc <_isatty_r+0x1c>
 8003afa:	6023      	str	r3, [r4, #0]
 8003afc:	bd70      	pop	{r4, r5, r6, pc}
 8003afe:	46c0      	nop			@ (mov r8, r8)
 8003b00:	20000254 	.word	0x20000254

08003b04 <_sbrk_r>:
 8003b04:	2300      	movs	r3, #0
 8003b06:	b570      	push	{r4, r5, r6, lr}
 8003b08:	4d06      	ldr	r5, [pc, #24]	@ (8003b24 <_sbrk_r+0x20>)
 8003b0a:	0004      	movs	r4, r0
 8003b0c:	0008      	movs	r0, r1
 8003b0e:	602b      	str	r3, [r5, #0]
 8003b10:	f7fd fc88 	bl	8001424 <_sbrk>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d103      	bne.n	8003b20 <_sbrk_r+0x1c>
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d000      	beq.n	8003b20 <_sbrk_r+0x1c>
 8003b1e:	6023      	str	r3, [r4, #0]
 8003b20:	bd70      	pop	{r4, r5, r6, pc}
 8003b22:	46c0      	nop			@ (mov r8, r8)
 8003b24:	20000254 	.word	0x20000254

08003b28 <_init>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	46c0      	nop			@ (mov r8, r8)
 8003b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2e:	bc08      	pop	{r3}
 8003b30:	469e      	mov	lr, r3
 8003b32:	4770      	bx	lr

08003b34 <_fini>:
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	46c0      	nop			@ (mov r8, r8)
 8003b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3a:	bc08      	pop	{r3}
 8003b3c:	469e      	mov	lr, r3
 8003b3e:	4770      	bx	lr
